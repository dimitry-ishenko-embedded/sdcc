From: Philipp Klaus Krause <pkk@spth.de>
Subject: Workaround for a LyX 2.4 issue
Origin: upstream, https://sourceforge.net/p/sdcc/code/14697/
Bug: https://sourceforge.net/p/sdcc/bugs/3708/
Bug-Debian: https://bugs.debian.org/1064731

--- a/doc/sdccman.lyx	2023-12-20 21:41:28.000000000 +0000
+++ b/doc/sdccman.lyx	2024-03-18 11:41:17.493133285 +0000
@@ -1,5 +1,5 @@
-#LyX 2.3 created this file. For more info see http://www.lyx.org/
-\lyxformat 544
+#LyX 2.4 created this file. For more info see https://www.lyx.org/
+\lyxformat 620
 \begin_document
 \begin_header
 \save_transient_properties true
@@ -26,11 +26,16 @@
 \begin_modules
 logicalmkup
 \end_modules
-\maintain_unincluded_children false
+\maintain_unincluded_children no
+\begin_local_layout
+InsetLayout "Flex:URL"
+	NeedCProtect          false
+End
+\end_local_layout
 \language english
 \language_package default
 \inputencoding utf8
-\fontencoding global
+\fontencoding auto
 \font_roman "times" "default"
 \font_sans "helvet" "default"
 \font_typewriter "courier" "default"
@@ -38,7 +43,9 @@
 \font_default_family default
 \use_non_tex_fonts false
 \font_sc false
-\font_osf false
+\font_roman_osf false
+\font_sans_osf false
+\font_typewriter_osf false
 \font_sf_scale 100 100
 \font_tt_scale 100 100
 \use_microtype false
@@ -48,6 +55,8 @@
 \output_sync 0
 \bibtex_command default
 \index_command default
+\float_placement class
+\float_alignment class
 \paperfontsize default
 \spacing single
 \use_hyperref true
@@ -64,7 +73,7 @@
 \pdf_colorlinks true
 \pdf_backref false
 \pdf_pdfusetitle true
-\papersize letterpaper
+\papersize letter
 \use_geometry true
 \use_package amsmath 1
 \use_package amssymb 1
@@ -85,11 +94,13 @@
 \suppress_date false
 \justification true
 \use_refstyle 0
+\use_formatted_ref 0
 \use_minted 0
+\use_lineno 0
 \branch test
 \selected 0
 \filename_suffix 0
-\color #faf0e6
+\color background background
 \end_branch
 \index Index
 \shortcut idx
@@ -110,11 +121,16 @@
 \papercolumns 1
 \papersides 1
 \paperpagestyle fancy
+\tablestyle default
 \tracking_changes false
 \output_changes false
+\change_bars false
+\postpone_fragile_content false
 \html_math_output 0
 \html_css_as_file 0
 \html_be_strict false
+\docbook_table_output 0
+\docbook_mathml_prefix 1
 \end_header
 
 \begin_body
@@ -124,8 +140,10 @@
 status collapsed
 
 \begin_layout Plain Layout
-Please note: double dashed longoptions (e.g.
- –version) are written this way: -
+Please note:
+ double dashed longoptions (e.g.
+ –version) are written this way:
+ -
 \begin_inset ERT
 status collapsed
 
@@ -148,13 +166,12 @@
 \end_layout
 
 \begin_layout Plain Layout
-Architecture specific stuff (like memory models, code examples) should maybe
- later go
+Architecture specific stuff (like memory models,
+ code examples) should maybe later go
 \end_layout
 
 \begin_layout Plain Layout
-into separate sections/chapters/appendices (it is hard to document PIC or
- Z80 in 
+into separate sections/chapters/appendices (it is hard to document PIC or Z80 in 
 \end_layout
 
 \begin_layout Plain Layout
@@ -177,6 +194,7 @@
 \begin_inset CommandInset include
 LatexCommand input
 filename "sdcc_version"
+literal "true"
 
 \end_inset
 
@@ -186,11 +204,13 @@
 
 
 \size footnotesize
-$Date:: 2023-12-20 #$ 
+$Date::
+ 2024-01-29 #$ 
 \begin_inset Newline newline
 \end_inset
 
-$Revision: 14549 $
+$Revision:
+ 14650 $
 \end_layout
 
 \begin_layout Standard
@@ -244,39 +264,68 @@
 \emph on
 C
 \emph default
-ompiler) is free open source, retargettable, optimizing standard (ANSI C89
- / ISO C90, ISO C99, ISO C11 / ISO C17) C compiler suite originally written
- by 
+ompiler) is free open source,
+ retargettable,
+ optimizing standard (ANSI C89 / ISO C90,
+ ISO C99,
+ ISO C11 / ISO C17) C compiler suite originally written by 
 \series bold
 Sandeep Dutta
 \series default
  designed for 8 bit Microprocessors.
- The current version targets Intel MCS51 based Microprocessors (8031, 8032,
- 8051, 8052
+ The current version targets Intel MCS51 based Microprocessors (8031,
+ 8032,
+ 8051,
+ 8052
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-8031, 8032, 8051, 8052, mcs51 CPU
+8031,
+ 8032,
+ 8051,
+ 8052,
+ mcs51 CPU
 \end_layout
 
 \end_inset
 
-, etc.), Dallas DS80C390 variants, NXP (formerly Freescale/Motorola) HC08
- based (hc08, s08), Zilog Z80 based MCUs (Z80, Z180, eZ80 in Z80 mode, SM83,
- Rabbit 2000/3000, Rabbit 3000A 
+,
+ etc.),
+ Dallas DS80C390 variants,
+ NXP (formerly Freescale/Motorola) HC08 based (hc08,
+ s08),
+ Zilog Z80 based MCUs (Z80,
+ Z180,
+ eZ80 in Z80 mode,
+ SM83,
+ Rabbit 2000/3000,
+ Rabbit 3000A 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
-Z80, Z180, SM83, Rabbit 2000/3000, Rabbit 3000A CPU
+Z80,
+ Z180,
+ SM83,
+ Rabbit 2000/3000,
+ Rabbit 3000A CPU
 \end_layout
 
 \end_inset
 
-), Toshiba TLCS-90, Zilog eZ80 in Z80 mode, ASCII R800, STMicroelectronics
- STM8 
+),
+ Toshiba TLCS-90,
+ Zilog eZ80 in Z80 mode,
+ ASCII R800,
+ STMicroelectronics STM8 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -285,23 +334,31 @@
 
 \end_inset
 
-, Padauk PDK14 and PDK15.
- It can be retargeted for other microprocessors, support for Padauk PDK13
- and MOS6502 is under development, whereas Microchip PIC is currently unmaintain
-ed.
+,
+ Padauk PDK14 and PDK15.
+ It can be retargeted for other microprocessors,
+ support for Padauk PDK13 and MOS6502 is under development,
+ whereas Microchip PIC is currently unmaintained.
  The entire source code for the compiler is distributed under GPL.
  SDCC uses a modified version of ASXXXX
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-sdas (sdasgb, sdas6808, sdas8051, sdasz80)
+sdas (sdasgb,
+ sdas6808,
+ sdas8051,
+ sdasz80)
 \end_layout
 
 \end_inset
 
  & ASLINK
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -310,9 +367,9 @@
 
 \end_inset
 
-, free open source retargetable assembler & linker.
- SDCC has extensive language extensions suitable for utilizing various microcont
-rollers and underlying hardware effectively.
+,
+ free open source retargetable assembler & linker.
+ SDCC has extensive language extensions suitable for utilizing various microcontrollers and underlying hardware effectively.
  
 \begin_inset Newline newline
 \end_inset
@@ -336,25 +393,28 @@
 \begin_inset Newline newline
 \end_inset
 
-In addition to the MCU specific optimizations SDCC also does a host of standard
- optimizations like:
+In addition to the MCU specific optimizations SDCC also does a host of standard optimizations like:
 \end_layout
 
 \begin_layout Itemize
-global sub expression elimination, 
+global sub expression elimination,
+ 
 \end_layout
 
 \begin_layout Itemize
-loop optimizations (loop invariant, strength reduction of induction variables
- and loop reversing), 
+loop optimizations (loop invariant,
+ strength reduction of induction variables and loop reversing),
+ 
 \end_layout
 
 \begin_layout Itemize
-constant folding & propagation, 
+constant folding & propagation,
+ 
 \end_layout
 
 \begin_layout Itemize
-copy propagation, 
+copy propagation,
+ 
 \end_layout
 
 \begin_layout Itemize
@@ -370,8 +430,7 @@
 \end_layout
 
 \begin_layout Standard
-For the back-end SDCC uses a global register allocation scheme which should
- be well suited for other 8 bit MCUs.
+For the back-end SDCC uses a global register allocation scheme which should be well suited for other 8 bit MCUs.
 \begin_inset Newline newline
 \end_inset
 
@@ -379,8 +438,7 @@
 \begin_inset Newline newline
 \end_inset
 
-The peep hole optimizer uses a rule based substitution mechanism which is
- MCU independent.
+The peep hole optimizer uses a rule based substitution mechanism which is MCU independent.
 \begin_inset Newline newline
 \end_inset
 
@@ -465,7 +523,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-8 bits, 1 byte
+8 bits,
+ 1 byte
 \end_layout
 
 \end_inset
@@ -492,7 +551,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-0, 1
+0,
+ 1
 \end_layout
 
 \end_inset
@@ -512,7 +572,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-8 bits, 1 byte
+8 bits,
+ 1 byte
 \end_layout
 
 \end_inset
@@ -530,7 +591,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
--128, +127
+-128,
+ +127
 \end_layout
 
 \end_inset
@@ -539,7 +601,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-0, +255
+0,
+ +255
 \end_layout
 
 \end_inset
@@ -559,7 +622,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-16 bits, 2 bytes
+16 bits,
+ 2 bytes
 \end_layout
 
 \end_inset
@@ -577,7 +641,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
--32.768, +32.767
+-32.768,
+ +32.767
 \end_layout
 
 \end_inset
@@ -586,7 +651,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-0, +65.535
+0,
+ +65.535
 \end_layout
 
 \end_inset
@@ -606,7 +672,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-16 bits, 2 bytes
+16 bits,
+ 2 bytes
 \end_layout
 
 \end_inset
@@ -624,7 +691,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
--32.768, +32.767
+-32.768,
+ +32.767
 \end_layout
 
 \end_inset
@@ -633,7 +701,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-0, +65.535
+0,
+ +65.535
 \end_layout
 
 \end_inset
@@ -653,7 +722,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-32 bits, 4 bytes
+32 bits,
+ 4 bytes
 \end_layout
 
 \end_inset
@@ -671,7 +741,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
--2.147.483.648, +2.147.483.647
+-2.147.483.648,
+ +2.147.483.647
 \end_layout
 
 \end_inset
@@ -680,7 +751,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-0, +4.294.967.295
+0,
+ +4.294.967.295
 \end_layout
 
 \end_inset
@@ -710,7 +782,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-64 bits, 8 bytes
+64 bits,
+ 8 bytes
 \end_layout
 
 \end_inset
@@ -753,7 +826,10 @@
 status open
 
 \begin_layout Plain Layout
-Incomplete support in the hc08, s08, mod6502, pic14 and pic16 backends.
+Incomplete support in the hc08,
+ s08,
+ mod6502,
+ pic14 and pic16 backends.
 \end_layout
 
 \end_inset
@@ -767,7 +843,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-8 to 64 bits, 1 to 8 bytes
+8 to 64 bits,
+ 1 to 8 bytes
 \end_layout
 
 \end_inset
@@ -841,7 +918,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-1.175494351E-38, 
+1.175494351E-38,
+ 
 \family roman
 \series medium
 \shape up
@@ -870,7 +948,9 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-1, 2, 3 or 4 bytes
+1,
+ 2,
+ 3 or 4 bytes
 \end_layout
 
 \end_inset
@@ -913,7 +993,9 @@
 status open
 
 \begin_layout Plain Layout
-Only supported in the mcs51, ds390, ds400 backends.
+Only supported in the mcs51,
+ ds390,
+ ds400 backends.
 \end_layout
 
 \end_inset
@@ -954,7 +1036,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-0, 1
+0,
+ 1
 \end_layout
 
 \end_inset
@@ -973,7 +1056,8 @@
 inline assembler code
 \emph default
  to be embedded anywhere in a function.
- In addition, routines developed in assembly can also be called.
+ In addition,
+ routines developed in assembly can also be called.
 \begin_inset Newline newline
 \end_inset
 
@@ -995,8 +1079,8 @@
 \end_inset
 
 -cyclomatic) to report the relative complexity of a function.
- These functions can then be further optimized, or hand coded in assembly
- if needed.
+ These functions can then be further optimized,
+ or hand coded in assembly if needed.
 \begin_inset Newline newline
 \end_inset
 
@@ -1005,8 +1089,8 @@
 \end_inset
 
 SDCC also comes with a companion source level debugger SDCDB.
- The debugger currently uses ucSim, a free open source simulator for 8051
- and other micro-controllers.
+ The debugger currently uses ucSim,
+ a free open source simulator for 8051 and other micro-controllers.
 \begin_inset Newline newline
 \end_inset
 
@@ -1028,12 +1112,14 @@
 .
  
 \emph on
-Please note: the compiler will probably always be some steps ahead of this
- documentation
+Please note:
+ the compiler will probably always be some steps ahead of this documentation
 \series bold
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1060,8 +1146,7 @@
 \end_layout
 
 \begin_layout Standard
-SDCC suite is a collection of several components derived from different
- sources with different licenses:
+SDCC suite is a collection of several components derived from different sources with different licenses:
 \end_layout
 
 \begin_layout Itemize
@@ -1078,13 +1163,12 @@
 \begin_inset Newline newline
 \end_inset
 
-sdcc compiler is licensed under the GPLv2 (GPLv3 might apply depending on
- the libraries used when building).
+sdcc compiler is licensed under the GPLv2 (GPLv3 might apply depending on the libraries used when building).
 \begin_inset Newline newline
 \end_inset
 
-The code or object files generated by SDCC suite are not licensed, so they
- can be used in FLOSS or proprietary (closed source) applications.
+The code or object files generated by SDCC suite are not licensed,
+ so they can be used in FLOSS or proprietary (closed source) applications.
 \end_layout
 
 \begin_layout Itemize
@@ -1103,7 +1187,8 @@
 
 \end_inset
 
-; GPLv3 license
+;
+ GPLv3 license
 \end_layout
 
 \begin_layout Itemize
@@ -1122,7 +1207,8 @@
 
 \end_inset
 
-; GPLv3 license
+;
+ GPLv3 license
 \end_layout
 
 \begin_layout Itemize
@@ -1132,6 +1218,8 @@
 
 The great majority of SDCC run-time libraries are licensed under the GPLv2+LE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1140,19 +1228,14 @@
 
 \end_inset
 
- which allows linking of SDCC run-time libraries with proprietary (closed
- source) applications.
+ which allows linking of SDCC run-time libraries with proprietary (closed source) applications.
 \begin_inset Newline newline
 \end_inset
 
-A possible exception are pic device libraries and header files which are
- generated from Microchip header (.inc) and linker script (.lkr) files.
- Microchip requires that "The header files should state that they are only
- to be used with authentic Microchip devices" which makes them incompatible
- with the GPL, if Microchip has any copyright in them (which might depend
- on local copyright laws).
- Pic device libraries and header files are located at non-free/lib and non-free/
-include directories respectively.
+A possible exception are pic device libraries and header files which are generated from Microchip header (.inc) and linker script (.lkr) files.
+ Microchip requires that "The header files should state that they are only to be used with authentic Microchip devices" which makes them incompatible with the GPL,
+ if Microchip has any copyright in them (which might depend on local copyright laws).
+ Pic device libraries and header files are located at non-free/lib and non-free/include directories respectively.
  SDCC should be run with the 
 \series bold
 -
@@ -1174,6 +1257,8 @@
 \series bold
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1202,7 +1287,10 @@
 \end_layout
 
 \begin_layout Itemize
-sdbinutils utilities (sdar, sdranlib, sdnm, sdobjcopy):
+sdbinutils utilities (sdar,
+ sdranlib,
+ sdnm,
+ sdobjcopy):
 \begin_inset Newline newline
 \end_inset
 
@@ -1217,7 +1305,8 @@
 
 \end_inset
 
-; GPLv3 license
+;
+ GPLv3 license
 \end_layout
 
 \begin_layout Itemize
@@ -1241,8 +1330,9 @@
 \begin_inset Newline newline
 \end_inset
 
-derived from gcc-testsuite; no license explicitely specified, but since
- it is a part of GCC is probably GPLv3 licensed
+derived from gcc-testsuite;
+ no license explicitely specified,
+ but since it is a part of GCC is probably GPLv3 licensed
 \end_layout
 
 \begin_layout Itemize
@@ -1270,8 +1360,10 @@
 \begin_inset space \space{}
 \end_inset
 
-claims to have copyrights on this, and their term are non-free.
- However, a more common opinion is that Microchip Technology Inc.
+claims to have copyrights on this,
+ and their term are non-free.
+ However,
+ a more common opinion is that Microchip Technology Inc.
 \begin_inset space \space{}
 \end_inset
 
@@ -1312,7 +1404,8 @@
 
 \end_inset
 
-; Boost Software License 1.0 (BSL-1.0)
+;
+ Boost Software License 1.0 (BSL-1.0)
 \end_layout
 
 \end_deeper
@@ -1323,6 +1416,8 @@
 \begin_layout Itemize
 GPLv2 license
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1331,7 +1426,8 @@
 
 \end_inset
 
-: 
+:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -1348,6 +1444,8 @@
 \begin_layout Itemize
 LGPLv2.1 license
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1356,7 +1454,8 @@
 
 \end_inset
 
-: 
+:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -1373,6 +1472,8 @@
 \begin_layout Itemize
 GPLv3 license
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1381,7 +1482,8 @@
 
 \end_inset
 
-: 
+:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -1398,6 +1500,8 @@
 \begin_layout Itemize
 zlib/libpng License
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1406,7 +1510,8 @@
 
 \end_inset
 
-: 
+:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -1423,6 +1528,8 @@
 \begin_layout Itemize
 Boost Software License 1.0 (BSL-1.0)
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1431,7 +1538,8 @@
 
 \end_inset
 
-: 
+:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -1450,8 +1558,7 @@
 \end_layout
 
 \begin_layout Standard
-This documentation is maintained using a free open source word processor
- (\SpecialChar LyX
+This documentation is maintained using a free open source word processor (\SpecialChar LyX
 ) 
 \begin_inset Flex URL
 status collapsed
@@ -1469,6 +1576,8 @@
 \begin_layout Section
 Typographic conventions
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1481,7 +1590,8 @@
 \end_layout
 
 \begin_layout Standard
-Throughout this manual, we will use the following convention.
+Throughout this manual,
+ we will use the following convention.
  Commands you have to type in are printed in 
 \family sans
 \series bold
@@ -1510,6 +1620,8 @@
 
  with previous versions
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1522,12 +1634,14 @@
 \end_layout
 
 \begin_layout Standard
-Newer versions have usually numerous bug fixes compared with the previous
- version.
+Newer versions have usually numerous bug fixes compared with the previous version.
  But we also sometimes introduce some incompatibilities with older versions.
- Not just for the fun of it, but to make the compiler more stable, efficient
- and standard compliant
+ Not just for the fun of it,
+ but to make the compiler more stable,
+ efficient and standard compliant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1540,6 +1654,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Standard-Compliance"
+nolink "false"
 
 \end_inset
 
@@ -1549,7 +1664,8 @@
 status collapsed
 
 \begin_layout Plain Layout
-It would be fine to add to each item, in which version was it changed.
+It would be fine to add to each item,
+ in which version was it changed.
 \end_layout
 
 \end_inset
@@ -1558,9 +1674,10 @@
 \end_layout
 
 \begin_layout Itemize
-short is now equivalent to int (16 bits), it used to be equivalent to char
- (8 bits) which is not ANSI compliant.
- To maintain compatibility, old programs could be compiled using the -
+short is now equivalent to int (16 bits),
+ it used to be equivalent to char (8 bits) which is not ANSI compliant.
+ To maintain compatibility,
+ old programs could be compiled using the -
 \begin_inset ERT
 status collapsed
 
@@ -1577,17 +1694,20 @@
 \end_layout
 
 \begin_layout Itemize
-the default directory for gcc-builds where include, library and documentation
- files are stored is now in /usr/local/share.
+the default directory for gcc-builds where include,
+ library and documentation files are stored is now in /usr/local/share.
 \end_layout
 
 \begin_layout Itemize
 char type parameters to vararg
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-vararg, va
+vararg,
+ va
 \begin_inset ERT
 status collapsed
 
@@ -1605,8 +1725,7 @@
 
 \end_inset
 
- functions are casted to int unless explicitly casted and neither of the
- 
+ functions are casted to int unless explicitly casted and neither of the 
 \series bold
 -
 \begin_inset ERT
@@ -1623,6 +1742,8 @@
 
 -std-c89
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1645,6 +1766,7 @@
 \end_inset
 
 ,
+
 \series default
  
 \series bold
@@ -1663,6 +1785,8 @@
 
 -std-c99
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1684,7 +1808,8 @@
 
 \end_inset
 
-, -
+,
+ -
 \begin_inset ERT
 status collapsed
 
@@ -1699,6 +1824,8 @@
 
 -std-c11
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1739,6 +1866,8 @@
 
 -std-c23
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -1762,7 +1891,9 @@
 
 
 \series default
- command line options is used, e.g.: 
+ command line options is used,
+ e.g.:
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -1790,14 +1921,15 @@
 
 printf ("%d %c
 \backslash
-n", a, (char)a);
+n",
+ a,
+ (char)a);
 \family default
 
 \begin_inset Newline newline
 \end_inset
 
- will push a as an int and as a char resp if none of the above command line
- options are not defined,
+ will push a as an int and as a char resp if none of the above command line options are not defined,
 \begin_inset Newline newline
 \end_inset
 
@@ -1807,10 +1939,13 @@
 \begin_layout Itemize
 pointer type parameters to vararg
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-vararg, va
+vararg,
+ va
 \begin_inset ERT
 status collapsed
 
@@ -1829,7 +1964,8 @@
 \end_inset
 
  functions are casted to generic pointers on Harvard architectures (e.g.
- mcs51, ds390) unless explicitly casted and neither of the 
+ mcs51,
+ ds390) unless explicitly casted and neither of the 
 \series bold
 -
 \begin_inset ERT
@@ -1846,6 +1982,8 @@
 
 -std-c89
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1868,6 +2006,7 @@
 \end_inset
 
 ,
+
 \series default
  
 \series bold
@@ -1886,6 +2025,8 @@
 
 -std-c99
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1907,7 +2048,8 @@
 
 \end_inset
 
-, -
+,
+ -
 \begin_inset ERT
 status collapsed
 
@@ -1922,6 +2064,8 @@
 
 -std-c11
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -1962,6 +2106,8 @@
 
 -std-c23
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -2042,6 +2188,8 @@
 \begin_layout Itemize
 __bit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2077,6 +2225,8 @@
 
  and __sbit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2110,9 +2260,10 @@
 
 \end_inset
 
- types now consistently behave like the C99 _Bool type with respect to type
- conversion
+ types now consistently behave like the C99 _Bool type with respect to type conversion
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2123,6 +2274,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2132,9 +2285,10 @@
 \end_inset
 
 .
- The most common incompatibility resulting from this change is related to
- bit toggling
+ The most common incompatibility resulting from this change is related to bit toggling
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2143,7 +2297,8 @@
 
 \end_inset
 
- idioms, e.g.:
+ idioms,
+ e.g.:
 \begin_inset Newline newline
 \end_inset
 
@@ -2171,6 +2326,8 @@
 
 b = ~
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2179,7 +2336,8 @@
 
 \end_inset
 
-b; /* equivalent to b=1 instead of toggling b */
+b;
+ /* equivalent to b=1 instead of toggling b */
 \begin_inset Newline newline
 \end_inset
 
@@ -2191,17 +2349,20 @@
 \begin_inset space ~
 \end_inset
 
-b = !b; /* toggles b */
+b = !b;
+ /* toggles b */
 \begin_inset Newline newline
 \end_inset
 
 
 \family default
-In previous versions, both forms would have toggled the bit.
+In previous versions,
+ both forms would have toggled the bit.
 \end_layout
 
 \begin_layout Itemize
-in older versions, the preprocessor was always called with 
+in older versions,
+ the preprocessor was always called with 
 \series bold
 -
 \begin_inset ERT
@@ -2218,6 +2379,8 @@
 
 -std-c99
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2259,8 +2422,8 @@
 -std-xxx
 \series default
  setting.
- This is no longer true, and can cause compilation failures on code built
- with 
+ This is no longer true,
+ and can cause compilation failures on code built with 
 \series bold
 -
 \begin_inset ERT
@@ -2277,6 +2440,8 @@
 
 -std-c89
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -2300,23 +2465,21 @@
 
 
 \series default
- but using c99 preprocessor features, such as one-line (//) comments
+ but using c99 preprocessor features,
+ such as one-line (//) comments
 \end_layout
 
 \begin_layout Itemize
-in versions older than 2.8.4 the pic16 *printf() and printf_tiny() library
- functions supported undocumented and not standard compliant 'b' binary
- format specifier ("%b", "%hb" and "%lb").
+in versions older than 2.8.4 the pic16 *printf() and printf_tiny() library functions supported undocumented and not standard compliant 'b' binary format specifier ("%b",
+ "%hb" and "%lb").
  The 'b' specifier is now disabled by default.
- It can be enabled by defining BINARY_SPECIFIER macro in files device/lib/pic16/
-libc/stdio/vfprintf.c and device/lib/pic16/libc/stdio/printf_tiny.c and recompilin
-g the library.
+ It can be enabled by defining BINARY_SPECIFIER macro in files device/lib/pic16/libc/stdio/vfprintf.c and device/lib/pic16/libc/stdio/printf_tiny.c and recompiling the library.
 \end_layout
 
 \begin_layout Itemize
-in versions older then 2.8.5 the unnamed bit-field structure members participated
- in initialization, which is not conforming with ISO/IEC 9899:1999 standard
- (see section Section 6.7.8 Initialization, clause 9)
+in versions older then 2.8.5 the unnamed bit-field structure members participated in initialization,
+ which is not conforming with ISO/IEC 9899:1999 standard (see section Section 6.7.8 Initialization,
+ clause 9)
 \begin_inset Newline newline
 \end_inset
 
@@ -2324,7 +2487,8 @@
 \begin_inset Newline newline
 \end_inset
 
-Old behaviour, before version 2.8.5:
+Old behaviour,
+ before version 2.8.5:
 \family typewriter
 
 \begin_inset Newline newline
@@ -2358,7 +2522,8 @@
 \begin_inset space ~
 \end_inset
 
-int a : 2;
+int a :
+ 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -2382,7 +2547,8 @@
 \begin_inset space ~
 \end_inset
 
- : 2;
+ :
+ 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -2402,7 +2568,8 @@
 \begin_inset space ~
 \end_inset
 
-int b : 2;
+int b :
+ 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -2414,7 +2581,9 @@
 \begin_inset space ~
 \end_inset
 
-} s = {1, 2, 3};
+} s = {1,
+ 2,
+ 3};
 \family default
 
 \begin_inset Newline newline
@@ -2422,7 +2591,8 @@
 
 
 \family typewriter
-/* s.a = 1, s.b = 3 */
+/* s.a = 1,
+ s.b = 3 */
 \family default
 
 \begin_inset Newline newline
@@ -2466,7 +2636,8 @@
 \begin_inset space ~
 \end_inset
 
-int a : 2;
+int a :
+ 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -2490,7 +2661,8 @@
 \begin_inset space ~
 \end_inset
 
- : 2;
+ :
+ 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -2510,7 +2682,8 @@
 \begin_inset space ~
 \end_inset
 
-int b : 2;
+int b :
+ 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -2522,7 +2695,8 @@
 \begin_inset space ~
 \end_inset
 
-} s = {1, 2};
+} s = {1,
+ 2};
 \family default
 
 \begin_inset Newline newline
@@ -2530,15 +2704,18 @@
 
 
 \family typewriter
-/* s.a = 1, s.b = 2 */
+/* s.a = 1,
+ s.b = 2 */
 \end_layout
 
 \begin_layout Itemize
-In 2.9.0 libraries included in SDCC packages, are in ar format.
+In 2.9.0 libraries included in SDCC packages,
+ are in ar format.
  See section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Using-sdar-to"
+nolink "false"
 
 \end_inset
 
@@ -2550,17 +2727,13 @@
 \end_layout
 
 \begin_layout Itemize
-In 3.0.0 sdldgb and sdldz80 don't support generation of Game Boy binary image
- format.
- The makebin utility can be used to convert Intel Hex format to Game Boy
- binary image format.
+In 3.0.0 sdldgb and sdldz80 don't support generation of Game Boy binary image format.
+ The makebin utility can be used to convert Intel Hex format to Game Boy binary image format.
 \end_layout
 
 \begin_layout Itemize
-In 3.0.0 sdldgb and sdldz80 don't support generation of rrgb (Game Boy simulator)
- map file and no$gmb symbol file formats.
- The as2gbmap utility can be used to convert sdld map format to rrgb and
- no$gmb file formats.
+In 3.0.0 sdldgb and sdldz80 don't support generation of rrgb (Game Boy simulator) map file and no$gmb symbol file formats.
+ The as2gbmap utility can be used to convert sdld map format to rrgb and no$gmb file formats.
 \end_layout
 
 \begin_layout Itemize
@@ -2568,7 +2741,8 @@
 \end_layout
 
 \begin_layout Itemize
-In 3.1.0 pic14 target, structured access to SFR via 
+In 3.1.0 pic14 target,
+ structured access to SFR via 
 \family typewriter
 <sfrname>_bits.<bitname>
 \family default
@@ -2582,6 +2756,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Naming-of-special"
+nolink "false"
 
 \end_inset
 
@@ -2589,25 +2764,24 @@
 \end_layout
 
 \begin_layout Itemize
-sdar archive managing utility and sdnm utilities were introduced in version
- 3.2.0.
- sdar, sdranlib and sdnm are derived from GNU Binutils package.
+sdar archive managing utility and sdnm utilities were introduced in version 3.2.0.
+ sdar,
+ sdranlib and sdnm are derived from GNU Binutils package.
 \end_layout
 
 \begin_layout Itemize
 In 3.2.0 the sdcclib utility is deprecated.
  Sdar utility should be used to create SDCC object file archives.
- Sdcclib utility will become obsolete in one of next SDCC releases and will
- be removed from SDCC packages.
+ Sdcclib utility will become obsolete in one of next SDCC releases and will be removed from SDCC packages.
 \end_layout
 
 \begin_layout Itemize
-In 3.2.0 special SDCC keywords which are not preceded by a double underscore
- are obsoleted (removed).
+In 3.2.0 special SDCC keywords which are not preceded by a double underscore are obsoleted (removed).
  See section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Standard-Compliance"
+nolink "false"
 
 \end_inset
 
@@ -2615,8 +2789,7 @@
 \end_layout
 
 \begin_layout Itemize
-In 3.2.0 compiler macro definitions not starting with double underscore characters
- are deprecated if 
+In 3.2.0 compiler macro definitions not starting with double underscore characters are deprecated if 
 \begin_inset Flex Code
 status open
 
@@ -2627,14 +2800,13 @@
 \end_inset
 
  command line option is defined.
- They have been obsoleted (removed) after the 3.4.0 release (except for the
- macro SDCC, which has been removed after the 3.6.0 release (and brought back
- for mcs51 for the 3.7.0 release)).
+ They have been obsoleted (removed) after the 3.4.0 release (except for the macro SDCC,
+ which has been removed after the 3.6.0 release (and brought back for mcs51 for the 3.7.0 release)).
 \end_layout
 
 \begin_layout Itemize
-In 3.2.0 new compiler macros for processor definition were introduced for
- pic14 and pic16 targets: -D__SDCC_PIC16XXXX and -D__SDCC_PIC18FXXX respectively.
+In 3.2.0 new compiler macros for processor definition were introduced for pic14 and pic16 targets:
+ -D__SDCC_PIC16XXXX and -D__SDCC_PIC18FXXX respectively.
  The pic16 macro definition -D__18fXXX is deprecated.
  It was obsoleted (removed) after the 3.4.0 release.
 \end_layout
@@ -2645,6 +2817,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:PIC16_Pragmas"
+nolink "false"
 
 \end_inset
 
@@ -2663,17 +2836,20 @@
 \end_inset
 
 );
+
 \family default
  as an addition to 
 \family typewriter
 __asm ...
  __endasem;
+
 \family default
  format introduced.
  See section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Inline-Assembler-Code"
+nolink "false"
 
 \end_inset
 
@@ -2686,7 +2862,8 @@
 \end_layout
 
 \begin_layout Itemize
-Before 3.4.0 release, intrinsic named address spaces were called 
+Before 3.4.0 release,
+ intrinsic named address spaces were called 
 \begin_inset Quotes sld
 \end_inset
 
@@ -2698,20 +2875,23 @@
 \end_layout
 
 \begin_layout Itemize
-In 3.6.0, the default for char changed from signed to unsigned.
+In 3.6.0,
+ the default for char changed from signed to unsigned.
 \end_layout
 
 \begin_layout Itemize
-In 3.7.0, the prototype for putchar() changed from void putchar(char) to int
- putchar(int).
+In 3.7.0,
+ the prototype for putchar() changed from void putchar(char) to int putchar(int).
 \end_layout
 
 \begin_layout Itemize
-In 3.7.0 mcs51 and ds390 got a full _Bool/bool type, separate from __bit.
+In 3.7.0 mcs51 and ds390 got a full _Bool/bool type,
+ separate from __bit.
 \end_layout
 
 \begin_layout Itemize
-In 3.7.0, the option 
+In 3.7.0,
+ the option 
 \series bold
 -
 \begin_inset ERT
@@ -2732,25 +2912,34 @@
 \end_layout
 
 \begin_layout Itemize
-In 3.7.0, the prototype for getchar() changed from char getchar(void) to int
- getchar(void).
+In 3.7.0,
+ the prototype for getchar() changed from char getchar(void) to int getchar(void).
 \end_layout
 
 \begin_layout Itemize
-In 3.8.6, the deprecated sdcclib was removed.
+In 3.8.6,
+ the deprecated sdcclib was removed.
 \end_layout
 
 \begin_layout Itemize
-In 4.0.3, _itoa, _uitoa, _ltoa, _ultoa were renamed to __itoa, __uitoa, __ltoa,
+In 4.0.3,
+ _itoa,
+ _uitoa,
+ _ltoa,
+ _ultoa were renamed to __itoa,
+ __uitoa,
+ __ltoa,
  __ultoa.
 \end_layout
 
 \begin_layout Itemize
-In 4.1.1, typeof.h has been removed.
+In 4.1.1,
+ typeof.h has been removed.
 \end_layout
 
 \begin_layout Itemize
-In 4.1.3, support for 
+In 4.1.3,
+ support for 
 \series bold
 -
 \begin_inset ERT
@@ -2771,12 +2960,13 @@
 \end_layout
 
 \begin_layout Itemize
-In 4.1.10, the default calling convention switched from __sdccall(0) to __sdccall(
-1) for stm8 and gbz80.
+In 4.1.10,
+ the default calling convention switched from __sdccall(0) to __sdccall(1) for stm8 and gbz80.
 \end_layout
 
 \begin_layout Itemize
-In 4.1.10, support for
+In 4.1.10,
+ support for
 \series bold
  -
 \begin_inset ERT
@@ -2797,17 +2987,19 @@
 \end_layout
 
 \begin_layout Itemize
-In 4.1.11, the minimum Z80N Core version for the z80n port has been raised
- from 1.0 to 2.0.
+In 4.1.11,
+ the minimum Z80N Core version for the z80n port has been raised from 1.0 to 2.0.
 \end_layout
 
 \begin_layout Itemize
-In 4.1.12, the default calling convention switched from __sdccall(0) to __sdccall(
-1) for z80, z180 and z80n.
+In 4.1.12,
+ the default calling convention switched from __sdccall(0) to __sdccall(1) for z80,
+ z180 and z80n.
 \end_layout
 
 \begin_layout Itemize
-In 4.1.12, support for 
+In 4.1.12,
+ support for 
 \series bold
 -
 \begin_inset ERT
@@ -2824,11 +3016,14 @@
 
 -profile
 \series default
- has been removed for z80, z180, z80n.
+ has been removed for z80,
+ z180,
+ z80n.
 \end_layout
 
 \begin_layout Itemize
-In 4.1.13, support for 
+In 4.1.13,
+ support for 
 \series bold
 -
 \begin_inset ERT
@@ -2849,30 +3044,33 @@
 \end_layout
 
 \begin_layout Itemize
-In 4.1.14, the gbz80 port was renamed to sm83.
+In 4.1.14,
+ the gbz80 port was renamed to sm83.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.3, support for non-parenthesized arguments to __using and __interrupt
- was dropped.
+In 4.2.3,
+ support for non-parenthesized arguments to __using and __interrupt was dropped.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.3, support for non-parenthesized arguments to __at that are not constants
- was dropped.
+In 4.2.3,
+ support for non-parenthesized arguments to __at that are not constants was dropped.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.4, the placement of __at in declarations was restricted.
+In 4.2.4,
+ the placement of __at in declarations was restricted.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.6, bool is chosen as the underlying integer type for enumerations with
- just two values.
+In 4.2.6,
+ bool is chosen as the underlying integer type for enumerations with just two values.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.9, support for
+In 4.2.9,
+ support for
 \series bold
 -
 \begin_inset ERT
@@ -2893,8 +3091,9 @@
 \end_layout
 
 \begin_layout Itemize
-In 4.2.9, support for #pragma sdcc_hash was dropped, necessitating a wrapper
- macro for literal 
+In 4.2.9,
+ support for #pragma sdcc_hash was dropped,
+ necessitating a wrapper macro for literal 
 \begin_inset Quotes sld
 \end_inset
 
@@ -2906,33 +3105,39 @@
 \end_layout
 
 \begin_layout Itemize
-In 4.2.9, support for arguments to -MMD was dropped.
+In 4.2.9,
+ support for arguments to -MMD was dropped.
  The output file can be specified via -MF instead.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.10, _sdcc_external_startup was renamed to __sdcc_external_startup and
- support for it was added to further ports.
+In 4.2.10,
+ _sdcc_external_startup was renamed to __sdcc_external_startup and support for it was added to further ports.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.13, for the sm83 port, __sfr addresses need to be specified using the
- full 16-bit address.
+In 4.2.13,
+ for the sm83 port,
+ __sfr addresses need to be specified using the full 16-bit address.
 \end_layout
 
 \begin_layout Itemize
-In 4.2.14, byte order in output from the %p specifier of printf()-family functions
- was corrected for big-endian platforms (stm8, hc08, s08, mos6502) to match
- uintptr_t.
+In 4.2.14,
+ byte order in output from the %p specifier of printf()-family functions was corrected for big-endian platforms (stm8,
+ hc08,
+ s08,
+ mos6502) to match uintptr_t.
 \end_layout
 
 \begin_layout Itemize
-In 4.3.1, __builtin_rlc, __builtin_rrc and __builtin_swap were replaced by
- __builtin_rot.
+In 4.3.1,
+ __builtin_rlc,
+ __builtin_rrc and __builtin_swap were replaced by __builtin_rot.
 \end_layout
 
 \begin_layout Itemize
-In 4.3.6, support for 
+In 4.3.6,
+ support for 
 \series bold
 -
 \begin_inset ERT
@@ -2952,17 +3157,21 @@
  was removed from the mcs51 port.
 \end_layout
 
+\begin_layout Itemize
+In 4.4.1,
+ the address width in .rel files was increased from 24 bits to 32 bits for the z80 (and related) ports.
+\end_layout
+
 \begin_layout Section
 System Requirements
 \end_layout
 
 \begin_layout Standard
-What do you need before you start installation of SDCC? A computer, and
- a desire to compute.
- The preferred method of installation is to compile SDCC from source using
- GNU GCC and make.
- For Windows some pre-compiled binary distributions are available for your
- convenience.
+What do you need before you start installation of SDCC?
+ A computer,
+ and a desire to compute.
+ The preferred method of installation is to compile SDCC from source using GNU GCC and make.
+ For Windows some pre-compiled binary distributions are available for your convenience.
  You should have some experience with command line tools and compiler use.
 \end_layout
 
@@ -2983,12 +3192,10 @@
 \end_inset
 
  is a great place to find distribution sets.
- You can also find links to the user mailing lists that offer help or discuss
- SDCC with other SDCC users.
+ You can also find links to the user mailing lists that offer help or discuss SDCC with other SDCC users.
  Web links to other SDCC related sites can also be found here.
  This document can be found in the doc directory of the source package.
- The latest snapshot build version of this document in pdf format is available
- at 
+ The latest snapshot build version of this document in pdf format is available at 
 \begin_inset Flex URL
 status collapsed
 
@@ -3000,10 +3207,9 @@
 \end_inset
 
 .
- Some of the other tools (simulator and assembler) included with SDCC contain
- their own documentation and can be found in the source distribution.
- If you want the latest unreleased software, the complete source package
- is available directly from Subversion on 
+ Some of the other tools (simulator and assembler) included with SDCC contain their own documentation and can be found in the source distribution.
+ If you want the latest unreleased software,
+ the complete source package is available directly from Subversion on 
 \begin_inset Flex URL
 status collapsed
 
@@ -3020,6 +3226,8 @@
 \begin_layout Chapter
 Installing SDCC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -3036,6 +3244,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Building-SDCC-on-Linux"
+nolink "false"
 
 \end_inset
 
@@ -3043,6 +3252,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Windows-Install"
+nolink "false"
 
 \end_inset
 
@@ -3053,6 +3263,8 @@
 \begin_layout Section
 Configure Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -3065,8 +3277,8 @@
 \end_layout
 
 \begin_layout Standard
-The install paths, search paths and other options are defined when running
- 'configure'.
+The install paths,
+ search paths and other options are defined when running 'configure'.
  The defaults can be overridden by:
 \end_layout
 
@@ -3173,7 +3385,8 @@
 \begin_inset space ~
 \end_inset
 
-docdir environment variable, see table below
+docdir environment variable,
+ see table below
 \end_layout
 
 \begin_layout Labeling
@@ -3185,7 +3398,8 @@
 \begin_inset space ~
 \end_inset
 
-include_dir_suffix environment variable, see table below
+include_dir_suffix environment variable,
+ see table below
 \end_layout
 
 \begin_layout Labeling
@@ -3197,7 +3411,8 @@
 \begin_inset space ~
 \end_inset
 
-non_free_include_dir_suffix environment variable, see table below
+non_free_include_dir_suffix environment variable,
+ see table below
 \end_layout
 
 \begin_layout Labeling
@@ -3209,7 +3424,8 @@
 \begin_inset space ~
 \end_inset
 
-lib_dir_suffix environment variable, see table below
+lib_dir_suffix environment variable,
+ see table below
 \end_layout
 
 \begin_layout Labeling
@@ -3225,7 +3441,8 @@
 \begin_inset space ~
 \end_inset
 
-non_free_lib_dir_suffix environment variable, see table below
+non_free_lib_dir_suffix environment variable,
+ see table below
 \end_layout
 
 \begin_layout Labeling
@@ -3237,12 +3454,14 @@
 \begin_inset space ~
 \end_inset
 
-sdccconf_h_dir_separator environment variable, either / or 
+sdccconf_h_dir_separator environment variable,
+ either / or 
 \backslash
 
 \backslash
  makes sense here.
- This character will only be used in sdccconf.h; don't forget it's a C-header,
+ This character will only be used in sdccconf.h;
+ don't forget it's a C-header,
  therefore a double-backslash is needed there.
 \begin_inset Newline newline
 \end_inset
@@ -3733,7 +3952,8 @@
 
 \end_inset
 
--enable-doc Build pdf, html and txt files from the lyx sources
+-enable-doc Build pdf,
+ html and txt files from the lyx sources
 \end_layout
 
 \begin_layout Labeling
@@ -3774,7 +3994,9 @@
 \end_layout
 
 \begin_layout Standard
-Furthermore the environment variables CC, CFLAGS, ...
+Furthermore the environment variables CC,
+ CFLAGS,
+ ...
  the tools and their arguments can be influenced.
  Please see `configure -
 \begin_inset ERT
@@ -3797,11 +4019,15 @@
 \begin_inset Newline newline
 \end_inset
 
-The names of the standard libraries STD_LIB, STD_INT_LIB, STD_LONG_LIB,
- STD_FP_LIB, STD_DS390_LIB, STD_XA51_LIB and the environment variables SDCC_DIR_
-NAME, SDCC_INCLUDE_NAME, SDCC_LIB_NAME are defined by `configure' too.
- At the moment it's not possible to change the default settings (it was
- simply never required).
+The names of the standard libraries STD_LIB,
+ STD_INT_LIB,
+ STD_LONG_LIB,
+ STD_FP_LIB,
+ STD_DS390_LIB,
+ STD_XA51_LIB and the environment variables SDCC_DIR_NAME,
+ SDCC_INCLUDE_NAME,
+ SDCC_LIB_NAME are defined by `configure' too.
+ At the moment it's not possible to change the default settings (it was simply never required).
 \begin_inset Newline newline
 \end_inset
 
@@ -3809,14 +4035,13 @@
 \begin_inset Newline newline
 \end_inset
 
-These configure options are compiled into the binaries, and can only be
- changed by rerunning 'configure' and recompiling SDCC.
+These configure options are compiled into the binaries,
+ and can only be changed by rerunning 'configure' and recompiling SDCC.
  The configure options are written in 
 \emph on
 italics
 \emph default
- to distinguish them from run time environment variables (see section search
- paths).
+ to distinguish them from run time environment variables (see section search paths).
 \begin_inset Newline newline
 \end_inset
 
@@ -3833,12 +4058,13 @@
 \end_inset
 
  are used by the SDCC team to build the official Win32 binaries.
- The SDCC team uses Mingw32 to build the official Windows binaries, because
- it's
+ The SDCC team uses Mingw32 to build the official Windows binaries,
+ because it's
 \end_layout
 
 \begin_layout Enumerate
-open source, 
+open source,
+ 
 \end_layout
 
 \begin_layout Enumerate
@@ -3846,15 +4072,14 @@
 \end_layout
 
 \begin_layout Enumerate
-the binaries can be built by cross compiling on SDCC Distributed Compile
- Farm.
+the binaries can be built by cross compiling on SDCC Distributed Compile Farm.
 \end_layout
 
 \begin_layout Standard
-See the examples, how to pass the Win32 settings to 'configure'.
- The other Win32 builds using VC or whatever don't use 'configure', but
- a header file sdcc_vc.h.in is the same as sdccconf.h built by 'configure'
- for Win32.
+See the examples,
+ how to pass the Win32 settings to 'configure'.
+ The other Win32 builds using VC or whatever don't use 'configure',
+ but a header file sdcc_vc.h.in is the same as sdccconf.h built by 'configure' for Win32.
 \begin_inset Newline newline
 \end_inset
 
@@ -4270,8 +4495,7 @@
 \begin_layout Standard
 \noindent
 'configure' also computes relative paths.
- This is needed for full relocatability of a binary package and to complete
- search paths (see section search paths below):
+ This is needed for full relocatability of a binary package and to complete search paths (see section search paths below):
 \begin_inset Newline newline
 \end_inset
 
@@ -4509,8 +4733,7 @@
 \end_layout
 
 \begin_layout Standard
-To cross compile on linux for Mingw32 (see also 'sdcc/support/scripts/sdcc_mingw
-32'):
+To cross compile on linux for Mingw32 (see also 'sdcc/support/scripts/sdcc_mingw32'):
 \end_layout
 
 \begin_layout LyX-Code
@@ -4781,8 +5004,7 @@
 \begin_inset Quotes srd
 \end_inset
 
-compile on Cygwin for Mingw32 (see also sdcc/support/scripts/sdcc_cygwin_mingw32
-):
+compile on Cygwin for Mingw32 (see also sdcc/support/scripts/sdcc_cygwin_mingw32):
 \end_layout
 
 \begin_layout LyX-Code
@@ -4980,9 +5202,10 @@
 
 \end_inset
 
--C' turns on caching, which gives a little bit extra speed.
- However if options are changed, it can be necessary to delete the config.cache
- file.
+-C' turns on caching,
+ which gives a little bit extra speed.
+ However if options are changed,
+ it can be necessary to delete the config.cache file.
 \end_layout
 
 \begin_layout Section
@@ -4995,6 +5218,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -5391,7 +5616,10 @@
 \begin_layout Verse
 
 \size footnotesize
-*compiler, preprocessor, assembler, and linker
+*compiler,
+ preprocessor,
+ assembler,
+ and linker
 \begin_inset Newline newline
 \end_inset
 
@@ -5399,8 +5627,12 @@
 \shape italic
 model
 \shape default
- is auto-appended by the compiler, e.g.
- small, large, z80, ds390 etc
+ is auto-appended by the compiler,
+ e.g.
+ small,
+ large,
+ z80,
+ ds390 etc
 \end_layout
 
 \begin_layout Standard
@@ -5423,6 +5655,8 @@
 
 Moreover the install path can be changed by defining DESTDIR
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -5452,6 +5686,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -5464,19 +5700,18 @@
 \end_layout
 
 \begin_layout Standard
-Some search paths or parts of them are determined by configure variables
- (in 
+Some search paths or parts of them are determined by configure variables (in 
 \emph on
 italics
 \emph default
-, see section above).
+,
+ see section above).
  Further search paths are determined by environment variables during runtime.
  
 \begin_inset Newline newline
 \end_inset
 
-The paths searched when running the compiler are as follows (the first catch
- wins):
+The paths searched when running the compiler are as follows (the first catch wins):
 \begin_inset Newline newline
 \end_inset
 
@@ -5485,7 +5720,8 @@
 \end_inset
 
 1.
- Binary files (preprocessor, assembler and linker)
+ Binary files (preprocessor,
+ assembler and linker)
 \begin_inset Newline newline
 \end_inset
 
@@ -6248,7 +6484,10 @@
 model
 \shape default
  is auto-appended by the compiler (e.g.
- small, large, z80, ds390 etc.).
+ small,
+ large,
+ z80,
+ ds390 etc.).
 \begin_inset Newline newline
 \end_inset
 
@@ -6941,8 +7180,7 @@
 status collapsed
 
 \begin_layout Plain Layout
-Don't delete any of the stray spaces in the table above without checking
- the HTML output (last line)!
+Don't delete any of the stray spaces in the table above without checking the HTML output (last line)!
 \end_layout
 
 \end_inset
@@ -6977,6 +7215,8 @@
 \begin_layout Section
 Building SDCC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -6989,14 +7229,12 @@
 \end_layout
 
 \begin_layout Standard
-SDCC can be built for various host platforms using the instructions provided
- below.
- Note that the PIC14 and PIC16 library folders in the source distribution
- contain Autotools-generated files.
- These are included for convenience and to avoid introducing Autotools as
- an additional dependency.
+SDCC can be built for various host platforms using the instructions provided below.
+ Note that the PIC14 and PIC16 library folders in the source distribution contain Autotools-generated files.
+ These are included for convenience and to avoid introducing Autotools as an additional dependency.
  They have to be regenerated in case of a version mismatch.
- Alternatively, the PIC backends can be disabled.
+ Alternatively,
+ the PIC backends can be disabled.
 \end_layout
 
 \begin_layout Subsection
@@ -7017,7 +7255,8 @@
 \series default
  either from the SDCC Subversion repository or from snapshot builds
 \series medium
-, it will be named something like sdcc
+,
+ it will be named something like sdcc
 \series default
 -src
 \series medium
@@ -7044,13 +7283,15 @@
 \begin_layout Enumerate
 
 \series medium
-Bring up a command line terminal, such as xterm.
+Bring up a command line terminal,
+ such as xterm.
 \end_layout
 
 \begin_layout Enumerate
 
 \series medium
 Unpack the file using a command like:
+
 \series default
  
 \family sans
@@ -7062,11 +7303,14 @@
 
 \family default
 \series medium
-, this will create a sub-directory called sdcc with all of the sources.
+,
+ this will create a sub-directory called sdcc with all of the sources.
 \end_layout
 
 \begin_layout Enumerate
-Change directory into the main SDCC directory, for example type: 
+Change directory into the main SDCC directory,
+ for example type:
+ 
 \family sans
 \series bold
 "cd sdcc
@@ -7087,10 +7331,10 @@
 \series default
 ".
  This configures the package for compilation on your system.
- When the treedec library is available, it should be found and used automaticall
-y (improving the compilation time / code quality trade-off).
- As of SDCC 3.7.0, the current develop branch from https://github.com/freetdi/tdlib
- is a suitable version of treedec.
+ When the treedec library is available,
+ it should be found and used automatically (improving the compilation time / code quality trade-off).
+ As of SDCC 3.7.0,
+ the current develop branch from https://github.com/freetdi/tdlib is a suitable version of treedec.
 \end_layout
 
 \begin_layout Enumerate
@@ -7109,7 +7353,8 @@
 .
 
 \series default
- All of the source packages will compile, this can take a while.
+ All of the source packages will compile,
+ this can take a while.
 \end_layout
 
 \begin_layout Enumerate
@@ -7128,12 +7373,14 @@
 .
 
 \series default
- This copies the binary executables, the include files, the libraries and
- the documentation to the install directories.
+ This copies the binary executables,
+ the include files,
+ the libraries and the documentation to the install directories.
  Proceed with section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Testing-the-SDCC"
+nolink "false"
 
 \end_inset
 
@@ -7153,9 +7400,10 @@
 \begin_inset Newline newline
 \end_inset
 
-On Mac OS X 10.2.x it was reported, that the default gcc (version 3.1 20020420
- (prerelease)) fails to compile SDCC.
- Fortunately there's also gcc 2.9.x installed, which works fine.
+On Mac OS X 10.2.x it was reported,
+ that the default gcc (version 3.1 20020420 (prerelease)) fails to compile SDCC.
+ Fortunately there's also gcc 2.9.x installed,
+ which works fine.
  This compiler can be selected by running 'configure' with:
 \end_layout
 
@@ -7164,8 +7412,7 @@
 \end_layout
 
 \begin_layout Standard
-Universal (ppc and i386) binaries can be produced on Mac OS X 10.4.x with
- Xcode.
+Universal (ppc and i386) binaries can be produced on Mac OS X 10.4.x with Xcode.
  Run 'configure' with:
 \end_layout
 
@@ -7176,15 +7423,13 @@
 \end_layout
 
 \begin_layout LyX-Code
-LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch
- ppc" 
+LDFLAGS="-Wl,-syslibroot,/Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc" 
 \backslash
 
 \end_layout
 
 \begin_layout LyX-Code
-CXXFLAGS = "-O2 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch
- ppc" 
+CXXFLAGS = "-O2 -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch i386 -arch ppc" 
 \backslash
 
 \end_layout
@@ -7200,9 +7445,11 @@
 \begin_layout Standard
 With the MinGW gcc cross compiler SDCC can be cross-compiled for Win32.
  See section 'Configure Options'.
- SDCC requires boost, but the header-only parts should be sufficient: Get
- a current boost tarball from www.boost.org, unpack it, and choose suitable
- configure options so the headers are found by the C++ compiler.
+ SDCC requires boost,
+ but the header-only parts should be sufficient:
+ Get a current boost tarball from www.boost.org,
+ unpack it,
+ and choose suitable configure options so the headers are found by the C++ compiler.
 \end_layout
 
 \begin_layout Subsection
@@ -7210,8 +7457,7 @@
 \end_layout
 
 \begin_layout Standard
-For building and installing a Cygwin executable follow the instructions
- for Linux.
+For building and installing a Cygwin executable follow the instructions for Linux.
 \begin_inset Newline newline
 \end_inset
 
@@ -7227,9 +7473,9 @@
 \begin_inset Quotes srd
 \end_inset
 
- Win32-binary can be built, which will not need the Cygwin-DLL.
- For the necessary 'configure' options see section 'configure options' or
- the script 'sdcc/support/scripts/sdcc_cygwin_mingw32'.
+ Win32-binary can be built,
+ which will not need the Cygwin-DLL.
+ For the necessary 'configure' options see section 'configure options' or the script 'sdcc/support/scripts/sdcc_cygwin_mingw32'.
 \begin_inset Newline newline
 \end_inset
 
@@ -7237,8 +7483,7 @@
 \begin_inset Newline newline
 \end_inset
 
-In order to install Cygwin on Windows download setup.exe from www.cygwin.com
- 
+In order to install Cygwin on Windows download setup.exe from www.cygwin.com 
 \begin_inset Flex URL
 status collapsed
 
@@ -7250,7 +7495,8 @@
 \end_inset
 
 .
- Run it, set the 
+ Run it,
+ set the 
 \begin_inset Quotes sld
 \end_inset
 
@@ -7267,8 +7513,8 @@
 \end_inset
 
  and download/install at least the following packages.
- Some packages are selected by default, others will be automatically selected
- because of dependencies with the manually selected packages.
+ Some packages are selected by default,
+ others will be automatically selected because of dependencies with the manually selected packages.
  Never deselect these packages!
 \end_layout
 
@@ -7281,11 +7527,14 @@
 \end_layout
 
 \begin_layout Itemize
-gcc ; version 3.x is fine, no need to use the old 2.9x
+gcc ;
+ version 3.x is fine,
+ no need to use the old 2.9x
 \end_layout
 
 \begin_layout Itemize
-binutils ; selected with gcc
+binutils ;
+ selected with gcc
 \end_layout
 
 \begin_layout Itemize
@@ -7297,21 +7546,26 @@
 \end_layout
 
 \begin_layout Itemize
-rxvt ; a nice console, which makes life much easier under windoze (see below)
+rxvt ;
+ a nice console,
+ which makes life much easier under windoze (see below)
 \end_layout
 
 \begin_layout Itemize
-man ; not really needed for building SDCC, but you'll miss it sooner or
- later
+man ;
+ not really needed for building SDCC,
+ but you'll miss it sooner or later
 \end_layout
 
 \begin_layout Itemize
-less ; not really needed for building SDCC, but you'll miss it sooner or
- later
+less ;
+ not really needed for building SDCC,
+ but you'll miss it sooner or later
 \end_layout
 
 \begin_layout Itemize
-svn ; only if you use Subversion access
+svn ;
+ only if you use Subversion access
 \end_layout
 
 \begin_layout Standard
@@ -7319,11 +7573,14 @@
 \end_layout
 
 \begin_layout Itemize
-python ; for the regression tests
+python ;
+ for the regression tests
 \end_layout
 
 \begin_layout Itemize
-gdb ; the gnu debugger, together with the nice GUI 
+gdb ;
+ the gnu debugger,
+ together with the nice GUI 
 \begin_inset Quotes sld
 \end_inset
 
@@ -7335,12 +7592,14 @@
 \end_layout
 
 \begin_layout Itemize
-openssh ; to access the CF or commit changes
+openssh ;
+ to access the CF or commit changes
 \end_layout
 
 \begin_layout Itemize
-autoconf and autoconf-devel ; if you want to fight with 'configure', don't
- use autoconf-stable!
+autoconf and autoconf-devel ;
+ if you want to fight with 'configure',
+ don't use autoconf-stable!
 \end_layout
 
 \begin_layout Standard
@@ -7391,8 +7650,8 @@
 \end_layout
 
 \begin_layout Standard
-Text selected with the mouse is automatically copied to the clipboard, pasting
- works with shift-insert.
+Text selected with the mouse is automatically copied to the clipboard,
+ pasting works with shift-insert.
 \begin_inset Newline newline
 \end_inset
 
@@ -7411,7 +7670,8 @@
 \begin_inset Quotes srd
 \end_inset
 
- is too long, you can change it with e.g.
+ is too long,
+ you can change it with e.g.
 \end_layout
 
 \begin_layout LyX-Code
@@ -7420,12 +7680,14 @@
 
 \begin_layout Standard
 SDCC sources use the unix line ending LF.
- Life is much easier, if you store the source tree on a drive which is mounted
- in binary mode.
+ Life is much easier,
+ if you store the source tree on a drive which is mounted in binary mode.
  And use an editor which can handle LF-only line endings.
  Make sure not to commit files with windows line endings.
  The tabulator spacing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -7435,9 +7697,7 @@
 \end_inset
 
  used in the project is 8.
- Although a tabulator spacing of 8 is a sensible choice for programmers
- (it's a power of 2 and allows to display 8/16 bit signed variables without
- loosing columns) the plan is to move towards using only spaces in the source.
+ Although a tabulator spacing of 8 is a sensible choice for programmers (it's a power of 2 and allows to display 8/16 bit signed variables without loosing columns) the plan is to move towards using only spaces in the source.
 \end_layout
 
 \begin_layout Subsection
@@ -7449,8 +7709,7 @@
 \series medium
 Download the source package
 \series default
- either from the SDCC Subversion repository or from the snapshot builds
- 
+ either from the SDCC Subversion repository or from the snapshot builds 
 \begin_inset Flex URL
 status collapsed
 
@@ -7463,18 +7722,19 @@
 
 
 \series medium
-, it will be named something like sdcc
+,
+ it will be named something like sdcc
 \series default
 -src
 \series medium
 -yyyymmdd-rrrr.tar.bz2.
 
 \series default
- SDCC is distributed with all the project, solution and other files you
- need to build it using Visual C++ 2010 (except for ucSim).
+ SDCC is distributed with all the project,
+ solution and other files you need to build it using Visual C++ 2010 (except for ucSim).
  The solution name is 'sdcc.sln'.
- Please note that as it is now, all the executables are created in a folder
- called sdcc
+ Please note that as it is now,
+ all the executables are created in a folder called sdcc
 \backslash
 bin_vc.
  Once built you need to copy the executables from sdcc
@@ -7490,8 +7750,7 @@
 \begin_inset Newline newline
 \end_inset
 
-Apart from the SDCC sources you also need to have the BOOST libraries installed
- for MSVC.
+Apart from the SDCC sources you also need to have the BOOST libraries installed for MSVC.
  Get it here 
 \begin_inset Flex URL
 status collapsed
@@ -7512,7 +7771,8 @@
 \end_inset
 
 In order to build SDCC with MSVC you need win32 executables of bison.exe,
- flex.exe, and gawk.exe.
+ flex.exe,
+ and gawk.exe.
  One good place to get them is here 
 \begin_inset Flex URL
 status collapsed
@@ -7532,8 +7792,11 @@
 \begin_inset Newline newline
 \end_inset
 
-If UnxUtils didn't work well, 
+If UnxUtils didn't work well,
+ 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -7555,6 +7818,8 @@
 
 ) or msys2
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -7584,6 +7849,8 @@
 
 Download the file UnxUtils
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -7593,8 +7860,7 @@
 \end_inset
 
 .zip.
- Now you have to install the utilities and setup MSVC so it can locate the
- required programs.
+ Now you have to install the utilities and setup MSVC so it can locate the required programs.
  Here there are two alternatives (choose one!):
 \end_layout
 
@@ -7609,7 +7875,8 @@
 
 a) Extract UnxUtils.zip to your C:
 \backslash
- hard disk PRESERVING the original paths, otherwise bison won't work.
+ hard disk PRESERVING the original paths,
+ otherwise bison won't work.
  (If you are using WinZip make certain that 'Use folder names' is selected)
 \begin_inset Newline newline
 \end_inset
@@ -7632,7 +7899,8 @@
 \begin_inset Newline newline
 \end_inset
 
-(As a side effect, you get a bunch of Unix utilities that could be useful,
+(As a side effect,
+ you get a bunch of Unix utilities that could be useful,
  such as diff and patch.)
 \end_layout
 
@@ -7645,8 +7913,8 @@
 \begin_inset Newline newline
 \end_inset
 
-This one avoids extracting a bunch of files you may not use, but requires
- some extra work:
+This one avoids extracting a bunch of files you may not use,
+ but requires some extra work:
 \begin_inset Newline newline
 \end_inset
 
@@ -7654,8 +7922,8 @@
 \begin_inset Newline newline
 \end_inset
 
-a) Create a directory were to put the tools needed, or use a directory already
- present.
+a) Create a directory were to put the tools needed,
+ or use a directory already present.
  Say for example 'C:
 \backslash
 util'.
@@ -7666,8 +7934,11 @@
 \begin_inset Newline newline
 \end_inset
 
-b) Extract 'bison.exe', 'bison.hairy', 'bison.simple', 'flex.exe', and gawk.exe
- to such directory WITHOUT preserving the original paths.
+b) Extract 'bison.exe',
+ 'bison.hairy',
+ 'bison.simple',
+ 'flex.exe',
+ and gawk.exe to such directory WITHOUT preserving the original paths.
  (If you are using WinZip make certain that 'Use folder names' is not selected)
 \begin_inset Newline newline
 \end_inset
@@ -7740,11 +8011,9 @@
 \begin_inset Newline newline
 \end_inset
 
-Steps 'c' and 'd' are needed because bison requires by default that the
- files 'bison.simple' and 'bison.hairy' reside in some weird Unix directory,
+Steps 'c' and 'd' are needed because bison requires by default that the files 'bison.simple' and 'bison.hairy' reside in some weird Unix directory,
  '/usr/local/share/' I think.
- So it is necessary to tell bison where those files are located if they
- are not in such directory.
+ So it is necessary to tell bison where those files are located if they are not in such directory.
  That is the function of the environment variables BISON_SIMPLE and BISON_HAIRY.
 \begin_inset Newline newline
 \end_inset
@@ -7758,7 +8027,10 @@
 util' to VC++ Directories / Executable Directories.
  Note that you can use any other path instead of 'C:
 \backslash
-util', even the path where the Visual C++ tools are, probably: 'C:
+util',
+ even the path where the Visual C++ tools are,
+ probably:
+ 'C:
 \backslash
 Program Files
 \backslash
@@ -7772,12 +8044,14 @@
 
 \begin_layout Standard
 That is it.
- Open 'sdcc.sln' in Visual Studio, click 'build all', when it finishes copy
- the executables from sdcc
+ Open 'sdcc.sln' in Visual Studio,
+ click 'build all',
+ when it finishes copy the executables from sdcc
 \backslash
 bin_vc to sdcc
 \backslash
-bin, and you can compile using SDCC.
+bin,
+ and you can compile using SDCC.
 \end_layout
 
 \begin_layout Subsection
@@ -7796,14 +8070,17 @@
 
 \end_inset
 
- and unpack it using your favorite unpacking tool (gunzip, WinZip, etc).
+ and unpack it using your favorite unpacking tool (gunzip,
+ WinZip,
+ etc).
  This should unpack to a group of sub-directories.
  An example directory structure after unpacking the mingw32 package is:
  C:
 \backslash
 sdcc
 \backslash
-bin for the executables, C:
+bin for the executables,
+ C:
 \backslash
 sdcc
 \backslash
@@ -7815,8 +8092,7 @@
 \end_layout
 
 \begin_layout Enumerate
-Adjust your environment variable PATH to include the location of the bin
- directory or start sdcc using the full path.
+Adjust your environment variable PATH to include the location of the bin directory or start sdcc using the full path.
 \end_layout
 
 \begin_layout Subsection
@@ -7872,6 +8148,8 @@
 \begin_layout Subsection
 VPATH
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8263,30 +8541,33 @@
 
 \begin_layout Standard
 \noindent
-That's it! 
+That's it!
+ 
 \series bold
 configure
 \series default
  will create the directory tree will all the necessary Makefiles in ~/sdcc.build.
- It automagically computes the variables srcdir, top_srcdir and top_buildir
- for each directory.
+ It automagically computes the variables srcdir,
+ top_srcdir and top_buildir for each directory.
  After running 
 \series bold
 make
 \series default
- the generated files will be in ~/sdcc.build, while the source files stay
- in ~/sdcc.
+ the generated files will be in ~/sdcc.build,
+ while the source files stay in ~/sdcc.
 \begin_inset Newline newline
 \end_inset
 
-This is not only usefull for building different binaries, e.g.
+This is not only usefull for building different binaries,
+ e.g.
  when cross compiling.
- It also gives you a much better overview in the source tree when all the
- generated files are not scattered between the source files.
- And the best thing is: if you want to change a file you can leave the original
- file untouched in the source directory.
- Simply copy it to the build directory, edit it, enter `make clean', `rm
- Makefile.dep' and `make'.
+ It also gives you a much better overview in the source tree when all the generated files are not scattered between the source files.
+ And the best thing is:
+ if you want to change a file you can leave the original file untouched in the source directory.
+ Simply copy it to the build directory,
+ edit it,
+ enter `make clean',
+ `rm Makefile.dep' and `make'.
  
 \series bold
 make
@@ -8312,13 +8593,16 @@
 
 \end_inset
 
--enable-doc to the configure arguments to build the documentation together
- with all the other stuff.
+-enable-doc to the configure arguments to build the documentation together with all the other stuff.
  You will need several tools (\SpecialChar LyX
-, \SpecialChar LaTeX
-, \SpecialChar LaTeX
-2HTML, pdflatex, dvipdf, dvips and makeindex)
- to get the job done.
+,
+ \SpecialChar LaTeX
+,
+ \SpecialChar LaTeX
+2HTML,
+ pdflatex,
+ dvipdf,
+ dvips and makeindex) to get the job done.
  Another possibility is to change to the doc directory and to type 
 \family sans
 \series bold
@@ -8334,8 +8618,7 @@
 \family default
 \series default
  there.
- You're invited to make changes and additions to this manual (sdcc/doc/sdccman.ly
-x).
+ You're invited to make changes and additions to this manual (sdcc/doc/sdccman.lyx).
  Using \SpecialChar LyX
  
 \begin_inset Flex URL
@@ -8366,6 +8649,8 @@
 \begin_layout Section
 Reading the Documentation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8378,9 +8663,8 @@
 \end_layout
 
 \begin_layout Standard
-Currently reading the document in PDF format is recommended, as for unknown
- reason the hyperlinks are working there whereas in the HTML version they
- are not
+Currently reading the document in PDF format is recommended,
+ as for unknown reason the hyperlinks are working there whereas in the HTML version they are not
 \begin_inset Foot
 status collapsed
 
@@ -8396,6 +8680,8 @@
 
 You'll find the PDF version
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8424,10 +8710,11 @@
 \end_layout
 
 \begin_layout Itemize
-It tries to document SDCC for several processor architectures in one document
- (commercially these probably would be separate documents/products).
+It tries to document SDCC for several processor architectures in one document (commercially these probably would be separate documents/products).
  This document
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8436,9 +8723,10 @@
 
 \end_inset
 
- currently matches SDCC for mcs51 and DS390 best and does give too few informati
-on about f.e.
- Z80, PIC14, PIC16 and HC08.
+ currently matches SDCC for mcs51 and DS390 best and does give too few information about f.e.
+ Z80,
+ PIC14,
+ PIC16 and HC08.
 \end_layout
 
 \begin_layout Itemize
@@ -8478,6 +8766,8 @@
 \emph default
 rray
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8503,6 +8793,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8515,8 +8807,7 @@
 \begin_inset Quotes sld
 \end_inset
 
-have you ever heard of an open source compiler that compiles a subset of
- C for an FPGA?
+have you ever heard of an open source compiler that compiles a subset of C for an FPGA?
 \begin_inset Quotes srd
 \end_inset
 
@@ -8525,8 +8816,8 @@
 \end_layout
 
 \begin_layout Itemize
-Some sections attribute more space to problems, restrictions and warnings
- than to the solution.
+Some sections attribute more space to problems,
+ restrictions and warnings than to the solution.
 \end_layout
 
 \begin_layout Itemize
@@ -8534,8 +8825,7 @@
 \end_layout
 
 \begin_layout Itemize
-There are still lots of typos and there are more different writing styles
- than pictures.
+There are still lots of typos and there are more different writing styles than pictures.
 \end_layout
 
 \begin_layout Section
@@ -8550,8 +8840,7 @@
 \end_layout
 
 \begin_layout Standard
-The first thing you should do after installing your SDCC compiler is to
- see if it runs.
+The first thing you should do after installing your SDCC compiler is to see if it runs.
  Type 
 \family sans
 \series bold
@@ -8570,6 +8859,8 @@
 
 -version"
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8581,23 +8872,23 @@
 
 \family default
 \series default
- at the prompt, and the program should run and output its version like:
+ at the prompt,
+ and the program should run and output its version like:
  
 \begin_inset Newline newline
 \end_inset
 
 
 \family typewriter
-SDCC : mcs51/z80/z180/r2k/r2ka/r3ka/sm83/tlcs90/ez80_z80/z80n/r800/ds390/pic16/p
-ic14/TININative/ds400/hc08/s08/stm8/pdk13/pdk14/pdk15/mos6502/mos65c02 4.4.0
- #14546 (Linux)
+SDCC :
+ mcs51/z80/z180/r2k/r2ka/r3ka/sm83/tlcs90/ez80_z80/z80n/r800/ds390/pic16/pic14/TININative/ds400/hc08/s08/stm8/pdk13/pdk14/pdk15/mos6502/mos65c02 4.4.0 #14546 (Linux)
 \end_layout
 
 \begin_layout Standard
-If it doesn't run, or gives a message about not finding sdcc program, then
- you need to check over your installation.
- Make sure that the sdcc bin directory is in your executable search path
- defined by the PATH environment setting (
+If it doesn't run,
+ or gives a message about not finding sdcc program,
+ then you need to check over your installation.
+ Make sure that the sdcc bin directory is in your executable search path defined by the PATH environment setting (
 \series medium
 see
 \series default
@@ -8605,6 +8896,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Install-Trouble-shooting"
+nolink "false"
 
 \end_inset
 
@@ -8617,8 +8909,8 @@
 Install trouble-shooting for suggestions
 \series default
 ).
- Make sure that the sdcc program is in the bin folder, if not perhaps something
- did not install correctly.
+ Make sure that the sdcc program is in the bin folder,
+ if not perhaps something did not install correctly.
 \begin_inset Newline newline
 \end_inset
 
@@ -8698,6 +8990,7 @@
 
 \series medium
 Compile this using the following command:
+
 \series default
  
 \family sans
@@ -8708,10 +9001,12 @@
 \series default
  
 \series medium
-If all goes well, the compiler will generate a test.asm and test.rel file.
- Congratulations, you've just compiled your first program with SDCC.
- We used the -c option to tell SDCC not to link the generated code, just
- to keep things simple for this step.
+If all goes well,
+ the compiler will generate a test.asm and test.rel file.
+ Congratulations,
+ you've just compiled your first program with SDCC.
+ We used the -c option to tell SDCC not to link the generated code,
+ just to keep things simple for this step.
 \series default
 
 \begin_inset Newline newline
@@ -8735,14 +9030,14 @@
 "
 \series medium
 .
- If all goes well the compiler will link with the libraries and produce
- a test.ihx output file.
+ If all goes well the compiler will link with the libraries and produce a test.ihx output file.
  If this step fails
 \series default
  
 \series medium
-(no test.ihx, and the linker generates warnings), then the problem is most
- likely that
+(no test.ihx,
+ and the linker generates warnings),
+ then the problem is most likely that
 \series default
  SDCC 
 \series medium
@@ -8760,6 +9055,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Install-Trouble-shooting"
+nolink "false"
 
 \end_inset
 
@@ -8824,7 +9120,8 @@
 \begin_inset space ~
 \end_inset
 
-strcpy(str1, "testing");
+strcpy(str1,
+ "testing");
 \begin_inset Newline newline
 \end_inset
 
@@ -8843,9 +9140,10 @@
 \family default
 \series medium
 .
- This should generate a test.ihx output file, and it should give no warnings
- such as not finding the string.h file.
- If it cannot find the string.h file, then the problem is that
+ This should generate a test.ihx output file,
+ and it should give no warnings such as not finding the string.h file.
+ If it cannot find the string.h file,
+ then the problem is that
 \series default
  SDCC 
 \series medium
@@ -8859,6 +9157,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Install-Trouble-shooting"
+nolink "false"
 
 \end_inset
 
@@ -8890,6 +9189,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8924,6 +9225,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -8940,8 +9243,7 @@
 \end_layout
 
 \begin_layout Standard
-A thing to try is starting from scratch by unpacking the .tgz source package
- again in an empty directory.
+A thing to try is starting from scratch by unpacking the .tgz source package again in an empty directory.
  Configure it like:
 \begin_inset Newline newline
 \end_inset
@@ -8986,9 +9288,9 @@
 \begin_inset Newline newline
 \end_inset
 
-If anything goes wrong, you can review the log files to locate the problem.
- Or a relevant part of this can be attached to an email that could be helpful
- when requesting help from the mailing list.
+If anything goes wrong,
+ you can review the log files to locate the problem.
+ Or a relevant part of this can be attached to an email that could be helpful when requesting help from the mailing list.
 \end_layout
 
 \begin_layout Subsection
@@ -9012,10 +9314,9 @@
 \begin_inset Quotes srd
 \end_inset
 
- command is a script that analyzes your system and performs some configuration
- to ensure the source package compiles on your system.
- It will take a few minutes to run, and will compile a few tests to determine
- what compiler features are installed.
+ command is a script that analyzes your system and performs some configuration to ensure the source package compiles on your system.
+ It will take a few minutes to run,
+ and will compile a few tests to determine what compiler features are installed.
 \end_layout
 
 \begin_layout Subsection
@@ -9031,8 +9332,8 @@
 \end_layout
 
 \begin_layout Standard
-This runs the GNU make tool, which automatically compiles all the source
- packages into the final installed binary executables.
+This runs the GNU make tool,
+ which automatically compiles all the source packages into the final installed binary executables.
 \end_layout
 
 \begin_layout Subsection
@@ -9048,12 +9349,13 @@
 \end_layout
 
 \begin_layout Standard
-This will install the compiler, other executables libraries and include
- files into the appropriate directories.
+This will install the compiler,
+ other executables libraries and include files into the appropriate directories.
  See sections 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Install-paths"
+nolink "false"
 
 \end_inset
 
@@ -9065,6 +9367,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Search-Paths"
+nolink "false"
 
 \end_inset
 
@@ -9084,13 +9387,15 @@
 \end_layout
 
 \begin_layout Standard
-SDCC is not just a compiler, but a collection of tools by various developers.
- These include linkers, assemblers, simulators and other components.
+SDCC is not just a compiler,
+ but a collection of tools by various developers.
+ These include linkers,
+ assemblers,
+ simulators and other components.
  Here is a summary of some of the components.
- Note that the included simulator and assembler have separate documentation
- which you can find in the source package in their respective directories.
- As SDCC grows to include support for other processors, other packages from
- various developers are included and may have their own sets of documentation.
+ Note that the included simulator and assembler have separate documentation which you can find in the source package in their respective directories.
+ As SDCC grows to include support for other processors,
+ other packages from various developers are included and may have their own sets of documentation.
 \begin_inset Newline newline
 \end_inset
 
@@ -9099,7 +9404,9 @@
 \end_inset
 
 You might want to look at the files which are installed in <installdir>.
- At the time of this writing, we find the following programs, among others,
+ At the time of this writing,
+ we find the following programs,
+ among others,
  for gcc-builds:
 \begin_inset Newline newline
 \end_inset
@@ -9131,6 +9438,7 @@
 sdasz80
 \series bold
 ,
+
 \series default
  sdasgb - The Z80 and GameBoy Z80 assemblers.
 \end_layout
@@ -9151,6 +9459,7 @@
 sdldz80
 \series bold
 ,
+
 \series default
  sdldgb - The Z80 and GameBoy Z80 linkers.
 \end_layout
@@ -9160,7 +9469,8 @@
 \end_layout
 
 \begin_layout Itemize
-ucsim_51, s51 - The ucSim 8051 simulator.
+ucsim_51,
+ s51 - The ucSim 8051 simulator.
 \end_layout
 
 \begin_layout Itemize
@@ -9180,8 +9490,10 @@
 \end_layout
 
 \begin_layout Itemize
-sdar, sdranlib, sdnm, sdobjcopy - The sdcc archive managing and indexing
- utilites.
+sdar,
+ sdranlib,
+ sdnm,
+ sdobjcopy - The sdcc archive managing and indexing utilites.
 \end_layout
 
 \begin_layout Itemize
@@ -9189,8 +9501,7 @@
 \end_layout
 
 \begin_layout Itemize
-makebin - A tool to convert Intel Hex file to a binary and GameBoy binary
- image file format.
+makebin - A tool to convert Intel Hex file to a binary and GameBoy binary image file format.
 \end_layout
 
 \begin_layout Standard
@@ -9238,13 +9549,15 @@
 \end_layout
 
 \begin_layout Standard
-This is the actual compiler, it in turn uses the C-preprocessor and invokes
- the assembler and linkage editor.
+This is the actual compiler,
+ it in turn uses the C-preprocessor and invokes the assembler and linkage editor.
 \end_layout
 
 \begin_layout Subsection
 sdcpp - The C-Preprocessor
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9259,6 +9572,8 @@
 \begin_layout Standard
 The preprocessor
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9269,6 +9584,8 @@
 
  is a modified version of the GNU cpp
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9311,27 +9628,28 @@
 \end_inset
 
 .
- The C preprocessor is used to pull in #include sources, process #ifdef
- statements, #defines and so on.
+ The C preprocessor is used to pull in #include sources,
+ process #ifdef statements,
+ #defines and so on.
 \end_layout
 
 \begin_layout Subsection
-sdas, sdld - The Assemblers and Linkage Editors
+sdas,
+ sdld - The Assemblers and Linkage Editors
 \end_layout
 
 \begin_layout Standard
-This is a set of retargettable assemblers and linkage editors, which was
- developed by Alan Baldwin.
- John Hartman created the version for 8051, and I (Sandeep) have made some
- enhancements and bug fixes for it to work properly with SDCC.
+This is a set of retargettable assemblers and linkage editors,
+ which was developed by Alan Baldwin.
+ John Hartman created the version for 8051,
+ and I (Sandeep) have made some enhancements and bug fixes for it to work properly with SDCC.
  
 \end_layout
 
 \begin_layout Standard
-SDCC used an about 1998 branch of asxxxx version 2.0 which unfortunately
- is not compatible with the more advanced (f.e.
- macros, more targets) ASxxxx Cross Assemblers nowadays available from Alan
- Baldwin 
+SDCC used an about 1998 branch of asxxxx version 2.0 which unfortunately is not compatible with the more advanced (f.e.
+ macros,
+ more targets) ASxxxx Cross Assemblers nowadays available from Alan Baldwin 
 \begin_inset Flex URL
 status collapsed
 
@@ -9343,19 +9661,23 @@
 \end_inset
 
 .
- In 2009 Alan made his ASxxxx Cross Assemblers version 5.0 available under
- the GPL license (GPLv3 or later), so a reunion is now a work in progress.
+ In 2009 Alan made his ASxxxx Cross Assemblers version 5.0 available under the GPL license (GPLv3 or later),
+ so a reunion is now a work in progress.
  Thanks Alan!
 \end_layout
 
 \begin_layout Subsection
-ucsim_51, ucsim_z80, ucsim_stm8 etc.
+ucsim_51,
+ ucsim_z80,
+ ucsim_stm8 etc.
  - The Simulators
 \end_layout
 
 \begin_layout Standard
 ucsim_51 (or s51)
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9364,8 +9686,11 @@
 
 \end_inset
 
-, ucsim_z80
+,
+ ucsim_z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9376,6 +9701,8 @@
 
  ucsim_m68hc08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9386,6 +9713,8 @@
 
  and ucsim_stm8 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9394,10 +9723,12 @@
 
 \end_inset
 
-, as well as similarly named programs provided with SDCC, are free open
- source simulators developed by Daniel Drotos.
+,
+ as well as similarly named programs provided with SDCC,
+ are free open source simulators developed by Daniel Drotos.
  The simulators are built as part of the build process.
- For more information visit Daniel's web site at: 
+ For more information visit Daniel's web site at:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -9409,8 +9740,11 @@
 \end_inset
 
 .
- It currently supports the core mcs51, the Dallas DS80C390, the Phillips
- XA51 family, the Z80, 6808 the STM8 and various others.
+ It currently supports the core mcs51,
+ the Dallas DS80C390,
+ the Phillips XA51 family,
+ the Z80,
+ 6808 the STM8 and various others.
 \end_layout
 
 \begin_layout Subsection
@@ -9420,6 +9754,8 @@
 \begin_layout Standard
 SDCDB
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9433,12 +9769,15 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "cha:Debugging-with-SDCDB"
+nolink "false"
 
 \end_inset
 
 .
  The current version of the debugger uses Daniel's Simulator S51
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9447,7 +9786,8 @@
 
 \end_inset
 
-, but can be easily changed to use other simulators.
+,
+ but can be easily changed to use other simulators.
 \end_layout
 
 \begin_layout Chapter
@@ -9457,6 +9797,8 @@
 \begin_layout Section
 Standard-Compliance
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9476,13 +9818,13 @@
 \end_layout
 
 \begin_layout Standard
-SDCC aims to be a conforming freestanding implementation of the C programming
- language.
+SDCC aims to be a conforming freestanding implementation of the C programming language.
  The latest publicly available version of the standard 
 \emph on
 ISO/IEC 9899 - Programming languages - C
 \emph default
- should be available at: 
+ should be available at:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -9518,6 +9860,8 @@
 
 -std-c89
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -9564,7 +9908,8 @@
 \begin_layout Verse
 
 \family typewriter
-struct s { char x } a[] = {1, 2};
+struct s { char x } a[] = {1,
+ 2};
 \begin_inset space ~
 \end_inset
 
@@ -9588,13 +9933,17 @@
 \begin_inset Newline newline
 \end_inset
 
-struct s { char x } a[] = {{1}, {2}}; /* OK */
+struct s { char x } a[] = {{1},
+ {2}};
+ /* OK */
 \end_layout
 
 \end_deeper
 \begin_layout Itemize
 'double
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9605,6 +9954,8 @@
 
 ' precision floating point 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9614,13 +9965,16 @@
 \end_inset
 
 not supported.
- Instead a warning is emitted, and float is used instead.
+ Instead a warning is emitted,
+ and float is used instead.
  long double is treated the same.
 \end_layout
 
 \begin_layout Itemize
 K&R style
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9657,7 +10011,8 @@
 \begin_inset Newline newline
 \end_inset
 
-int i,j; /* is valid in ANSI but not valid in SDCC */
+int i,j;
+ /* is valid in ANSI but not valid in SDCC */
 \begin_inset Newline newline
 \end_inset
 
@@ -9695,8 +10050,12 @@
 \end_layout
 
 \begin_layout Itemize
-pic14, pic16: structures
+pic14,
+ pic16:
+ structures
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9707,6 +10066,8 @@
 
  and unions
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9715,9 +10076,16 @@
 
 \end_inset
 
- cannot be passed as function parameters; hc08, s08, mos6502, pic14, pic16:
+ cannot be passed as function parameters;
+ hc08,
+ s08,
+ mos6502,
+ pic14,
+ pic16:
  they cannot be a return value
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9726,7 +10094,8 @@
 
 \end_inset
 
- from a function, e.g.:
+ from a function,
+ e.g.:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -9820,7 +10189,8 @@
 \begin_inset space ~
 \end_inset
 
-return rets; /* is invalid in SDCC although allowed in ANSI */
+return rets;
+ /* is invalid in SDCC although allowed in ANSI */
 \begin_inset Newline newline
 \end_inset
 
@@ -9829,8 +10199,14 @@
 
 \end_deeper
 \begin_layout Itemize
-mcs51, ds390, hc08, s08, pdk13, pdk14, pdk15 and mos6502 ports: functions
- are not reentrant unless explicitly declared as such or 
+mcs51,
+ ds390,
+ hc08,
+ s08,
+ pdk13,
+ pdk14,
+ pdk15 and mos6502 ports:
+ functions are not reentrant unless explicitly declared as such or 
 \series bold
 
 \begin_inset Flex Code
@@ -9873,6 +10249,8 @@
 
 -std-c95
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9900,7 +10278,8 @@
 \end_layout
 
 \begin_layout Standard
-Except for the issues mentioned in the section above, this standard is supported.
+Except for the issues mentioned in the section above,
+ this standard is supported.
 \end_layout
 
 \begin_layout Subsection
@@ -9925,6 +10304,8 @@
 
 -std-c99
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -9952,8 +10333,8 @@
 \end_layout
 
 \begin_layout Standard
-In addition to what is mentioned in the section above, the following features
- of this standard are not supported by SDCC:
+In addition to what is mentioned in the section above,
+ the following features of this standard are not supported by SDCC:
 \end_layout
 
 \begin_layout Itemize
@@ -9966,7 +10347,8 @@
 \end_layout
 
 \begin_layout Itemize
-ptrdiff_t has 16 bits, while the standard requires at least 17 bits.
+ptrdiff_t has 16 bits,
+ while the standard requires at least 17 bits.
 \end_layout
 
 \begin_layout Standard
@@ -9974,8 +10356,15 @@
 \end_layout
 
 \begin_layout Itemize
-pic14, pic16: there is no support for data types long long, unsigned long
- long, int_fast64_t, int_least64_t, int64_t, uint_fast64_t, uint_least64_t,
+pic14,
+ pic16:
+ there is no support for data types long long,
+ unsigned long long,
+ int_fast64_t,
+ int_least64_t,
+ int64_t,
+ uint_fast64_t,
+ uint_least64_t,
  uint64_t.
  
 \end_layout
@@ -10002,6 +10391,8 @@
 
 -std-c11
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -10029,7 +10420,8 @@
 \end_layout
 
 \begin_layout Standard
-Except for the issues mentioned in the section above, this standard is supported.
+Except for the issues mentioned in the section above,
+ this standard is supported.
 \end_layout
 
 \begin_layout Subsection
@@ -10054,6 +10446,8 @@
 
 -std-c23
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -10096,7 +10490,8 @@
 \begin_layout Verse
 
 \family typewriter
-struct s { char x } a[] = {1, 2};
+struct s { char x } a[] = {1,
+ 2};
 \begin_inset space ~
 \end_inset
 
@@ -10120,13 +10515,17 @@
 \begin_inset Newline newline
 \end_inset
 
-struct s { char x } a[] = {{1}, {2}}; /* OK */
+struct s { char x } a[] = {{1},
+ {2}};
+ /* OK */
 \end_layout
 
 \end_deeper
 \begin_layout Itemize
 'double
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10137,6 +10536,8 @@
 
 ' precision floating point 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10146,7 +10547,8 @@
 \end_inset
 
 not supported.
- Instead a warning is emitted, and float is used instead.
+ Instead a warning is emitted,
+ and float is used instead.
  long double is treated the same.
 \end_layout
 
@@ -10179,8 +10581,12 @@
 \end_layout
 
 \begin_layout Itemize
-pic14, pic16: structures
+pic14,
+ pic16:
+ structures
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10191,6 +10597,8 @@
 
  and unions
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10199,9 +10607,16 @@
 
 \end_inset
 
- cannot be passed as function parameters; hc08, s08, mos6502, pic14, pic16:
+ cannot be passed as function parameters;
+ hc08,
+ s08,
+ mos6502,
+ pic14,
+ pic16:
  they cannot be a return value
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10210,7 +10625,8 @@
 
 \end_inset
 
- from a function, e.g.:
+ from a function,
+ e.g.:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -10304,7 +10720,8 @@
 \begin_inset space ~
 \end_inset
 
-return rets; /* is invalid in SDCC although allowed in ANSI */
+return rets;
+ /* is invalid in SDCC although allowed in ANSI */
 \begin_inset Newline newline
 \end_inset
 
@@ -10313,8 +10730,14 @@
 
 \end_deeper
 \begin_layout Itemize
-mcs51, ds390, hc08, s08, pdk13, pdk14, pdk15 and mos6502 ports: functions
- are not reentrant unless explicitly declared as such or 
+mcs51,
+ ds390,
+ hc08,
+ s08,
+ pdk13,
+ pdk14,
+ pdk15 and mos6502 ports:
+ functions are not reentrant unless explicitly declared as such or 
 \series bold
 
 \begin_inset Flex Code
@@ -10336,14 +10759,23 @@
 \end_layout
 
 \begin_layout Itemize
-pic14, pic16: there is no support for data types long long, unsigned long
- long, int_fast64_t, int_least64_t, int64_t, uint_fast64_t, uint_least64_t,
+pic14,
+ pic16:
+ there is no support for data types long long,
+ unsigned long long,
+ int_fast64_t,
+ int_least64_t,
+ int64_t,
+ uint_fast64_t,
+ uint_least64_t,
  uint64_t.
  
 \end_layout
 
 \begin_layout Itemize
-pic14, pic16: _BitInt is not supported.
+pic14,
+ pic16:
+ _BitInt is not supported.
 \end_layout
 
 \begin_layout Subsection
@@ -10351,8 +10783,7 @@
 \end_layout
 
 \begin_layout Standard
-SDCC supports objects in named address spaces and to some degree pointers
- to such objects.
+SDCC supports objects in named address spaces and to some degree pointers to such objects.
  The support for fixed-point math in SDCC is inconsistent with the standard.
  Other parts of the standard are not supported.
 \end_layout
@@ -10366,8 +10797,10 @@
 \end_layout
 
 \begin_layout Itemize
-Diagnostics are output to stderr, in the format <filename>:<line-number>:
- <warning|error> <diagnostic-number>: <diagnostic-description>
+Diagnostics are output to stderr,
+ in the format <filename>:<line-number>:
+ <warning|error> <diagnostic-number>:
+ <diagnostic-description>
 \end_layout
 
 \begin_layout Itemize
@@ -10379,8 +10812,7 @@
 \end_layout
 
 \begin_layout Itemize
-See SDCC source (and your own code if you use a custom crt0 for a target
- that supports it) for any information on the environment.
+See SDCC source (and your own code if you use a custom crt0 for a target that supports it) for any information on the environment.
 \end_layout
 
 \begin_layout Subsubsection
@@ -10388,8 +10820,7 @@
 \end_layout
 
 \begin_layout Itemize
-See the compiler and assembler source for information on characters that
- may appear in identifiers and on the number of significant initial characters.
+See the compiler and assembler source for information on characters that may appear in identifiers and on the number of significant initial characters.
 \end_layout
 
 \begin_layout Subsubsection
@@ -10401,19 +10832,23 @@
 \end_layout
 
 \begin_layout Itemize
-Values of members of the execution character set: TODO.
+Values of members of the execution character set:
+ TODO.
 \end_layout
 
 \begin_layout Itemize
-Values of members of the execution character set for escape sequences: TODO.
+Values of members of the execution character set for escape sequences:
+ TODO.
 \end_layout
 
 \begin_layout Itemize
-Value of char with something weird stored in it: TODO.
+Value of char with something weird stored in it:
+ TODO.
 \end_layout
 
 \begin_layout Itemize
-unsigned char has the same range, representation and behavior as 
+unsigned char has the same range,
+ representation and behavior as 
 \begin_inset Quotes sld
 \end_inset
 
@@ -10441,8 +10876,7 @@
 \end_layout
 
 \begin_layout Itemize
-See the implementation (soft float library) for any information on floating
- point.
+See the implementation (soft float library) for any information on floating point.
 \end_layout
 
 \begin_layout Subsubsection
@@ -10450,13 +10884,11 @@
 \end_layout
 
 \begin_layout Itemize
-For the result of converting between pointers and integers see the SDCC
- source code.
+For the result of converting between pointers and integers see the SDCC source code.
 \end_layout
 
 \begin_layout Itemize
-For the size of the result of subtracting two pointers to elements of the
- same array see the SDCC source code.
+For the size of the result of subtracting two pointers to elements of the same array see the SDCC source code.
 \end_layout
 
 \begin_layout Subsubsection
@@ -10464,17 +10896,17 @@
 \end_layout
 
 \begin_layout Itemize
-The extend to which suggestions made by register are effective depends on
- the target.
+The extend to which suggestions made by register are effective depends on the target.
 \end_layout
 
 \begin_layout Itemize
-SDCC will inline functions if and only if they are declared using inline
- and do not have variable arguments.
+SDCC will inline functions if and only if they are declared using inline and do not have variable arguments.
 \end_layout
 
 \begin_layout Subsubsection
-Structures, unions, enumerations and bit-fields
+Structures,
+ unions,
+ enumerations and bit-fields
 \end_layout
 
 \begin_layout Itemize
@@ -10482,8 +10914,8 @@
 \end_layout
 
 \begin_layout Itemize
-There are no allowed bit-field types other than _Bool, signed int and unsigned
- int.
+There are no allowed bit-field types other than _Bool,
+ signed int and unsigned int.
 \end_layout
 
 \begin_layout Itemize
@@ -10505,9 +10937,16 @@
 \end_layout
 
 \begin_layout Itemize
-For enumerations, the compatible type is the first from the following list
- that fits the constants: bool, unsigned char, signed char, unsigned int,
- signed int, unsigned long int, signed long int, unsigned long long int,
+For enumerations,
+ the compatible type is the first from the following list that fits the constants:
+ bool,
+ unsigned char,
+ signed char,
+ unsigned int,
+ signed int,
+ unsigned long int,
+ signed long int,
+ unsigned long long int,
  signed long long int.
 \end_layout
 
@@ -10516,8 +10955,8 @@
 \end_layout
 
 \begin_layout Itemize
-SDCC shall preserve all volatile reads and writes, but does not guarantee
- them to be atomic (except for atomic types and volatile sig_atomic_t).
+SDCC shall preserve all volatile reads and writes,
+ but does not guarantee them to be atomic (except for atomic types and volatile sig_atomic_t).
 \end_layout
 
 \begin_layout Subsubsection
@@ -10537,8 +10976,7 @@
 \end_layout
 
 \begin_layout Itemize
-See assert.h and library source for the format of the diagnostic printed
- by the assert macro.
+See assert.h and library source for the format of the diagnostic printed by the assert macro.
 \end_layout
 
 \begin_layout Itemize
@@ -10566,9 +11004,7 @@
 \end_layout
 
 \begin_layout Itemize
-See library source for the values returned by mathematical functions on
- domain error and pole error (and anything else on mathematical functions
- and floating type encodings).
+See library source for the values returned by mathematical functions on domain error and pole error (and anything else on mathematical functions and floating type encodings).
 \end_layout
 
 \begin_layout Itemize
@@ -10584,8 +11020,9 @@
 \end_layout
 
 \begin_layout Itemize
-See the respective library headers for the values or expressions for macros
- specified in float.h, limits.h, stdint.h.
+See the respective library headers for the values or expressions for macros specified in float.h,
+ limits.h,
+ stdint.h.
 \end_layout
 
 \begin_layout Itemize
@@ -10593,8 +11030,8 @@
 \end_layout
 
 \begin_layout Itemize
-The number of bytes in any object is the minimum allowed (except for some
- padding bits on bit-fields), byte order depends on the target.
+The number of bytes in any object is the minimum allowed (except for some padding bits on bit-fields),
+ byte order depends on the target.
 \end_layout
 
 \begin_layout Itemize
@@ -10627,13 +11064,16 @@
 
 \family default
 \series default
- This will compile, assemble and link your source file.
+ This will compile,
+ assemble and link your source file.
  Output files are as follows:
 \end_layout
 
 \begin_layout Itemize
 sourcefile.asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10644,6 +11084,8 @@
 
  - Assembler source
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10658,6 +11100,8 @@
 \begin_layout Itemize
 sourcefile.lst
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10668,6 +11112,8 @@
 
  - Assembler listing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10682,6 +11128,8 @@
 \begin_layout Itemize
 sourcefile.rst
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10692,6 +11140,8 @@
 
  - Assembler listing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10700,12 +11150,15 @@
 
 \end_inset
 
- file updated with linkedit information, created by linkage editor
+ file updated with linkedit information,
+ created by linkage editor
 \end_layout
 
 \begin_layout Itemize
 sourcefile.sym
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10716,6 +11169,8 @@
 
  - symbol listing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10724,12 +11179,15 @@
 
 \end_inset
 
- for the sourcefile, created by the assembler
+ for the sourcefile,
+ created by the assembler
 \end_layout
 
 \begin_layout Itemize
 sourcefile.rel
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10740,6 +11198,8 @@
 
  - Object file
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10748,12 +11208,15 @@
 
 \end_inset
 
- created by the assembler, input to Linkage editor
+ created by the assembler,
+ input to Linkage editor
 \end_layout
 
 \begin_layout Itemize
 sourcefile.map
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10764,6 +11227,8 @@
 
  - The memory map
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10772,12 +11237,15 @@
 
 \end_inset
 
- for the load module, created by the Linker
+ for the load module,
+ created by the Linker
 \end_layout
 
 \begin_layout Itemize
 sourcefile.mem
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10792,6 +11260,8 @@
 \begin_layout Itemize
 sourcefile.ihx
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10802,6 +11272,8 @@
 
  - The load module in Intel hex format
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10812,6 +11284,8 @@
 
  (you can select the Motorola S19 format
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10835,6 +11309,8 @@
 
 -out-fmt-s19
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10865,6 +11341,8 @@
 \shape default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10881,10 +11359,14 @@
 \shape default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-srecord (bin, hex, ...
+srecord (bin,
+ hex,
+ ...
  tool)
 \end_layout
 
@@ -10904,16 +11386,21 @@
 \begin_inset CommandInset ref
 LatexCommand vref
 reference "subsec:Postprocessing-the-Intel"
+nolink "false"
 
 \end_inset
 
 ).
  Both formats are documented in the documentation of srecord
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-srecord (bin, hex, ...
+srecord (bin,
+ hex,
+ ...
  tool)
 \end_layout
 
@@ -10925,6 +11412,8 @@
 \begin_layout Itemize
 sourcefile.adb
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10933,8 +11422,7 @@
 
 \end_inset
 
- - An intermediate file containing debug information needed to create the
- .cdb file (with -
+ - An intermediate file containing debug information needed to create the .cdb file (with -
 \begin_inset ERT
 status collapsed
 
@@ -10949,6 +11437,8 @@
 
 -debug
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -10976,6 +11466,8 @@
 \begin_layout Itemize
 sourcefile.cdb
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11004,6 +11496,8 @@
 \begin_layout Itemize
 sourcefile.omf
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11014,10 +11508,13 @@
 
  - An optional AOMF or AOMF51
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-AOMF, AOMF51
+AOMF,
+ AOMF51
 \end_layout
 
 \end_inset
@@ -11059,9 +11556,10 @@
 \emph on
 f
 \emph default
-ormat is a subformat of the OMF51 format and is commonly used by third party
- tools (debuggers
+ormat is a subformat of the OMF51 format and is commonly used by third party tools (debuggers
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11070,12 +11568,16 @@
 
 \end_inset
 
-, simulators, emulators).
+,
+ simulators,
+ emulators).
 \end_layout
 
 \begin_layout Itemize
 sourcefile.dump*
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11101,6 +11603,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Intermediate-Dump-Options"
+nolink "false"
 
 \end_inset
 
@@ -11112,6 +11615,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:The-anatomy-of"
+nolink "false"
 
 \end_inset
 
@@ -11133,6 +11637,8 @@
 \begin_layout Subsection
 Postprocessing the Intel Hex
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11154,6 +11660,8 @@
 \begin_layout Standard
 In most cases this won't be needed but the Intel Hex file
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11162,15 +11670,15 @@
 
 \end_inset
 
- which is generated by SDCC might include lines of varying length and the
- addresses within the file are not guaranteed to be strictly ascending.
- If your toolchain or a bootloader does not like this you can use the tool
- 
+ which is generated by SDCC might include lines of varying length and the addresses within the file are not guaranteed to be strictly ascending.
+ If your toolchain or a bootloader does not like this you can use the tool 
 \family typewriter
 packihx
 \family default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11179,7 +11687,8 @@
 
 \end_inset
 
- which is part of the SDCC distribution: 
+ which is part of the SDCC distribution:
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -11207,18 +11716,24 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-srecord (bin, hex, ...
+srecord (bin,
+ hex,
+ ...
  tool)
 \end_layout
 
 \end_inset
 
- package additionally allows to set undefined locations to a predefined
- value, to insert checksums
+ package additionally allows to set undefined locations to a predefined value,
+ to insert checksums
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11227,8 +11742,13 @@
 
 \end_inset
 
- of various flavours (crc, add, xor) and to perform other manipulations
- (convert, split, crop, offset, ...).
+ of various flavours (crc,
+ add,
+ xor) and to perform other manipulations (convert,
+ split,
+ crop,
+ offset,
+ ...).
  
 \begin_inset Newline newline
 \end_inset
@@ -11274,6 +11794,8 @@
 \begin_layout Plain Layout
 the command backfills
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11282,10 +11804,8 @@
 
 \end_inset
 
- unused memory with 0x12 and the overall 16 bit sum of the complete 64 kByte
- block is zero.
- If the program counter on an mcs51 runs wild the backfill pattern 0x12
- will be interpreted as an 
+ unused memory with 0x12 and the overall 16 bit sum of the complete 64 kByte block is zero.
+ If the program counter on an mcs51 runs wild the backfill pattern 0x12 will be interpreted as an 
 \family typewriter
 lcall
 \family default
@@ -11367,8 +11887,7 @@
 
 \begin_layout Standard
 SDCC can compile only ONE file at a time.
- Let us for example assume that you have a project containing the following
- files:
+ Let us for example assume that you have a project containing the following files:
 \begin_inset Newline newline
 \end_inset
 
@@ -11452,6 +11971,8 @@
 \emph default
  function and link
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11488,6 +12009,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11504,7 +12027,8 @@
 \begin_inset Newline newline
 \end_inset
 
-Alternatively, 
+Alternatively,
+ 
 \emph on
 foomain.c
 \emph default
@@ -11554,10 +12078,12 @@
 \noun on
 first
 \noun default
- file specified in the command line, since the linkage editor processes
- file in the order they are presented to it.
+ file specified in the command line,
+ since the linkage editor processes file in the order they are presented to it.
  The linker is invoked from SDCC using a script file with extension .lnk
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11567,13 +12093,14 @@
 \end_inset
 
 .
- You can view this file to troubleshoot linking problems such as those arising
- from missing libraries.
+ You can view this file to troubleshoot linking problems such as those arising from missing libraries.
 \end_layout
 
 \begin_layout Subsection
 Projects with Additional Libraries
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11586,12 +12113,13 @@
 \end_layout
 
 \begin_layout Standard
-Some reusable routines may be compiled into a library, see the documentation
- for the assembler and linkage editor (which are in <installdir>/share/sdcc/doc)
- for how to create a 
+Some reusable routines may be compiled into a library,
+ see the documentation for the assembler and linkage editor (which are in <installdir>/share/sdcc/doc) for how to create a 
 \emph on
 .lib
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11610,14 +12138,15 @@
 plural "false"
 caps "false"
 noprefix "false"
+nolink "false"
 
 \end_inset
 
  below contains a minimal example.
  Libraries created in this manner can be included in the command line.
- Make sure you include the -L <library-path> option to tell the linker where
- to look for these files if they are not in the current directory.
- Here is an example, assuming you have the source file 
+ Make sure you include the -L <library-path> option to tell the linker where to look for these files if they are not in the current directory.
+ Here is an example,
+ assuming you have the source file 
 \emph on
 foomain.c
 \emph default
@@ -11663,10 +12192,11 @@
 \begin_inset Newline newline
 \end_inset
 
-The most efficient way to use libraries is to keep separate modules in separate
- source files.
+The most efficient way to use libraries is to keep separate modules in separate source files.
  The lib file now should name all the modules.rel
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11686,6 +12216,8 @@
 \begin_layout Subsection
 Using sdar to Create and Manage Libraries
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11729,8 +12261,8 @@
 
 
 \series default
-To create a library containing sdas object files, you should use the following
- sequence:
+To create a library containing sdas object files,
+ you should use the following sequence:
 \series bold
 
 \begin_inset Newline newline
@@ -11749,6 +12281,8 @@
 \begin_layout Section
 Command Line Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11770,6 +12304,8 @@
 \begin_layout Subsection
 Processor Selection Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11780,6 +12316,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11797,6 +12335,8 @@
 \series bold
 -mmcs51
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11809,6 +12349,8 @@
 \series default
  Generate code for the Intel MCS51
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11827,6 +12369,8 @@
 \series bold
 -mds390
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11839,6 +12383,8 @@
 \series default
  Generate code for the Dallas DS80C390
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11856,6 +12402,8 @@
 \series bold
 -mds400
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11868,6 +12416,8 @@
 \series default
  Generate code for the Dallas DS80C400
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11885,6 +12435,8 @@
 \series bold
 -mhc08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11897,6 +12449,8 @@
 \series default
  Generate code for the Freescale/Motorola HC08 (aka 68HC08) 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11914,6 +12468,8 @@
 \series bold
 -ms08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11924,9 +12480,12 @@
 
 
 \series default
- Generate code for the Freescale/Motorola S08 (aka 68HCS08, HCS08, CS08)
- 
+ Generate code for the Freescale/Motorola S08 (aka 68HCS08,
+ HCS08,
+ CS08) 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11944,6 +12503,8 @@
 \series bold
 -mz80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11956,6 +12517,8 @@
 \series default
  Generate code for the Zilog Z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11973,6 +12536,8 @@
 \series bold
 -mz180
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -11985,6 +12550,8 @@
 \series default
  Generate code for the Zilog Z180
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12002,6 +12569,8 @@
 \series bold
 -mr2k
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12021,6 +12590,8 @@
 \series bold
 -mr3ka
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12040,6 +12611,8 @@
 \series bold
 -msm83
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12052,6 +12625,8 @@
 \series default
  Generate code for the Sharp SM83
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12069,6 +12644,8 @@
 \series bold
 -mtlcs90
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12088,6 +12665,8 @@
 \series bold
 -mez80_z80
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12107,6 +12686,8 @@
 \series bold
 -mstm8
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12126,6 +12707,8 @@
 \series bold
 -mpdk13
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12145,6 +12728,8 @@
 \series bold
 -mpdk14
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12164,6 +12749,8 @@
 \series bold
 -mpdk15
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -12183,6 +12770,8 @@
 \series bold
 -mpic14
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12195,6 +12784,8 @@
 \series default
  Generate code for the Microchip PIC 14
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12204,7 +12795,8 @@
 \end_inset
 
 -bit processors (p16f84 and variants.
- In development, not complete).
+ In development,
+ not complete).
 \end_layout
 
 \begin_layout Standard
@@ -12226,6 +12818,8 @@
 \series bold
 -mpic16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12238,6 +12832,8 @@
 \series default
  Generate code for the Microchip PIC 16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12247,7 +12843,8 @@
 \end_inset
 
 -bit processors (p18f452 and variants.
- In development, not complete).
+ In development,
+ not complete).
 \end_layout
 
 \begin_layout Labeling
@@ -12256,6 +12853,8 @@
 \series bold
 -mmos6502
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12266,8 +12865,7 @@
 
 
 \series default
- Generate code for the original MOS Technology NMOS 6502 processor and compatibl
-e derivatives including the 6510 and 8502.
+ Generate code for the original MOS Technology NMOS 6502 processor and compatible derivatives including the 6510 and 8502.
 \end_layout
 
 \begin_layout Labeling
@@ -12276,6 +12874,8 @@
 \series bold
 -mmos65c02
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12291,8 +12891,7 @@
 \end_layout
 
 \begin_layout Standard
-SDCC inspects the program name it was called with so the processor family
- can also be selected by renaming the sdcc binary (to f.e.
+SDCC inspects the program name it was called with so the processor family can also be selected by renaming the sdcc binary (to f.e.
  z80-sdcc) or by calling SDCC from a suitable link.
  Option -m has higher priority than setting from program name.
 \end_layout
@@ -12300,6 +12899,8 @@
 \begin_layout Subsection
 Preprocessor Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12310,6 +12911,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12320,6 +12923,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12336,8 +12941,11 @@
 \shape italic
 sdcpp
 \shape default
-, an adapted version of the GNU Compiler Collection
+,
+ an adapted version of the GNU Compiler Collection
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12352,6 +12960,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12398,8 +13008,7 @@
 \end_inset
 
 ).
- If you need more dedicated options than those listed below please refer
- to the GCC
+ If you need more dedicated options than those listed below please refer to the GCC
 \begin_inset space ~
 \end_inset
 
@@ -12427,6 +13036,8 @@
 \series bold
 -I<path>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12454,6 +13065,8 @@
 \series bold
 -D<macro[=value]>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12474,6 +13087,8 @@
 \series bold
 -M
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12484,18 +13099,17 @@
 
 
 \series default
- Tell the preprocessor to output a rule suitable for make describing the
- dependencies of each object file.
- For each source file, the preprocessor outputs one make-rule whose target
- is the object file name for that source file and whose dependencies are
- all the files `#include'd in it.
+ Tell the preprocessor to output a rule suitable for make describing the dependencies of each object file.
+ For each source file,
+ the preprocessor outputs one make-rule whose target is the object file name for that source file and whose dependencies are all the files `#include'd in it.
  This rule may be a single line or may be continued with `
 \backslash
 '-newline if it is long.
- The list of rules is printed on standard output instead of the preprocessed
- C program.
+ The list of rules is printed on standard output instead of the preprocessed C program.
  `-M' implies `-E
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12513,6 +13127,8 @@
 \series bold
 -C
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12533,6 +13149,8 @@
 \series bold
 -MM
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12546,8 +13164,7 @@
 \size large
  
 \size default
-Like `-M' but the output mentions only the user header files included with
- `#include 
+Like `-M' but the output mentions only the user header files included with `#include 
 \begin_inset Quotes eld
 \end_inset
 
@@ -12561,6 +13178,8 @@
 \series bold
 -Aquestion(answer)
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12571,10 +13190,9 @@
 
 
 \series default
- Assert the answer answer for question, in case it is tested with a preprocessor
- conditional such as `#if #question(answer)'.
- `-A-' disables the standard assertions that normally describe the target
- machine.
+ Assert the answer answer for question,
+ in case it is tested with a preprocessor conditional such as `#if #question(answer)'.
+ `-A-' disables the standard assertions that normally describe the target machine.
 \end_layout
 
 \begin_layout Labeling
@@ -12583,6 +13201,8 @@
 \series bold
 -Umacro
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12594,8 +13214,8 @@
 
 \series default
  Undefine macro macro.
- `-U' options are evaluated after all `-D' options, but before any `-include'
- and `-imacros' options.
+ `-U' options are evaluated after all `-D' options,
+ but before any `-include' and `-imacros' options.
 \end_layout
 
 \begin_layout Labeling
@@ -12604,6 +13224,8 @@
 \series bold
 -dM
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12614,8 +13236,7 @@
 
 
 \series default
- Tell the preprocessor to output only a list of the macro definitions that
- are in effect at the end of preprocessing.
+ Tell the preprocessor to output only a list of the macro definitions that are in effect at the end of preprocessing.
  Used with the `-E' option.
 \end_layout
 
@@ -12625,6 +13246,8 @@
 \series bold
 -dD
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12635,8 +13258,8 @@
 
 
 \series default
- Tell the preprocessor to pass all macro definitions into the output, in
- their proper sequence in the rest of the output.
+ Tell the preprocessor to pass all macro definitions into the output,
+ in their proper sequence in the rest of the output.
 \end_layout
 
 \begin_layout Labeling
@@ -12645,6 +13268,8 @@
 \series bold
 -dN
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12674,6 +13299,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12689,6 +13316,8 @@
 \family default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12704,6 +13333,8 @@
 \begin_layout Subsection
 Optimization Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12714,6 +13345,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12744,6 +13377,8 @@
 
 -nogcse
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12767,9 +13402,8 @@
 
 
 \series default
- Will not do global common subexpression elimination, this option may be
- used when the compiler creates undesirably large stack/data spaces to store
- compiler temporaries (
+ Will not do global common subexpression elimination,
+ this option may be used when the compiler creates undesirably large stack/data spaces to store compiler temporaries (
 \emph on
 s
 \emph default
@@ -12777,8 +13411,11 @@
 \emph on
 loc
 \emph default
-ations, sloc
+ations,
+ sloc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12788,14 +13425,16 @@
 \end_inset
 
 ).
- A warning message will be generated when this happens and the compiler
- will indicate the number of extra bytes it allocated.
- It is recommended that this option NOT be used, #pragma
+ A warning message will be generated when this happens and the compiler will indicate the number of extra bytes it allocated.
+ It is recommended that this option NOT be used,
+ #pragma
 \begin_inset space ~
 \end_inset
 
 nogcse
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12818,6 +13457,8 @@
 
  can be used to turn off global subexpression elimination
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12848,6 +13489,8 @@
 
 -noinvariant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12871,23 +13514,26 @@
 
 
 \series default
- Will not do loop invariant optimizations, this may be turned off for reasons
- explained for the previous option.
- For more details of loop optimizations performed see Loop Invariants in
- section 
+ Will not do loop invariant optimizations,
+ this may be turned off for reasons explained for the previous option.
+ For more details of loop optimizations performed see Loop Invariants in section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Loop-Optimizations"
+nolink "false"
 
 \end_inset
 
 .
- It is recommended that this option NOT be used, #pragma
+ It is recommended that this option NOT be used,
+ #pragma
 \begin_inset space ~
 \end_inset
 
 noinvariant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12930,6 +13576,8 @@
 
 -noinduction
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -12953,14 +13601,17 @@
 
 
 \series default
- Will not do loop induction optimizations, see section strength reduction
- for more details.
- It is recommended that this option is NOT used, #pragma
+ Will not do loop induction optimizations,
+ see section strength reduction for more details.
+ It is recommended that this option is NOT used,
+ #pragma
 \begin_inset space ~
 \end_inset
 
 noinduction
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13003,6 +13654,8 @@
 
 -noloopreverse
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13031,6 +13684,8 @@
 \size default
 Will not do loop reversal 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13063,6 +13718,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13106,6 +13763,8 @@
 
 -no-xinit-opt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13132,6 +13791,8 @@
  Will not memcpy initialized data from code space into xdata space.
  This saves a few bytes in code space if you don't have initialized data
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13162,6 +13823,8 @@
 
 -nooverlay
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13208,6 +13871,8 @@
 
 -no-peep
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13255,6 +13920,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13280,12 +13947,12 @@
 \begin_inset space ~
 \end_inset
 
-<filename> This option can be used to use additional rules to be used by
- the peep hole optimizer.
+<filename> This option can be used to use additional rules to be used by the peep hole optimizer.
  See section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Peephole-Optimizer"
+nolink "false"
 
 \end_inset
 
@@ -13315,6 +13982,8 @@
 
 -peep-asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13339,9 +14008,11 @@
 
 \series default
  Pass the inline assembler code through the peep hole optimizer.
- This can cause unexpected changes to inline assembler code, please go through
- the peephole optimizer
+ This can cause unexpected changes to inline assembler code,
+ please go through the peephole optimizer
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13350,8 +14021,7 @@
 
 \end_inset
 
- rules defined in the source file tree '<target>/peeph.def' before using
- this option.
+ rules defined in the source file tree '<target>/peeph.def' before using this option.
 \end_layout
 
 \begin_layout Labeling
@@ -13373,6 +14043,8 @@
 
 -peep-return
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13418,6 +14090,8 @@
 \series bold
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13463,6 +14137,8 @@
 
 -no-peep-return
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13508,6 +14184,8 @@
 \series bold
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13553,6 +14231,8 @@
 
 -opt-code-speed
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13576,8 +14256,8 @@
 
 
 \series default
- The compiler will optimize code generation towards fast code, possibly
- at the expense of code size.
+ The compiler will optimize code generation towards fast code,
+ possibly at the expense of code size.
 \end_layout
 
 \begin_layout Labeling
@@ -13599,6 +14279,8 @@
 
 -opt-code-size
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13622,8 +14304,8 @@
 
 
 \series default
- The compiler will optimize code generation towards compact code, possibly
- at the expense of code speed.
+ The compiler will optimize code generation towards compact code,
+ possibly at the expense of code speed.
 \end_layout
 
 \begin_layout Labeling
@@ -13647,6 +14329,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13669,8 +14353,7 @@
 \end_inset
 
  Frame pointer will be omitted when the function uses no local variables.
- On the z80-related ports this option will result in the frame pointer always
- being omitted.
+ On the z80-related ports this option will result in the frame pointer always being omitted.
 \end_layout
 
 \begin_layout Labeling
@@ -13694,6 +14377,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -13715,14 +14400,13 @@
 
 \end_inset
 
- Setting this to a high value will result in increased compilation time
- (and increased memory use during compilation) and more optimized code being
- generated.
- Setting it to lower values speeds up compilation, but does not optimize
- as much.
+ Setting this to a high value will result in increased compilation time (and increased memory use during compilation) and more optimized code being generated.
+ Setting it to lower values speeds up compilation,
+ but does not optimize as much.
  The default value is 3000.
- This option currently does not affect the mcs51, ds390, pic14 and pic16
- ports.
+ This option currently does not affect the mcs51,
+ ds390,
+ pic14 and pic16 ports.
 \end_layout
 
 \begin_layout Labeling
@@ -13746,6 +14430,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -13768,8 +14454,8 @@
 \end_inset
 
  Disable lospre.
- lospre is an advanced redundancy elimination technique, essentially an
- improved variant of global subexpression elimination.
+ lospre is an advanced redundancy elimination technique,
+ essentially an improved variant of global subexpression elimination.
 \end_layout
 
 \begin_layout Labeling
@@ -13793,6 +14479,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -13815,9 +14503,9 @@
 \end_inset
 
  Allow optimizations to generate unsafe reads.
- This will enable additional optimizations, but can result in spurious reads
- from undefined memory addresses, which can be harmful if the target system
- uses certain ways of doing memory-mapped I/O.
+ This will enable additional optimizations,
+ but can result in spurious reads from undefined memory addresses,
+ which can be harmful if the target system uses certain ways of doing memory-mapped I/O.
 \end_layout
 
 \begin_layout Labeling
@@ -13841,6 +14529,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -13868,6 +14558,8 @@
 \begin_layout Subsection
 Other Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13902,6 +14594,8 @@
 
 -version
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13925,6 +14619,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13961,6 +14657,8 @@
 
 -compile-only
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13984,6 +14682,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -13994,7 +14694,8 @@
 
 
 \series default
- will compile and assemble the source, but will not call the linkage editor.
+ will compile and assemble the source,
+ but will not call the linkage editor.
 \end_layout
 
 \begin_layout Labeling
@@ -14020,6 +14721,8 @@
 \series bold
 -c1mode
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14053,6 +14756,8 @@
 \series bold
 -E
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14065,6 +14770,8 @@
 \series default
  Run only the C preprocessor
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14074,8 +14781,7 @@
 \end_inset
 
 .
- Preprocess all the C source files specified and output the results to standard
- output.
+ Preprocess all the C source files specified and output the results to standard output.
 \end_layout
 
 \begin_layout Labeling
@@ -14097,6 +14803,8 @@
 
 -syntax-only
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14123,7 +14831,8 @@
 \size large
  
 \size default
-Parse and verify syntax only, no output files are produced.
+Parse and verify syntax only,
+ no output files are produced.
 \end_layout
 
 \begin_layout Labeling
@@ -14136,6 +14845,8 @@
 
 <path/file>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14146,14 +14857,15 @@
 
 
 \series default
- The output path where everything will be placed or the file name used for
- all generated output files.
- If the parameter is a path, it must have a trailing slash (or backslash
- for the Windows binaries) to be recognized as a path.
- Note for Windows users: if the path contains spaces, it should be surrounded
- by quotes.
- The trailing backslash should be doubled in order to prevent escaping the
- final quote, for example: 
+ The output path where everything will be placed or the file name used for all generated output files.
+ If the parameter is a path,
+ it must have a trailing slash (or backslash for the Windows binaries) to be recognized as a path.
+ Note for Windows users:
+ if the path contains spaces,
+ it should be surrounded by quotes.
+ The trailing backslash should be doubled in order to prevent escaping the final quote,
+ for example:
+ 
 \emph on
 -o 
 \begin_inset Quotes sld
@@ -14175,7 +14887,9 @@
 
 
 \emph default
- or put after the final quote, for example: 
+ or put after the final quote,
+ for example:
+ 
 \emph on
 -o 
 \begin_inset Quotes sld
@@ -14196,7 +14910,8 @@
 
 \emph default
 .
- The path using slashes for directory delimiters can be used too, for example:
+ The path using slashes for directory delimiters can be used too,
+ for example:
  
 \emph on
 -o 
@@ -14222,6 +14937,8 @@
 
 <type>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14232,8 +14949,7 @@
 
 
 \series default
- The specified type overrides the file type that SDCC detected based on
- the file name extension.
+ The specified type overrides the file type that SDCC detected based on the file name extension.
  The currently supported options are 
 \begin_inset Quotes sld
 \end_inset
@@ -14242,7 +14958,8 @@
 \begin_inset Quotes srd
 \end_inset
 
-, 
+,
+ 
 \begin_inset Quotes sld
 \end_inset
 
@@ -14289,6 +15006,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14321,6 +15040,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14329,9 +15050,12 @@
 
 \end_inset
 
-, i.e.
+,
+ i.e.
  the parameters and local variables will be allocated on the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14345,12 +15069,12 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Parameters-and-Local-Variables"
+nolink "false"
 
 \end_inset
 
  Parameters and Local Variables for more details.
- If this option is used all source files in the project should be compiled
- with this option.
+ If this option is used all source files in the project should be compiled with this option.
  It automatically implies -
 \series bold
 
@@ -14407,6 +15131,8 @@
 
 -callee-saves
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14438,16 +15164,16 @@
 function1[,function2][,function3]....
 
 \series default
- The compiler by default uses a caller saves convention for register saving
- across function calls, however this can cause unnecessary register pushing
- and popping when calling small functions from larger functions.
- This option can be used to switch the register saving convention for the
- function names specified.
- The compiler will not save registers when calling these functions, no extra
- code will be generated at the entry and exit (function prologue
+ The compiler by default uses a caller saves convention for register saving across function calls,
+ however this can cause unnecessary register pushing and popping when calling small functions from larger functions.
+ This option can be used to switch the register saving convention for the function names specified.
+ The compiler will not save registers when calling these functions,
+ no extra code will be generated at the entry and exit (function prologue
 \series bold
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14462,6 +15188,8 @@
 \series bold
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14473,15 +15201,11 @@
 
 \series default
 ) for these functions to save and restore the registers used by these functions,
- this can SUBSTANTIALLY reduce code and improve run time performance of
- the generated code.
- In the future the compiler (with inter procedural analysis) will be able
- to determine the appropriate scheme to use for each function call.
- DO NOT use this option for built-in functions such as _mulint..., if this
- option is used for a library function the appropriate library function
- needs to be recompiled with the same option.
- If the project consists of multiple source files then all the source file
- should be compiled with the same -
+ this can SUBSTANTIALLY reduce code and improve run time performance of the generated code.
+ In the future the compiler (with inter procedural analysis) will be able to determine the appropriate scheme to use for each function call.
+ DO NOT use this option for built-in functions such as _mulint...,
+ if this option is used for a library function the appropriate library function needs to be recompiled with the same option.
+ If the project consists of multiple source files then all the source file should be compiled with the same -
 \begin_inset ERT
 status collapsed
 
@@ -14501,6 +15225,8 @@
 
 callee_saves 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14538,6 +15264,7 @@
 \begin_inset CommandInset ref
 LatexCommand vpageref
 reference "ite:callee_saves-function1[,function2[,function3...]]--"
+nolink "false"
 
 \end_inset
 
@@ -14563,6 +15290,8 @@
 
 -all-callee-saves
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14621,6 +15350,8 @@
 
 -debug
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14645,22 +15376,25 @@
  
 \series default
 When this option is used the compiler will generate debug information.
- By default, the debug information collected in a file with .cdb extension
- can be used with the SDCDB.
+ By default,
+ the debug information collected in a file with .cdb extension can be used with the SDCDB.
  For more information see documentation for SDCDB.
- Another file with a .omf extension contains debug information in AOMF or
- AOMF51
+ Another file with a .omf extension contains debug information in AOMF or AOMF51
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-AOMF, AOMF51
+AOMF,
+ AOMF51
 \end_layout
 
 \end_inset
 
  format which is commonly used by third party tools.
- When –out-gmt-elf is used, the debug information is in DWARF format instead.
+ When –out-gmt-elf is used,
+ the debug information is in DWARF format instead.
 \end_layout
 
 \begin_layout Labeling
@@ -14669,6 +15403,8 @@
 \series bold
 -S
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14682,7 +15418,8 @@
 \size large
  
 \size default
-Stop after the stage of compilation proper; do not assemble.
+Stop after the stage of compilation proper;
+ do not assemble.
  The output is an assembler code file for the input file specified.
 \end_layout
 
@@ -14705,6 +15442,8 @@
 
 -int-long-reent
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14752,6 +15491,8 @@
 
 -cyclomatic
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14775,18 +15516,19 @@
 
  
 \series default
-This option will cause the compiler to generate an information message for
- each function in the source file.
+This option will cause the compiler to generate an information message for each function in the source file.
  The message contains some 
 \emph on
 important
 \emph default
  information about the function.
- The number of edges and nodes the compiler detected in the control flow
- graph of the function, and most importantly the 
+ The number of edges and nodes the compiler detected in the control flow graph of the function,
+ and most importantly the 
 \emph on
 cyclomatic complexity
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14819,6 +15561,8 @@
 
 -float-reent
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14844,6 +15588,8 @@
 \series default
  Floating point library is compiled as reentrant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14875,6 +15621,8 @@
 
 -fsigned-char
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -14903,7 +15651,8 @@
 unsigned
 \family default
 .
- To set the signedness for characters to signed, use the option -
+ To set the signedness for characters to signed,
+ use the option -
 \series bold
 
 \begin_inset ERT
@@ -14945,6 +15694,8 @@
 
 -nostdinc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -14968,8 +15719,7 @@
 
 
 \series default
- This will prevent the compiler from passing on the default include path
- to the preprocessor.
+ This will prevent the compiler from passing on the default include path to the preprocessor.
 \end_layout
 
 \begin_layout Labeling
@@ -14991,6 +15741,8 @@
 
 -nostdlib
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15016,6 +15768,8 @@
 \series default
  This will prevent the compiler from passing on the default library
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15046,6 +15800,8 @@
 
 -verbose
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15078,6 +15834,8 @@
 \series bold
 -V
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15110,6 +15868,8 @@
 
 -no-c-code-in-asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15133,8 +15893,8 @@
 
 
 \series default
- Hides your ugly and inefficient c-code from the asm file, so you can always
- blame the compiler :)
+ Hides your ugly and inefficient c-code from the asm file,
+ so you can always blame the compiler :)
 \end_layout
 
 \begin_layout Labeling
@@ -15156,6 +15916,8 @@
 
 -no-peep-comments
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15218,6 +15980,8 @@
 
 -i-code-in-asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15264,6 +16028,8 @@
 
 -less-pedantic
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15274,6 +16040,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15306,6 +16074,8 @@
 
  Disable some of the more pedantic warnings
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15315,10 +16085,12 @@
 \end_inset
 
 .
- For more details, see the less_pedantic pragma 
+ For more details,
+ see the less_pedantic pragma 
 \begin_inset CommandInset ref
 LatexCommand vpageref
 reference "ite:less_pedantic"
+nolink "false"
 
 \end_inset
 
@@ -15348,6 +16120,8 @@
 
 <nnnn>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15393,6 +16167,8 @@
 
 -Werror
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15438,6 +16214,8 @@
 
 -print-search-dirs
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15483,6 +16261,8 @@
 
 -vc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15506,9 +16286,11 @@
 
 
 \series default
- Display errors and warnings using MSVC style, so you can use SDCC with
- the visual studio IDE
+ Display errors and warnings using MSVC style,
+ so you can use SDCC with the visual studio IDE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15520,6 +16302,8 @@
 .
  With SDCC both offering a GCC-like (the default) and a MSVC-like
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15528,8 +16312,8 @@
 
 \end_inset
 
- output style, integration into most programming editors should be straightforwa
-rd.
+ output style,
+ integration into most programming editors should be straightforward.
 \end_layout
 
 \begin_layout Labeling
@@ -15551,6 +16335,8 @@
 
 -use-stdout
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15589,6 +16375,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15600,6 +16388,8 @@
 ...
  Pass the asmOption to the assembler
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15610,6 +16400,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15642,7 +16434,8 @@
 -std-<arg>
 \series default
  Determine the language standard.
- For enhanced compatibility with other compilers, 
+ For enhanced compatibility with other compilers,
+ 
 \series bold
 -
 \begin_inset ERT
@@ -15677,11 +16470,13 @@
 
 \series default
  (whitespace) as delimiter.
- The language standard, specified via 
+ The language standard,
+ specified via 
 \series bold
 <arg>
 \series default
-, can be one of the following:
+,
+ can be one of the following:
 \end_layout
 
 \begin_deeper
@@ -15691,6 +16486,8 @@
 \series bold
 c89 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15715,11 +16512,13 @@
 
 \series default
  Follow the ANSI C89 / ISO C90 standard.
- Alternative spellings: 
+ Alternative spellings:
+ 
 \series bold
 c90
 \series default
-, 
+,
+ 
 \series bold
 iso9899:1990
 \end_layout
@@ -15730,6 +16529,8 @@
 \series bold
 c95 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15754,7 +16555,8 @@
 
 \series default
  Follow the ISO C90 standard as modified in amendment 1.
- Alternative spelling: 
+ Alternative spelling:
+ 
 \series bold
 iso9899:199409
 \end_layout
@@ -15765,6 +16567,8 @@
 \series bold
 c99 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15789,7 +16593,8 @@
 
 \series default
  Follow the ISO C99 standard.
- Alternative spelling: 
+ Alternative spelling:
+ 
 \series bold
 iso9899:1999
 \end_layout
@@ -15800,6 +16605,8 @@
 \series bold
 c11 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15824,7 +16631,8 @@
 
 \series default
  Follow the ISO C11 standard.
- Alternative spelling: 
+ Alternative spelling:
+ 
 \series bold
 iso9899:2011
 \end_layout
@@ -15835,6 +16643,8 @@
 \series bold
 c17 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15859,15 +16669,18 @@
 
 \series default
  Follow the ISO C17 standard.
- Alternative spellings: 
+ Alternative spellings:
+ 
 \series bold
 iso9899:2017
 \series default
-, 
+,
+ 
 \series bold
 c18
 \series default
-, 
+,
+ 
 \series bold
 iso9899:2018
 \end_layout
@@ -15878,6 +16691,8 @@
 \series bold
 c23 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -15902,7 +16717,8 @@
 
 \series default
  Follow the ISO C23 standard.
- Alternative spelling: 
+ Alternative spelling:
+ 
 \series bold
 c2x
 \end_layout
@@ -15913,6 +16729,8 @@
 \series bold
 sdcc89 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15936,9 +16754,10 @@
 
 
 \series default
- Generally follow the ANSI C89 / ISO C90 standard, but allow some SDCC behaviour
- that conflicts with the standard.
- Alternative spelling: 
+ Generally follow the ANSI C89 / ISO C90 standard,
+ but allow some SDCC behaviour that conflicts with the standard.
+ Alternative spelling:
+ 
 \series bold
 sdcc90
 \end_layout
@@ -15949,6 +16768,8 @@
 \series bold
 sdcc99 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -15972,8 +16793,8 @@
 
 
 \series default
- Generally follow the ISO C99 standard, but allow some SDCC behaviour that
- conflicts with the standard.
+ Generally follow the ISO C99 standard,
+ but allow some SDCC behaviour that conflicts with the standard.
 \end_layout
 
 \begin_layout Labeling
@@ -15982,6 +16803,8 @@
 \series bold
 sdcc11 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16005,8 +16828,8 @@
 
 
 \series default
- Generally follow the ISO C11 standard, but allow some SDCC behaviour that
- conflicts with the standard (default).
+ Generally follow the ISO C11 standard,
+ but allow some SDCC behaviour that conflicts with the standard (default).
 \end_layout
 
 \begin_layout Labeling
@@ -16015,6 +16838,8 @@
 \series bold
 sdcc17 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16038,9 +16863,10 @@
 
 
 \series default
- Generally follow the ISO C17 standard, but allow some SDCC behaviour that
- conflicts with the standard.
- Alternative spelling: 
+ Generally follow the ISO C17 standard,
+ but allow some SDCC behaviour that conflicts with the standard.
+ Alternative spelling:
+ 
 \series bold
 sdcc18
 \end_layout
@@ -16051,6 +16877,8 @@
 \series bold
 sdcc23 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -16074,9 +16902,10 @@
 
 
 \series default
- Generally follow the ISO C23 standard, but allow some SDCC behaviour that
- conflicts with the standard.
- Alternative spelling: 
+ Generally follow the ISO C23 standard,
+ but allow some SDCC behaviour that conflicts with the standard.
+ Alternative spelling:
+ 
 \series bold
 sdcc2x
 \end_layout
@@ -16103,6 +16932,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16137,6 +16968,8 @@
 
 <Name> The name to be used for the code
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16145,12 +16978,10 @@
 
 \end_inset
 
- segment, default CSEG.
- This is useful if you need to tell the compiler to put the code in a special
- segment so you can later on tell the linker to put this segment in a special
- place in memory.
- Can be used for instance when using bank switching to put the code in a
- bank.
+ segment,
+ default CSEG.
+ This is useful if you need to tell the compiler to put the code in a special segment so you can later on tell the linker to put this segment in a special place in memory.
+ Can be used for instance when using bank switching to put the code in a bank.
 \end_layout
 
 \begin_layout Labeling
@@ -16174,6 +17005,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16201,6 +17034,8 @@
 
 <Name> The name to be used for the const
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16209,12 +17044,10 @@
 
 \end_inset
 
- segment, default CONST.
- This is useful if you need to tell the compiler to put the const data in
- a special segment so you can later on tell the linker to put this segment
- in a special place in memory.
- Can be used for instance when using bank switching to put the const data
- in a bank.
+ segment,
+ default CONST.
+ This is useful if you need to tell the compiler to put the const data in a special segment so you can later on tell the linker to put this segment in a special place in memory.
+ Can be used for instance when using bank switching to put the const data in a bank.
 \end_layout
 
 \begin_layout Labeling
@@ -16236,6 +17069,8 @@
 
 -fdollars-in-identifiers
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16283,6 +17118,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16306,6 +17143,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16324,8 +17163,7 @@
 \emph on
 more
 \emph default
- warnings you can use a separate tool dedicated to syntax checking like
- splint
+ warnings you can use a separate tool dedicated to syntax checking like splint
 \begin_inset CommandInset label
 LatexCommand label
 name "lyx:more-pedantic-SPLINT"
@@ -16334,6 +17172,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16354,13 +17194,14 @@
 \end_inset
 
 .
- To make your source files parseable by splint you will have to include
- 
+ To make your source files parseable by splint you will have to include 
 \family sans
 lint.h
 \family default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16426,8 +17267,8 @@
 \end_inset
 
  and it's capabilities go beyond pure syntax checking.
- You'll need to tell splint the location of SDCC's include files so a typical
- command line could look like this: 
+ You'll need to tell splint the location of SDCC's include files so a typical command line could look like this:
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -16473,6 +17314,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16501,11 +17344,12 @@
 
 \end_inset
 
- Search / include non-free licensed libraries and header files, located
- under the non-free directory - see section 
+ Search / include non-free licensed libraries and header files,
+ located under the non-free directory - see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Search-Paths"
+nolink "false"
 
 \end_inset
 
@@ -16515,6 +17359,8 @@
 \begin_layout Subsection
 Linker Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16525,6 +17371,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16559,6 +17407,8 @@
 \series bold
 -lib-path
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16586,9 +17436,10 @@
 \begin_inset space ~
 \end_inset
 
-<absolute path to additional libraries> This option is passed to the linkage
- editor's additional libraries
+<absolute path to additional libraries> This option is passed to the linkage editor's additional libraries
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16613,6 +17464,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16651,6 +17504,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16678,6 +17533,8 @@
 
 <Value> The start location of the external ram
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -16706,13 +17563,17 @@
 
 \end_inset
 
-xdata (mcs51, ds390 named address space)
+xdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
-, default value is 0.
- The value entered can be in Hexadecimal or Decimal format, e.g.: -
+,
+ default value is 0.
+ The value entered can be in Hexadecimal or Decimal format,
+ e.g.:
+ -
 \begin_inset ERT
 status collapsed
 
@@ -16762,6 +17623,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16789,6 +17652,8 @@
 
 <Value> The start location of the code
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -16797,9 +17662,12 @@
 
 \end_inset
 
- segment, default value 0.
+ segment,
+ default value 0.
  Note when this option is used the interrupt vector table
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16809,7 +17677,9 @@
 \end_inset
 
  is also relocated to the given address.
- The value entered can be in Hexadecimal or Decimal format, e.g.: -
+ The value entered can be in Hexadecimal or Decimal format,
+ e.g.:
+ -
 \begin_inset ERT
 status collapsed
 
@@ -16859,6 +17729,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16884,7 +17756,8 @@
 \begin_inset space ~
 \end_inset
 
-<Value> The value entered can be in Hexadecimal or Decimal format, e.g.
+<Value> The value entered can be in Hexadecimal or Decimal format,
+ e.g.
  -
 \begin_inset ERT
 status collapsed
@@ -16916,11 +17789,11 @@
 
 \begin_deeper
 \begin_layout Standard
-For stm8, by default the stack is placed at the device-specific reset value.
- By using this option, the stack can be placed anywhere in the lower 16-bits
- of the stm8 memory space.
- This is particularly useful for working around the stack roll-over antifeature
- present in some stm8 devices.
+For stm8,
+ by default the stack is placed at the device-specific reset value.
+ By using this option,
+ the stack can be placed anywhere in the lower 16-bits of the stm8 memory space.
+ This is particularly useful for working around the stack roll-over antifeature present in some stm8 devices.
 \end_layout
 
 \end_deeper
@@ -16945,6 +17818,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16972,6 +17847,8 @@
 
 <Value> By default the external stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -16982,6 +17859,8 @@
 
  is placed after the __pdata
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17010,15 +17889,16 @@
 
 \end_inset
 
-pdata (mcs51, ds390 named address space)
+pdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
  segment.
- Using this option the xstack can be placed anywhere in the external memory
- space of the 8051.
- The value entered can be in Hexadecimal or Decimal format, e.g.
+ Using this option the xstack can be placed anywhere in the external memory space of the 8051.
+ The value entered can be in Hexadecimal or Decimal format,
+ e.g.
  -
 \begin_inset ERT
 status collapsed
@@ -17046,8 +17926,7 @@
 \end_inset
 
 -xstack-loc 32768.
- The provided value should not overlap any other memory areas such as the
- pdata or xdata segment and with enough space for the current application.
+ The provided value should not overlap any other memory areas such as the pdata or xdata segment and with enough space for the current application.
 \end_layout
 
 \begin_layout Labeling
@@ -17071,6 +17950,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17098,6 +17979,8 @@
 
 <Value> The start location of the internal ram data
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -17126,13 +18009,15 @@
 
 \end_inset
 
-data (mcs51, ds390 named address space)
+data (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
  segment.
- The value entered can be in Hexadecimal or Decimal format, eg.
+ The value entered can be in Hexadecimal or Decimal format,
+ eg.
  -
 \begin_inset ERT
 status collapsed
@@ -17160,11 +18045,12 @@
 \end_inset
 
 -data-loc 32.
- (By default, the start location of the internal ram data segment  is set
- as low as possible in memory, taking into account the used register banks
- and the bit segment at address 0x20.
- For example if register banks 0 and 1 are used without bit variables, the
- data segment will be set, if -
+ (By default,
+ the start location of the internal ram data segment  is set as low as possible in memory,
+ taking into account the used register banks and the bit segment at address 0x20.
+ For example if register banks 0 and 1 are used without bit variables,
+ the data segment will be set,
+ if -
 \begin_inset ERT
 status collapsed
 
@@ -17177,7 +18063,8 @@
 
 \end_inset
 
--data-loc is not used, to location 0x10.)
+-data-loc is not used,
+ to location 0x10.)
 \end_layout
 
 \begin_layout Labeling
@@ -17201,6 +18088,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17228,6 +18117,8 @@
 
 <Value> The start location of the indirectly addressable internal ram
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -17256,13 +18147,16 @@
 
 \end_inset
 
-idata (mcs51, ds390 named address space)
+idata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
- of the 8051, default value is 0x80.
- The value entered can be in Hexadecimal or Decimal format, eg.
+ of the 8051,
+ default value is 0x80.
+ The value entered can be in Hexadecimal or Decimal format,
+ eg.
  -
 \begin_inset ERT
 status collapsed
@@ -17317,6 +18211,8 @@
 
 <Value> The start location of the bit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17331,7 +18227,8 @@
 not
 \emph default
  implemented yet.
- Instead an option can be passed directly to the linker: -Wl
+ Instead an option can be passed directly to the linker:
+ -Wl
 \begin_inset space ~
 \end_inset
 
@@ -17357,6 +18254,8 @@
 
 -out-fmt-ihx
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17382,6 +18281,8 @@
 \series default
 The linker output (final object code) is in Intel Hex format.
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17393,10 +18294,14 @@
  This is the default option.
  The format itself is documented in the documentation of srecord
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-srecord (bin, hex, ...
+srecord (bin,
+ hex,
+ ...
  tool)
 \end_layout
 
@@ -17424,6 +18329,8 @@
 
 -out-fmt-s19
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17449,6 +18356,8 @@
 \series default
 The linker output (final object code) is in Motorola S19 format
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17480,6 +18389,8 @@
 
 -out-fmt-elf
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17503,6 +18414,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17528,6 +18441,8 @@
 \series default
 The linker output (final object code) is in ELF format
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17539,6 +18454,8 @@
 .
  (Currently only supported for the HC08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17547,8 +18464,10 @@
 
 \end_inset
 
-, S08 and STM8 processors).
- When used with –debug, the debug info is in DWARF format instead of CDB.
+,
+ S08 and STM8 processors).
+ When used with –debug,
+ the debug info is in DWARF format instead of CDB.
 \end_layout
 
 \begin_layout Labeling
@@ -17563,6 +18482,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17599,6 +18520,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Pragmas"
+nolink "false"
 
 \end_inset
 
@@ -17609,6 +18531,8 @@
 \begin_layout Subsection
 MCS51 Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17619,6 +18543,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17649,6 +18575,8 @@
 
 -model-small
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17675,8 +18603,8 @@
 \size large
  
 \size default
-Generate code for Small model programs, see section Memory Models for more
- details.
+Generate code for Small model programs,
+ see section Memory Models for more details.
  This is the default model.
 \end_layout
 
@@ -17699,6 +18627,8 @@
 
 -model-medium
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17722,10 +18652,9 @@
 
 
 \series default
- Generate code for Medium model programs, see section Memory Models for
- more details.
- If this option is used all source files in the project have to be compiled
- with this option.
+ Generate code for Medium model programs,
+ see section Memory Models for more details.
+ If this option is used all source files in the project have to be compiled with this option.
  It must also be used when invoking the linker.
 \end_layout
 
@@ -17748,6 +18677,8 @@
 
 -model-large
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17771,10 +18702,9 @@
 
 
 \series default
- Generate code for Large model programs, see section Memory Models for more
- details.
- If this option is used all source files in the project have to be compiled
- with this option.
+ Generate code for Large model programs,
+ see section Memory Models for more details.
+ If this option is used all source files in the project have to be compiled with this option.
  It must also be used when invoking the linker.
 \end_layout
 
@@ -17797,6 +18727,8 @@
 
 -model-huge
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17820,10 +18752,9 @@
 
 
 \series default
- Generate code for Huge model programs, see section Memory Models for more
- details.
- If this option is used all source files in the project have to be compiled
- with this option.
+ Generate code for Huge model programs,
+ see section Memory Models for more details.
+ If this option is used all source files in the project have to be compiled with this option.
  It must also be used when invoking the linker.
 \end_layout
 
@@ -17846,6 +18777,8 @@
 
 -xstack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17871,6 +18804,8 @@
 \series default
  Uses a pseudo stack in the __pdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -17899,17 +18834,18 @@
 
 \end_inset
 
-pdata (mcs51, ds390 named address space)
+pdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
- area (usually the first 256 bytes in the external ram) for allocating variables
- and passing parameters.
+ area (usually the first 256 bytes in the external ram) for allocating variables and passing parameters.
  See section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:External-Stack"
+nolink "false"
 
 \end_inset
 
@@ -17945,6 +18881,8 @@
 
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -17966,8 +18904,7 @@
 
 \end_inset
 
- Causes the linker to check if the internal ram usage is within limits of
- the given value.
+ Causes the linker to check if the internal ram usage is within limits of the given value.
 \end_layout
 
 \begin_layout Labeling
@@ -17995,6 +18932,8 @@
 
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18016,8 +18955,7 @@
 
 \end_inset
 
- Causes the linker to check if the external ram usage is within limits of
- the given value.
+ Causes the linker to check if the external ram usage is within limits of the given value.
 \end_layout
 
 \begin_layout Labeling
@@ -18045,6 +18983,8 @@
 
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18066,8 +19006,7 @@
 
 \end_inset
 
- Causes the linker to check if the code memory usage is within limits of
- the given value.
+ Causes the linker to check if the code memory usage is within limits of the given value.
 \end_layout
 
 \begin_layout Labeling
@@ -18095,6 +19034,8 @@
 
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18144,6 +19085,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18165,11 +19108,9 @@
 
 \end_inset
 
- Replaces the three byte instructions lcall/ljmp with the two byte instructions
- acall/ajmp.
+ Replaces the three byte instructions lcall/ljmp with the two byte instructions acall/ajmp.
  Only use this option if your code is in the same 2k block of memory.
- You may need to use this option for some 8051 derivatives which lack the
- lcall/ljmp instructions.
+ You may need to use this option for some 8051 derivatives which lack the lcall/ljmp instructions.
 \end_layout
 
 \begin_layout Labeling
@@ -18197,6 +19138,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18218,11 +19161,11 @@
 
 \end_inset
 
- Causes the code generator to insert an extra lcall or acall instruction
- whenever it needs to use a ret instruction in a context other than a function
- returning.
+ Causes the code generator to insert an extra lcall or acall instruction whenever it needs to use a ret instruction in a context other than a function returning.
  This option is needed when using the Infineon
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18237,6 +19180,8 @@
 \begin_layout Subsection
 DS390 / DS400 Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18247,6 +19192,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18279,6 +19226,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18305,8 +19254,7 @@
  
 \size default
 Generate 24-bit flat mode code.
- This is the one and only that the ds390 code generator supports right now
- and is default when using 
+ This is the one and only that the ds390 code generator supports right now and is default when using 
 \emph on
 -mds390
 \emph default
@@ -18333,6 +19281,8 @@
 
 -protect-sp-update
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18380,6 +19330,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18402,25 +19354,23 @@
 \end_inset
 
  Generate code for the 10 bit stack mode of the Dallas DS80C390 part.
- This is the one and only that the ds390 code generator supports right now
- and is default when using 
+ This is the one and only that the ds390 code generator supports right now and is default when using 
 \emph on
 -mds390
 \emph default
 .
- In this mode, the stack is located in the lower 1K of the internal RAM,
+ In this mode,
+ the stack is located in the lower 1K of the internal RAM,
  which is mapped to 0x400000.
- Note that the support is incomplete, since it still uses a single byte
- as the stack pointer.
- This means that only the lower 256 bytes of the potential 1K stack space
- will actually be used.
- However, this does allow you to reclaim the precious 256 bytes of low RAM
- for use for the DATA and IDATA segments.
- The compiler will not generate any code to put the processor into 10 bit
- stack mode.
- It is important to ensure that the processor is in this mode before calling
- any re-entrant functions compiled with this option.
- In principle, this should work with the 
+ Note that the support is incomplete,
+ since it still uses a single byte as the stack pointer.
+ This means that only the lower 256 bytes of the potential 1K stack space will actually be used.
+ However,
+ this does allow you to reclaim the precious 256 bytes of low RAM for use for the DATA and IDATA segments.
+ The compiler will not generate any code to put the processor into 10 bit stack mode.
+ It is important to ensure that the processor is in this mode before calling any re-entrant functions compiled with this option.
+ In principle,
+ this should work with the 
 \emph on
 -
 \begin_inset ERT
@@ -18437,6 +19387,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18460,7 +19412,8 @@
 
 
 \emph default
- option, but that has not been tested.
+ option,
+ but that has not been tested.
  It is incompatible with the 
 \emph on
 -
@@ -18478,6 +19431,8 @@
 
 -xstack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18502,8 +19457,7 @@
 
 \emph default
  option.
- It also only makes sense if the processor is in 24 bit contiguous addressing
- mode (see the 
+ It also only makes sense if the processor is in 24 bit contiguous addressing mode (see the 
 \emph on
 -
 \begin_inset ERT
@@ -18570,6 +19524,8 @@
 
 -stack-probe
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18615,6 +19571,8 @@
 
 -tini-libid
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18661,6 +19619,8 @@
 
 -use-accelerator
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18689,7 +19649,12 @@
 \end_layout
 
 \begin_layout Subsection
-Options common to all z80-related ports (z80, z180, r2k, r3ka, sm83, tlcs90,
+Options common to all z80-related ports (z80,
+ z180,
+ r2k,
+ r3ka,
+ sm83,
+ tlcs90,
  ez80_z80)
 \end_layout
 
@@ -18714,6 +19679,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18735,7 +19702,8 @@
 
 \end_inset
 
- When linking, skip the standard crt0.rel object file.
+ When linking,
+ skip the standard crt0.rel object file.
  You must provide your own crt0.rel for your system when linking.
 \end_layout
 
@@ -18760,6 +19728,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18813,6 +19783,8 @@
 
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18862,6 +19834,8 @@
 
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18889,6 +19863,8 @@
 \begin_layout Subsection
 Z80 Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18899,6 +19875,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18907,7 +19885,12 @@
 
 \end_inset
 
- (apply to z80, z180, r2k, r3ka, tlcs90, ez80_z80)
+ (apply to z80,
+ z180,
+ r2k,
+ r3ka,
+ tlcs90,
+ ez80_z80)
 \end_layout
 
 \begin_layout Labeling
@@ -18931,6 +19914,8 @@
 \series default
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18976,6 +19961,8 @@
 \series default
 <Value>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -18997,7 +19984,9 @@
 
 \end_inset
 
- Define assembler name (<Value> is rgbds, sdasz80, isas or z80asm).
+ Define assembler name (<Value> is rgbds,
+ sdasz80,
+ isas or z80asm).
 \end_layout
 
 \begin_layout Labeling
@@ -19021,6 +20010,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19046,8 +20037,7 @@
 \size large
  
 \size default
-This option tells the compiler that it is not allowed to use register pair
- iy.
+This option tells the compiler that it is not allowed to use register pair iy.
  The option can be useful for systems where iy is reserved for the OS.
  This option is incompatible with -
 \begin_inset ERT
@@ -19086,6 +20076,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19117,6 +20109,8 @@
 \begin_layout Subsection
 SM83 Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19127,6 +20121,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19150,6 +20146,8 @@
 
 <Num>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19173,6 +20171,8 @@
 
 <Num>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19187,6 +20187,8 @@
 \begin_layout Subsection
 STM8 Options
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19197,6 +20199,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19227,6 +20231,8 @@
 
 -model-medium
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19250,8 +20256,8 @@
 
 
 \series default
- Generate code for Medium model programs, see section Memory Models for
- more details.
+ Generate code for Medium model programs,
+ see section Memory Models for more details.
  This is the default model.
 \end_layout
 
@@ -19274,6 +20280,8 @@
 
 -model-large
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19297,16 +20305,17 @@
 
 
 \series default
- Generate code for Large model programs, see section Memory Models for more
- details.
- If this option is used all source files in the project have to be compiled
- with this option.
+ Generate code for Large model programs,
+ see section Memory Models for more details.
+ If this option is used all source files in the project have to be compiled with this option.
  It must also be used when invoking the linker.
 \end_layout
 
 \begin_layout Subsection
 MOS6502 Options
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19317,6 +20326,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19325,7 +20336,8 @@
 
 \end_inset
 
- (apply to mos6502, mos65c02)
+ (apply to mos6502,
+ mos65c02)
 \end_layout
 
 \begin_layout Labeling
@@ -19347,6 +20359,8 @@
 
 -model-small
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19370,8 +20384,8 @@
 
 
 \series default
- Generate code for small model programs, see section Memory Models for more
- details.
+ Generate code for small model programs,
+ see section Memory Models for more details.
  
 \end_layout
 
@@ -19394,6 +20408,8 @@
 
 -model-large
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19417,8 +20433,8 @@
 
 
 \series default
- Generate code for large model programs, see section Memory Models for more
- details.
+ Generate code for large model programs,
+ see section Memory Models for more details.
  This is the default memory model.
 \end_layout
 
@@ -19441,6 +20457,8 @@
 
 -no-zp-spill
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -19464,10 +20482,9 @@
 
 
 \series default
- Force the compiler to spill registers to 16-bit addressable memory (xdata)
- instead of Page Zero.
- When running out of Page Zero space, this option will allow to free many
- Page Zero locations at the expense of slightly larger and slower code
+ Force the compiler to spill registers to 16-bit addressable memory (xdata) instead of Page Zero.
+ When running out of Page Zero space,
+ this option will allow to free many Page Zero locations at the expense of slightly larger and slower code
 \end_layout
 
 \begin_layout Subsection
@@ -19480,6 +20497,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19490,6 +20509,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19502,10 +20523,11 @@
 \end_layout
 
 \begin_layout Standard
-The following options are provided for the purpose of retargetting and debugging
- the compiler.
+The following options are provided for the purpose of retargetting and debugging the compiler.
  They provide a means to dump the intermediate code (iCode
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19514,12 +20536,12 @@
 
 \end_inset
 
-) generated by the compiler in human readable form at various stages of
- the compilation process.
+) generated by the compiler in human readable form at various stages of the compilation process.
  More on iCodes see chapter 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:The-anatomy-of"
+nolink "false"
 
 \end_inset
 
@@ -19553,6 +20575,8 @@
 
 -dum-ast
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19576,8 +20600,7 @@
 
 
 \series default
- This option will cause the compiler to dump the abstract syntax tree to
- the econsole.
+ This option will cause the compiler to dump the abstract syntax tree to the econsole.
 \end_layout
 
 \begin_layout Labeling
@@ -19599,6 +20622,8 @@
 
 -dump-i-code
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19651,6 +20676,8 @@
 
 -dump-graphs
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19678,9 +20705,9 @@
 \series default
 \size default
 Will dump internal representations as graphviz .dot files.
- Depending on other options, this can include the control-flow graph at
- lospre, insertion of bank selection instructions or register allocation
- and the conflict graph and tree-decomposition at register allocation.
+ Depending on other options,
+ this can include the control-flow graph at lospre,
+ insertion of bank selection instructions or register allocation and the conflict graph and tree-decomposition at register allocation.
 \end_layout
 
 \begin_layout Labeling
@@ -19702,6 +20729,8 @@
 
 -fverbose-asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19775,6 +20804,8 @@
 \series default
 use-stdout
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19797,9 +20828,9 @@
 \end_inset
 
 .
- Additionally, if you happen to have visual studio installed in your windows
- machine, you can use it to compile your sources using a custom build and
- the SDCC -
+ Additionally,
+ if you happen to have visual studio installed in your windows machine,
+ you can use it to compile your sources using a custom build and the SDCC -
 \emph on
 
 \begin_inset ERT
@@ -19818,6 +20849,8 @@
 \emph default
 -vc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19900,6 +20933,8 @@
 \begin_layout Section
 Environment variables
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19921,6 +20956,8 @@
 \series bold
 SDCC_LEAVE_SIGNALS
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19959,6 +20996,8 @@
 \series default
  SDCC installs a signal handler
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -19968,8 +21007,8 @@
 \end_inset
 
  to be able to delete temporary files after an user break (^C) or an exception.
- If this environment variable is set, SDCC won't install the signal handler
- in order to be able to debug SDCC.
+ If this environment variable is set,
+ SDCC won't install the signal handler in order to be able to debug SDCC.
 \end_layout
 
 \begin_layout Labeling
@@ -19986,20 +21025,25 @@
 
 TMPDIR
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-SDCC!Environment variables!TMP, TEMP, TMPDIR
+SDCC!Environment variables!TMP,
+ TEMP,
+ TMPDIR
 \end_layout
 
 \end_inset
 
 
 \series default
- Path, where temporary files will be created.
+ Path,
+ where temporary files will be created.
  The order of the variables is the search order.
- In a standard *nix environment these variables are not set, and there's
- no need to set them.
+ In a standard *nix environment these variables are not set,
+ and there's no need to set them.
  On Windows it's recommended to set one of them.
 \end_layout
 
@@ -20009,6 +21053,8 @@
 \series bold
 SDCC_HOME
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20032,10 +21078,12 @@
 
 
 \series default
- Path, see section 
+ Path,
+ see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Install-paths"
+nolink "false"
 
 \end_inset
 
@@ -20060,6 +21108,8 @@
 \series bold
 SDCC_INCLUDE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20083,10 +21133,12 @@
 
 
 \series default
- Path, see section 
+ Path,
+ see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Search-Paths"
+nolink "false"
 
 \end_inset
 
@@ -20111,6 +21163,8 @@
 \series bold
 SDCC_LIB
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20134,10 +21188,12 @@
 
 
 \series default
- Path, see section 
+ Path,
+ see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Search-Paths"
+nolink "false"
 
 \end_inset
 
@@ -20157,9 +21213,10 @@
 \end_layout
 
 \begin_layout Standard
-There are some more environment variables recognized by SDCC, but these
- are mainly used for debugging purposes.
- They can change or disappear very quickly, and won't be documented
+There are some more environment variables recognized by SDCC,
+ but these are mainly used for debugging purposes.
+ They can change or disappear very quickly,
+ and won't be documented
 \begin_inset Foot
 status collapsed
 
@@ -20181,6 +21238,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20198,17 +21257,13 @@
 
 \begin_layout Standard
 SDCC supports some language extensions useful for embedded systems.
- These include named address spaces (see also section 5.1 of the Embedded
- C standard).
- SDCC supports both intrinsic named address spaces (which ones are supported
- depends on the target architecture) and non-intrinsic named address spaces
- (defined by the user using the keyword __addressmod, they are particularly
- useful with custom bank-switching hardware).
- Unlike the Embedded C standard, SDCC allows local variables to have an
- intrinsic named address space even when not explicitly declared as static
- or extern.
- Depending on the target architecture, support can be limited to objects
- in such address spaces and exclude pointer-based access to those.
+ These include named address spaces (see also section 5.1 of the Embedded C standard).
+ SDCC supports both intrinsic named address spaces (which ones are supported depends on the target architecture) and non-intrinsic named address spaces (defined by the user using the keyword __addressmod,
+ they are particularly useful with custom bank-switching hardware).
+ Unlike the Embedded C standard,
+ SDCC allows local variables to have an intrinsic named address space even when not explicitly declared as static or extern.
+ Depending on the target architecture,
+ support can be limited to objects in such address spaces and exclude pointer-based access to those.
 \end_layout
 
 \begin_layout Subsection
@@ -20231,6 +21286,8 @@
 \begin_layout Subsubsection
 __data
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -20259,13 +21316,16 @@
 
 \end_inset
 
-data (mcs51, ds390 named address space)
+data (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
  / __near
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -20308,8 +21368,8 @@
 default
 \series default
  (generic) address space for the Small Memory model.
- Variables in this address space will be allocated in the directly addressable
- portion of the internal RAM of a 8051, e.g.:
+ Variables in this address space will be allocated in the directly addressable portion of the internal RAM of a 8051,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -20351,6 +21411,8 @@
 \begin_layout Subsubsection
 __xdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -20379,13 +21441,16 @@
 
 \end_inset
 
-xdata (mcs51, ds390 named address space)
+xdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
  / __far
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -20428,7 +21493,8 @@
 \series bold
 default
 \series default
- (generic) address space for the Large Memory model, e.g.:
+ (generic) address space for the Large Memory model,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -20554,6 +21620,8 @@
 \begin_layout Subsubsection
 __idata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -20582,7 +21650,8 @@
 
 \end_inset
 
-idata (mcs51, ds390 named address space)
+idata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
@@ -20591,8 +21660,8 @@
 \end_layout
 
 \begin_layout Standard
-Variables in this address space will be allocated into the indirectly addressabl
-e portion of the internal ram of a 8051, e.g.:
+Variables in this address space will be allocated into the indirectly addressable portion of the internal ram of a 8051,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -20692,12 +21761,14 @@
 \end_layout
 
 \begin_layout Standard
-Please note, the first 128 byte of idata physically access the same RAM
- as the data memory.
- The original 8051 had 128 byte idata memory, nowadays most devices have
- 256 byte idata memory.
+Please note,
+ the first 128 byte of idata physically access the same RAM as the data memory.
+ The original 8051 had 128 byte idata memory,
+ nowadays most devices have 256 byte idata memory.
  The stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20722,6 +21793,8 @@
 \begin_layout Subsubsection
 __pdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -20750,7 +21823,8 @@
 
 \end_inset
 
-pdata (mcs51, ds390 named address space)
+pdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
@@ -20759,14 +21833,15 @@
 \end_layout
 
 \begin_layout Standard
-Paged xdata access is just as straightforward as using the other addressing
- modes of a 8051.
- It is typically located at the start of xdata and has a maximum size of
- 256 bytes.
+Paged xdata access is just as straightforward as using the other addressing modes of a 8051.
+ It is typically located at the start of xdata and has a maximum size of 256 bytes.
  The following example writes 0x01 to the pdata variable.
- Please note, pdata access physically accesses xdata memory.
+ Please note,
+ pdata access physically accesses xdata memory.
  The high byte of the address is determined by port P2 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20780,6 +21855,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:MCS51-variants"
+nolink "false"
 
 \end_inset
 
@@ -20788,7 +21864,8 @@
 \series bold
 default
 \series default
- (generic) address space for the Medium Memory model, e.g.:
+ (generic) address space for the Medium Memory model,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -20915,6 +21992,8 @@
 
 -xstack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -20936,13 +22015,14 @@
 
 \end_inset
 
- option is used the pdata memory area is followed by the xstack memory area
- and the sum of their sizes is limited to 256 bytes.
+ option is used the pdata memory area is followed by the xstack memory area and the sum of their sizes is limited to 256 bytes.
 \end_layout
 
 \begin_layout Subsubsection
 __code
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -21102,12 +22182,12 @@
 \begin_layout Verse
 
 \family typewriter
-__code char test_array[] = {'c','h','e','a','p'}; 
+__code char test_array[] = {'c','h','e','a','p'};
+ 
 \end_layout
 
 \begin_layout Standard
-Read access to this array using an 8-bit unsigned index generates the assembly
- code:
+Read access to this array using an 8-bit unsigned index generates the assembly code:
 \end_layout
 
 \begin_layout Verse
@@ -21203,6 +22283,8 @@
 \begin_layout Subsubsection
 __bit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21241,8 +22323,9 @@
 
 \begin_layout Standard
 This is a data-type and an address space.
- When a variable is declared as a bit, it is allocated into the bit addressable
- memory of 8051, e.g.:
+ When a variable is declared as a bit,
+ it is allocated into the bit addressable memory of 8051,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -21294,14 +22377,14 @@
 \end_layout
 
 \begin_layout Standard
-The bit addressable memory consists of 128 bits which are located from 0x20
- to 0x2f in data memory.
+The bit addressable memory consists of 128 bits which are located from 0x20 to 0x2f in data memory.
 \begin_inset Newline newline
 \end_inset
 
-Apart from this 8051 specific intrinsic named address space most architectures
- support ANSI-C bit-fields
+Apart from this 8051 specific intrinsic named address space most architectures support ANSI-C bit-fields
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -21315,20 +22398,22 @@
 status collapsed
 
 \begin_layout Plain Layout
-Not really meant as examples, but nevertheless showing what bit-fields are
- about: device/include/mc68hc908qy.h and support/regression/tests/bitfields.c
+Not really meant as examples,
+ but nevertheless showing what bit-fields are about:
+ device/include/mc68hc908qy.h and support/regression/tests/bitfields.c
 \end_layout
 
 \end_inset
 
 .
- In accordance with ISO/IEC 9899 bits and bitfields without an explicit
- signed modifier are implemented as unsigned.
+ In accordance with ISO/IEC 9899 bits and bitfields without an explicit signed modifier are implemented as unsigned.
 \end_layout
 
 \begin_layout Subsubsection
 __sfr
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21364,6 +22449,8 @@
 
  / __sfr16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21399,6 +22486,8 @@
 
  / __sfr32
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21434,6 +22523,8 @@
 
  / __sbit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21446,12 +22537,13 @@
 \end_layout
 
 \begin_layout Standard
-Like the __bit keyword, 
+Like the __bit keyword,
+ 
 \emph on
 __sfr / __sfr16 / __sfr32 / __sbit
 \emph default
- signify both a data-type and named address space, they are used to describe
- the 
+ signify both a data-type and named address space,
+ they are used to describe the 
 \emph on
 s
 \emph default
@@ -21467,7 +22559,8 @@
 \emph on
 __bit
 \emph default
- variables of a 8051, eg:
+ variables of a 8051,
+ eg:
 \end_layout
 
 \begin_layout Verse
@@ -21475,6 +22568,8 @@
 \family typewriter
 __sfr __at
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21546,6 +22641,8 @@
 
 __sbit __at
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21585,6 +22682,8 @@
 
  /* CY (Carry Flag
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21595,6 +22694,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21607,8 +22708,8 @@
 \end_layout
 
 \begin_layout Standard
-Special function registers which are located on an address dividable by
- 8 are bit-addressable, an 
+Special function registers which are located on an address dividable by 8 are bit-addressable,
+ an 
 \emph on
 __sbit
 \emph default
@@ -21616,8 +22717,7 @@
 \begin_inset Newline newline
 \end_inset
 
-16 Bit and 32 bit special function register combinations which require a
- certain access order are better not declared using 
+16 Bit and 32 bit special function register combinations which require a certain access order are better not declared using 
 \emph on
 __sfr16
 \emph default
@@ -21635,9 +22735,8 @@
 \end_layout
 
 \begin_layout Standard
-Please note, if you use a header file which was written for another compiler
- then the __sfr / __sfr16 / __sfr32 / __sbit intrinsic named address spaces
- will most likely be 
+Please note,
+ if you use a header file which was written for another compiler then the __sfr / __sfr16 / __sfr32 / __sbit intrinsic named address spaces will most likely be 
 \emph on
 not
 \emph default
@@ -21669,6 +22768,8 @@
 \family typewriter
 compiler.h
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21681,6 +22782,8 @@
 \family default
  it is possible to write header files
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21691,6 +22794,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21703,6 +22808,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Porting-code-to-other-compilers"
+nolink "false"
 
 \end_inset
 
@@ -21713,6 +22819,8 @@
 \begin_layout Subsubsection
 Pointers
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21725,9 +22833,10 @@
 \end_layout
 
 \begin_layout Standard
-SDCC allows (via language extensions) pointers to explicitly point to any
- of the named address spaces
+SDCC allows (via language extensions) pointers to explicitly point to any of the named address spaces
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21737,8 +22846,8 @@
 \end_inset
 
  of the 8051.
- In addition to the explicit pointers, the compiler uses (by default) generic
- pointers which can be used to point to any of the memory spaces.
+ In addition to the explicit pointers,
+ the compiler uses (by default) generic pointers which can be used to point to any of the memory spaces.
 \begin_inset Newline newline
 \end_inset
 
@@ -21752,8 +22861,7 @@
 \begin_layout Verse
 
 \family typewriter
-/* pointer physically in internal ram pointing to object in external ram
- */
+/* pointer physically in internal ram pointing to object in external ram */
 \begin_inset Newline newline
 \end_inset
 
@@ -21765,8 +22873,7 @@
 \begin_inset Newline newline
 \end_inset
 
-/* pointer physically in external ram pointing to object in internal ram
- */
+/* pointer physically in external ram pointing to object in internal ram */
 \begin_inset Newline newline
 \end_inset
 
@@ -21828,6 +22935,8 @@
 
 /* the following is a function pointer
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21873,14 +22982,15 @@
 generic
 \emph default
  pointers contains the data space information.
- Assembler support routines are called whenever data is stored or retrieved
- using 
+ Assembler support routines are called whenever data is stored or retrieved using 
 \emph on
 generic
 \emph default
  pointers.
  These are useful for developing reusable library
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21892,6 +23002,8 @@
  routines.
  Explicitly specifying the pointer
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21906,6 +23018,8 @@
 \begin_layout Subsubsection
 Notes on MCS51 memory
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21918,8 +23032,7 @@
 \end_layout
 
 \begin_layout Standard
-The 8051 family of microcontrollers have a minimum of 128 bytes of internal
- RAM memory which is structured as follows:
+The 8051 family of microcontrollers have a minimum of 128 bytes of internal RAM memory which is structured as follows:
 \begin_inset Newline newline
 \end_inset
 
@@ -21933,6 +23046,8 @@
 
 - Bytes 20-2F - 16 bytes to hold 128 bit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -21953,13 +23068,16 @@
 \end_layout
 
 \begin_layout Standard
-Additionally some members of the MCS51 family may have up to 128 bytes of
- additional, indirectly addressable, internal RAM memory (
+Additionally some members of the MCS51 family may have up to 128 bytes of additional,
+ indirectly addressable,
+ internal RAM memory (
 \emph on
 __idata
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -21988,18 +23106,22 @@
 
 \end_inset
 
-idata (mcs51, ds390 named address space)
+idata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
 ).
- Furthermore, some chips may have some built in external memory (
+ Furthermore,
+ some chips may have some built in external memory (
 \emph on
 __xdata
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -22028,18 +23150,21 @@
 
 \end_inset
 
-xdata (mcs51, ds390 named address space)
+xdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
-) which should not be confused with the internal, directly addressable RAM
- memory (
+) which should not be confused with the internal,
+ directly addressable RAM memory (
 \emph on
 __data
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -22068,7 +23193,8 @@
 
 \end_inset
 
-data (mcs51, ds390 named address space)
+data (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
@@ -22078,12 +23204,12 @@
 \emph on
 __xdata
 \emph default
- memory has to be activated before using it (you can probably find this
- information on the datasheet of the microcontroller your are using, see
- also section 
+ memory has to be activated before using it (you can probably find this information on the datasheet of the microcontroller your are using,
+ see also section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:MCS51-Startup-Code"
+nolink "false"
 
 \end_inset
 
@@ -22097,16 +23223,19 @@
 \begin_layout Standard
 Normally SDCC will only use the first bank
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
-register bank (mcs51, ds390)
+register bank (mcs51,
+ ds390)
 \end_layout
 
 \end_inset
 
- of registers (register bank 0), but it is possible to specify that other
- banks of registers (keyword 
+ of registers (register bank 0),
+ but it is possible to specify that other banks of registers (keyword 
 \emph on
 __using
 \emph default
@@ -22114,6 +23243,8 @@
 \emph on
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22142,7 +23273,8 @@
 
 \end_inset
 
-using (mcs51, ds390 register bank)
+using (mcs51,
+ ds390 register bank)
 \end_layout
 
 \end_inset
@@ -22151,6 +23283,8 @@
 \emph default
 ) should be used for example in interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22161,6 +23295,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22195,17 +23331,20 @@
 \end_inset
 
  routines.
- By default, the compiler will place the stack after the last byte of allocated
- memory for variables.
- For example, if the first 2 banks of registers are used, and only four
- bytes are used for 
+ By default,
+ the compiler will place the stack after the last byte of allocated memory for variables.
+ For example,
+ if the first 2 banks of registers are used,
+ and only four bytes are used for 
 \emph on
 data
 \emph default
- variables, it will position the base of the internal stack at address 20
- (0x14).
+ variables,
+ it will position the base of the internal stack at address 20 (0x14).
  This implies that as the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22214,17 +23353,20 @@
 
 \end_inset
 
- grows, it will use up the remaining register banks, and the 16 bytes used
- by the 128 bit variables, and 80 bytes for general purpose use.
- If any bit variables are used, the data variables will be placed in unused
- register banks and after the byte holding the last bit variable.
- For example, if register banks 0 and 1 are used, and there are 9 bit variables
- (two bytes used), 
+ grows,
+ it will use up the remaining register banks,
+ and the 16 bytes used by the 128 bit variables,
+ and 80 bytes for general purpose use.
+ If any bit variables are used,
+ the data variables will be placed in unused register banks and after the byte holding the last bit variable.
+ For example,
+ if register banks 0 and 1 are used,
+ and there are 9 bit variables (two bytes used),
+ 
 \emph on
 data
 \emph default
- variables will be placed starting from address 0x10 to 0x20 and continue
- at address 0x22.
+ variables will be placed starting from address 0x10 to 0x20 and continue at address 0x22.
  You can also use -
 \begin_inset ERT
 status collapsed
@@ -22240,6 +23382,8 @@
 
 -data-loc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22280,6 +23424,8 @@
 
 -iram-size
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22318,8 +23464,7 @@
 \end_layout
 
 \begin_layout Standard
-By default the 8051 linker will place the stack after the last byte of (i)data
- variables.
+By default the 8051 linker will place the stack after the last byte of (i)data variables.
  Option -
 \begin_inset ERT
 status collapsed
@@ -22335,6 +23480,8 @@
 
 -stack-loc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22356,10 +23503,10 @@
 
 \end_inset
 
- allows you to specify the start of the stack, i.e.
+ allows you to specify the start of the stack,
+ i.e.
  you could start it after any data in the general purpose area.
- If your microcontroller has additional indirectly addressable internal
- RAM (
+ If your microcontroller has additional indirectly addressable internal RAM (
 \emph on
 idata
 \emph default
@@ -22379,6 +23526,8 @@
 
 -xdata-loc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22419,6 +23568,8 @@
 
 -xram-size
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22441,7 +23592,8 @@
 \end_inset
 
  to specify its size.
- Same goes for the code memory, using -
+ Same goes for the code memory,
+ using -
 \begin_inset ERT
 status collapsed
 
@@ -22456,6 +23608,8 @@
 
 -code-loc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22492,6 +23646,8 @@
 
 -code-size
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22514,14 +23670,18 @@
 \end_inset
 
 .
- If in doubt, don't specify any options and see if the resulting memory
- layout is appropriate, then you can adjust it.
+ If in doubt,
+ don't specify any options and see if the resulting memory layout is appropriate,
+ then you can adjust it.
 \end_layout
 
 \begin_layout Standard
 The linker generates two files with memory allocation information.
- The first, with extension .map
+ The first,
+ with extension .map
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22533,6 +23693,8 @@
  shows all the variables and segments.
  The second with extension .mem
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22542,11 +23704,11 @@
 \end_inset
 
  shows the final memory layout.
- The linker will complain either if memory segments overlap, there is not
- enough memory, or there is not enough space for stack.
- If you get any linking warnings and/or errors related to stack or segments
- allocation, take a look at either the .map or .mem files to find out what
- the problem is.
+ The linker will complain either if memory segments overlap,
+ there is not enough memory,
+ or there is not enough space for stack.
+ If you get any linking warnings and/or errors related to stack or segments allocation,
+ take a look at either the .map or .mem files to find out what the problem is.
  The .mem file may even suggest a solution to the problem.
 \end_layout
 
@@ -22557,6 +23719,8 @@
 \begin_layout Subsubsection
 __sfr
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22596,6 +23760,8 @@
 \begin_layout Standard
 The Z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22615,16 +23781,21 @@
 utput memory.
  I/O memory
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-I/O memory (Z80, Z180)
+I/O memory (Z80,
+ Z180)
 \end_layout
 
 \end_inset
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22635,6 +23806,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22643,7 +23816,8 @@
 
 \end_inset
 
- is accessed with special instructions, e.g.:
+ is accessed with special instructions,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -22725,6 +23899,8 @@
 \begin_layout Subsubsection
 __banked __sfr
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -22774,6 +23950,8 @@
 \family typewriter
 __sfr __banked __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -22807,7 +23985,8 @@
 
 \end_inset
 
-(0x123) IoPort; 
+(0x123) IoPort;
+ 
 \end_layout
 
 \begin_layout Standard
@@ -22891,6 +24070,8 @@
 \begin_layout Subsubsection
 __sfr
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22926,6 +24107,8 @@
 
  (in0/out0 to 8 bit addresses on Z180
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22936,6 +24119,8 @@
 
 /HD64180
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22963,6 +24148,8 @@
 
 -portmode
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -22990,6 +24177,8 @@
 
 portmode
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23011,8 +24200,7 @@
 
 \end_inset
 
- z180 (z80) is used to turn on (off) the Z180/HD64180 port addressing instructio
-ns 
+ z180 (z80) is used to turn on (off) the Z180/HD64180 port addressing instructions 
 \family typewriter
 in0/out0
 \family default
@@ -23031,6 +24219,8 @@
 \begin_layout Subsubsection
 __sfr
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23072,8 +24262,8 @@
 \emph on
 __sfr
 \emph default
- is an alternative way to access memory locations 0xff00 to 0xffff, which
- are typically used for memory-mapped I/O e.g.:
+ is an alternative way to access memory locations 0xff00 to 0xffff,
+ which are typically used for memory-mapped I/O e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -23081,6 +24271,8 @@
 \family typewriter
 __sfr __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23114,7 +24306,8 @@
 
 \end_inset
 
-(0xff01) IoPort; 
+(0xff01) IoPort;
+ 
 \end_layout
 
 \begin_layout Subsection
@@ -23124,6 +24317,8 @@
 \begin_layout Subsubsection
 __data
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23161,10 +24356,11 @@
 \end_layout
 
 \begin_layout Standard
-Variables in the address space __data resides in the first 256 bytes of
- memory (the direct page).
+Variables in the address space __data resides in the first 256 bytes of memory (the direct page).
  The HC08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23179,6 +24375,8 @@
 \begin_layout Subsubsection
 __xdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23227,6 +24425,8 @@
 \begin_layout Subsubsection
 __sfr
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23273,7 +24473,8 @@
 o
 \emph default
 utput memory.
- I/O memory is accessed with special instructions, e.g.:
+ I/O memory is accessed with special instructions,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -23293,6 +24494,8 @@
 \begin_layout Subsubsection
 __sfr16
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23340,6 +24543,8 @@
 \begin_layout Subsubsection
 __zp/__data
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23377,10 +24582,11 @@
 \end_layout
 
 \begin_layout Standard
-Variables in the address space __zp reside in the first 256 bytes of memory
- (the Page Zero).
+Variables in the address space __zp reside in the first 256 bytes of memory (the Page Zero).
  The MOS6502
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23397,6 +24603,8 @@
 \begin_layout Subsubsection
 __xdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23434,14 +24642,15 @@
 \end_layout
 
 \begin_layout Standard
-Variables in the address space __xdata can reside anywhere in the 64K memory
- space.
+Variables in the address space __xdata can reside anywhere in the 64K memory space.
  This is the default (for the large memory model).
 \end_layout
 
 \begin_layout Subsection
 Non-intrinsic named address spaces
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23456,20 +24665,19 @@
 \begin_layout Standard
 SDCC supports user-defined non-intrinsic named address spaces.
  So far SDCC only supports them for bank-switching.
- You need to have a function that switches to the desired memory bank and
- declare a corresponding named address space:
+ You need to have a function that switches to the desired memory bank and declare a corresponding named address space:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-void setb0(void); // The function that sets the currently active memory
- bank to b0
+void setb0(void);
+ // The function that sets the currently active memory bank to b0
 \begin_inset Newline newline
 \end_inset
 
-void setb1(void); // The function that sets the currently active memory
- bank to b1
+void setb1(void);
+ // The function that sets the currently active memory bank to b1
 \begin_inset Newline newline
 \end_inset
 
@@ -23477,6 +24685,8 @@
 \family default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23512,43 +24722,44 @@
 
 
 \family typewriter
- setb0 spaceb0; // Declare a named address space called spaceb0 that uses
- setb0()
+ setb0 spaceb0;
+ // Declare a named address space called spaceb0 that uses setb0()
 \begin_inset Newline newline
 \end_inset
 
-__addressmod setb1 spaceb1; // Declare a named address space called spaceb1
- that uses setb1()
+__addressmod setb1 spaceb1;
+ // Declare a named address space called spaceb1 that uses setb1()
 \begin_inset Newline newline
 \end_inset
 
-spaceb0 int x; // An int in address space spaceb0
+spaceb0 int x;
+ // An int in address space spaceb0
 \begin_inset Newline newline
 \end_inset
 
-spaceb1 int *y; // A pointer to an int in address space spaceb1
+spaceb1 int *y;
+ // A pointer to an int in address space spaceb1
 \begin_inset Newline newline
 \end_inset
 
-spaceb0 int *spaceb1 z; // A pointer in address space spaceb1 that points
- to an int in address space spaceb0
+spaceb0 int *spaceb1 z;
+ // A pointer in address space spaceb1 that points to an int in address space spaceb0
 \end_layout
 
 \begin_layout Standard
-Non-intrinsic named address spaces for data in ROM are declared using the
- const keyword:
+Non-intrinsic named address spaces for data in ROM are declared using the const keyword:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-void setb0(void); // The function that sets the currently active memory
- bank to b0
+void setb0(void);
+ // The function that sets the currently active memory bank to b0
 \begin_inset Newline newline
 \end_inset
 
-void setb1(void); // The function that sets the currently active memory
- bank to b1
+void setb1(void);
+ // The function that sets the currently active memory bank to b1
 \begin_inset Newline newline
 \end_inset
 
@@ -23556,6 +24767,8 @@
 \family default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23591,39 +24804,39 @@
 
 
 \family typewriter
- setb0 const spaceb0; // Declare a named address space called spaceb0 that
- uses setb0() and resides in ROM
+ setb0 const spaceb0;
+ // Declare a named address space called spaceb0 that uses setb0() and resides in ROM
 \begin_inset Newline newline
 \end_inset
 
-__addressmod setb1 spaceb1; // Declare a named address space called spaceb1
- that uses setb1() and resides in RAM
+__addressmod setb1 spaceb1;
+ // Declare a named address space called spaceb1 that uses setb1() and resides in RAM
 \begin_inset Newline newline
 \end_inset
 
-const spaceb0 int x = 42; // An int in address space spaceb0
+const spaceb0 int x = 42;
+ // An int in address space spaceb0
 \begin_inset Newline newline
 \end_inset
 
-spaceb1 int *y; // A pointer to an int in address space spaceb1
+spaceb1 int *y;
+ // A pointer to an int in address space spaceb1
 \begin_inset Newline newline
 \end_inset
 
-const spaceb0 int *spaceb1 z; // A pointer in address space spaceb1 that
- points to a constant int in address space spaceb0
+const spaceb0 int *spaceb1 z;
+ // A pointer in address space spaceb1 that points to a constant int in address space spaceb0
 \end_layout
 
 \begin_layout Standard
-Variables in non-intrinsic named address spaces will be placed in areas
- of the same name (this can be used for the placement of named address spaces
- in memory by the linker).
+Variables in non-intrinsic named address spaces will be placed in areas of the same name (this can be used for the placement of named address spaces in memory by the linker).
 \end_layout
 
 \begin_layout Standard
-SDCC will automatically insert calls to the corresponding function before
- accessing the variable.
+SDCC will automatically insert calls to the corresponding function before accessing the variable.
  SDCC inserts the minimum possible number calls to the bank selection functions.
- See Philipp Klaus Krause, 
+ See Philipp Klaus Krause,
+ 
 \begin_inset Quotes sld
 \end_inset
 
@@ -23637,6 +24850,8 @@
 \begin_layout Subsection
 Absolute Addressing
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23653,6 +24868,8 @@
 \emph on
 __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23688,8 +24905,8 @@
 
  <address>
 \emph default
- keyword (the address needs to be either a parenthesized constant expression
- or a constant), which can also be used in addition to a named address space,
+ keyword (the address needs to be either a parenthesized constant expression or a constant),
+ which can also be used in addition to a named address space,
  e.g.:
 \end_layout
 
@@ -23700,8 +24917,7 @@
 \end_layout
 
 \begin_layout Standard
-In the above example the variable chksum will be located at 0x7ffe and 0x7fff
- of the external ram.
+In the above example the variable chksum will be located at 0x7ffe and 0x7fff of the external ram.
  The compiler does 
 \emph on
 not
@@ -23722,10 +24938,11 @@
 \end_inset
 
  (they are implemented with an equate in the assembler).
- Thus it is left to the programmer to make sure there are no overlaps with
- other variables that are declared without the absolute address.
+ Thus it is left to the programmer to make sure there are no overlaps with other variables that are declared without the absolute address.
  The assembler listing file (.lst
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23736,6 +24953,8 @@
 
 ) and the linker output files (.rst
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23746,6 +24965,8 @@
 
 ) and (.map
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23760,6 +24981,8 @@
 \begin_layout Standard
 If however you provide an initializer
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23768,8 +24991,7 @@
 
 \end_inset
 
- actual memory allocation will take place and overlaps will be detected
- by the linker.
+ actual memory allocation will take place and overlaps will be detected by the linker.
  E.g.:
 \end_layout
 
@@ -23788,8 +25010,7 @@
 \end_layout
 
 \begin_layout Standard
-In the above example the variable Id will be located from 0x7ff0 to 0x7ff4
- in code memory.
+In the above example the variable Id will be located from 0x7ff0 to 0x7ff4 in code memory.
 \end_layout
 
 \begin_layout Standard
@@ -23805,6 +25026,8 @@
 \family typewriter
 volatile
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23815,6 +25038,8 @@
 
  __xdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23843,13 +25068,16 @@
 
 \end_inset
 
-xdata (mcs51, ds390 named address space)
+xdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
  unsigned char __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23887,12 +25115,13 @@
 \end_layout
 
 \begin_layout Standard
-For some architectures (mcs51) array accesses are more efficient if an (xdata/fa
-r) array
+For some architectures (mcs51) array accesses are more efficient if an (xdata/far) array
 \family typewriter
 \size footnotesize
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23906,6 +25135,8 @@
 \size default
  starts at a block (256 byte) boundary
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -23918,6 +25149,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:A-Step-by Assembler Introduction"
+nolink "false"
 
 \end_inset
 
@@ -23934,6 +25166,8 @@
 \family typewriter
 __bit
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -23969,6 +25203,8 @@
 
  __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -24006,14 +25242,14 @@
 \end_layout
 
 \begin_layout Standard
-The above example will allocate the variable at offset 0x02 in the bit-addressab
-le space.
- There is no real advantage to assigning absolute addresses to variables
- in this manner, unless you want strict control over all the variables allocated.
+The above example will allocate the variable at offset 0x02 in the bit-addressable space.
+ There is no real advantage to assigning absolute addresses to variables in this manner,
+ unless you want strict control over all the variables allocated.
  One possible use would be to write hardware portable code.
- For example, if you have a routine that uses one or more of the microcontroller
- I/O pins, and such pins are different for two different hardwares, you
- can declare the I/O pins in your routine using:
+ For example,
+ if you have a routine that uses one or more of the microcontroller I/O pins,
+ and such pins are different for two different hardwares,
+ you can declare the I/O pins in your routine using:
 \end_layout
 
 \begin_layout Verse
@@ -24021,6 +25257,8 @@
 \family typewriter
 extern volatile
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -24045,7 +25283,8 @@
 \begin_inset space ~
 \end_inset
 
-/* master out, slave in */
+/* master out,
+ slave in */
 \begin_inset Newline newline
 \end_inset
 
@@ -24065,7 +25304,8 @@
 \begin_inset space ~
 \end_inset
 
-/* master in, slave out */
+/* master in,
+ slave out */
 \begin_inset Newline newline
 \end_inset
 
@@ -24109,7 +25349,8 @@
 \begin_inset space ~
 \end_inset
 
-If needed adapt polarity of clock, polarity of data and bit order
+If needed adapt polarity of clock,
+ polarity of data and bit order
 \begin_inset Newline newline
 \end_inset
 
@@ -24309,7 +25550,8 @@
 \begin_inset space ~
 \end_inset
 
-/* __asm nop __endasm; */
+/* __asm nop __endasm;
+ */
 \begin_inset space ~
 \end_inset
 
@@ -24513,7 +25755,8 @@
 \end_layout
 
 \begin_layout Standard
-Then, someplace in the code for the first hardware you would use
+Then,
+ someplace in the code for the first hardware you would use
 \end_layout
 
 \begin_layout Verse
@@ -24521,6 +25764,8 @@
 \family typewriter
 __bit __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -24570,7 +25815,8 @@
 \begin_inset space ~
 \end_inset
 
-/* I/O port 0, bit 0 */
+/* I/O port 0,
+ bit 0 */
 \begin_inset Newline newline
 \end_inset
 
@@ -24590,7 +25836,8 @@
 \begin_inset space ~
 \end_inset
 
-/* I/O port 0, bit 1 */
+/* I/O port 0,
+ bit 1 */
 \begin_inset Newline newline
 \end_inset
 
@@ -24610,11 +25857,13 @@
 \begin_inset space ~
 \end_inset
 
-/* I/O port 0, bit 2 */
+/* I/O port 0,
+ bit 2 */
 \end_layout
 
 \begin_layout Standard
-Similarly, for the second hardware you would use
+Similarly,
+ for the second hardware you would use
 \end_layout
 
 \begin_layout Verse
@@ -24636,7 +25885,8 @@
 \begin_inset space ~
 \end_inset
 
-/* I/O port 0, bit 3 */
+/* I/O port 0,
+ bit 3 */
 \begin_inset Newline newline
 \end_inset
 
@@ -24656,12 +25906,15 @@
 \begin_inset space ~
 \end_inset
 
-/* I/O port 1, bit 1 */
+/* I/O port 1,
+ bit 1 */
 \begin_inset Newline newline
 \end_inset
 
 __bit
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -24711,19 +25964,22 @@
 \begin_inset space ~
 \end_inset
 
-/* I/O port 1, bit 2 */
+/* I/O port 1,
+ bit 2 */
 \end_layout
 
 \begin_layout Standard
-and you can use the same hardware dependent routine without changes, as
- for example in a library.
- This is somehow similar to sbit, but only one absolute address has to be
- specified in the whole project.
+and you can use the same hardware dependent routine without changes,
+ as for example in a library.
+ This is somehow similar to sbit,
+ but only one absolute address has to be specified in the whole project.
 \end_layout
 
 \begin_layout Subsection
 __sdcc_external_startup
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -24797,8 +26053,9 @@
 
 \end_inset
 
- is present, it is executed before both the initialization of static and
- global variables, as well as 
+ is present,
+ it is executed before both the initialization of static and global variables,
+ as well as 
 \begin_inset Flex Code
 status open
 
@@ -24810,10 +26067,11 @@
 
 .
  This allows to implement functionality that needs to be done early.
- For example: disabling a hardware watchdog that would otherwise bite during
- the time it takes to initialize global variables; setup or calibration
- of system/peripheral clocks; or, a memory check that needs to be done before
- any memory (other than the return address for 
+ For example:
+ disabling a hardware watchdog that would otherwise bite during the time it takes to initialize global variables;
+ setup or calibration of system/peripheral clocks;
+ or,
+ a memory check that needs to be done before any memory (other than the return address for 
 \begin_inset Flex Code
 status open
 
@@ -24827,8 +26085,8 @@
 \end_layout
 
 \begin_layout Standard
-If this routine returns a non-zero value, the static and global variable
- initialization will be skipped and the function 
+If this routine returns a non-zero value,
+ the static and global variable initialization will be skipped and the function 
 \begin_inset Flex Code
 status open
 
@@ -24839,8 +26097,7 @@
 \end_inset
 
  will be invoked.
- Otherwise static and global variables will be initialized before the function
- 
+ Otherwise static and global variables will be initialized before the function 
 \begin_inset Flex Code
 status open
 
@@ -24854,8 +26111,18 @@
 \end_layout
 
 \begin_layout Standard
-For mos6502, z80, z80n, z180, sm83, ez80_z80, tlcs90, r2k, r2ka, r3ka, when
- using a custom crt0, support depends on the custom crt0.
+For mos6502,
+ z80,
+ z80n,
+ z180,
+ sm83,
+ ez80_z80,
+ tlcs90,
+ r2k,
+ r2ka,
+ r3ka,
+ when using a custom crt0,
+ support depends on the custom crt0.
 \end_layout
 
 \begin_layout Subsection
@@ -24863,21 +26130,25 @@
 \end_layout
 
 \begin_layout Standard
-SDCC allows to specify preserved registers in function declarations, to
- enable further optimizations on calls to functions implemented in assembler.
- Example for the Z80 architecture specifying that a function will preserve
- register pairs bc and iy:
+SDCC allows to specify preserved registers in function declarations,
+ to enable further optimizations on calls to functions implemented in assembler.
+ Example for the Z80 architecture specifying that a function will preserve register pairs bc and iy:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-void f(void) __preserves_regs(b, c, iyl, iyh);
+void f(void) __preserves_regs(b,
+ c,
+ iyl,
+ iyh);
 \end_layout
 
 \begin_layout Subsection
 Binary constants
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -24890,8 +26161,8 @@
 \end_layout
 
 \begin_layout Standard
-SDCC supports the use of C23 binary constants, such as 0b01100010 when the
- compiler is invoked using 
+SDCC supports the use of C23 binary constants,
+ such as 0b01100010 when the compiler is invoked using 
 \begin_inset Flex Code
 status open
 
@@ -24901,7 +26172,8 @@
 
 \end_inset
 
-, even when the corresponding 
+,
+ even when the corresponding 
 \begin_inset Flex Code
 status open
 
@@ -24911,8 +26183,10 @@
 
 \end_inset
 
-, does not.
- Note: 
+,
+ does not.
+ Note:
+ 
 \begin_inset Flex Code
 status open
 
@@ -24942,7 +26216,8 @@
 \end_inset
 
 .
- Note: 
+ Note:
+ 
 \begin_inset Flex Code
 status open
 
@@ -24957,7 +26232,8 @@
 
 \begin_layout Subsection
 Omitting promotion on arguments of vararg function (does not apply to pdk13,
- pdk14, pdk15)
+ pdk14,
+ pdk15)
 \end_layout
 
 \begin_layout Standard
@@ -24973,8 +26249,8 @@
 \end_inset
 
 .
- This breaks compability with the C standards, so linking code compiled
- with 
+ This breaks compability with the C standards,
+ so linking code compiled with 
 \begin_inset Flex Code
 status open
 
@@ -24994,9 +26270,9 @@
 
 \end_inset
 
- can result in failing programs when arguments to vararg functions are explicitl
-y cast.
- Note: 
+ can result in failing programs when arguments to vararg functions are explicitly cast.
+ Note:
+ 
 \begin_inset Flex Code
 status open
 
@@ -25012,6 +26288,8 @@
 \begin_layout Section
 Parameters
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25022,6 +26300,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25032,6 +26312,8 @@
 
  and Local Variables
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25051,16 +26333,15 @@
 \end_layout
 
 \begin_layout Standard
-Automatic (local) variables and parameters to functions are placed on the
- stack for most targets.
- For MCS51/DS390/HC08/S08/PDK13/PDK14/PDK15 they can either be placed on
- the stack or in data-space.
- The default action of the compiler is to place these variables in the internal
- RAM (for small model) or external RAM (for medium or large model).
+Automatic (local) variables and parameters to functions are placed on the stack for most targets.
+ For MCS51/DS390/HC08/S08/PDK13/PDK14/PDK15 they can either be placed on the stack or in data-space.
+ The default action of the compiler is to place these variables in the internal RAM (for small model) or external RAM (for medium or large model).
  This in fact makes them similar to 
 \emph on
 static
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25073,6 +26354,8 @@
 \emph default
  so by default functions are non-reentrant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25092,6 +26375,8 @@
 
 They can be placed on the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25117,6 +26402,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25140,7 +26427,8 @@
 
 
 \emph default
- option, by using 
+ option,
+ by using 
 \emph on
 #pragma
 \begin_inset space ~
@@ -25150,6 +26438,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25174,6 +26464,8 @@
 \emph on
 __reentrant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25184,7 +26476,8 @@
 
 
 \emph default
- keyword in the function declaration, e.g.:
+ keyword in the function declaration,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -25223,8 +26516,9 @@
 \end_layout
 
 \begin_layout Standard
-Since stack space on 8051 is limited, and accessing the stack is slow for
- the Padauk, the 
+Since stack space on 8051 is limited,
+ and accessing the stack is slow for the Padauk,
+ the 
 \emph on
 __reentrant
 \emph default
@@ -25250,17 +26544,20 @@
 \emph on
 __reentrant
 \emph default
- keyword just means that the parameters & local variables will be allocated
- to the stack, it 
+ keyword just means that the parameters & local variables will be allocated to the stack,
+ it 
 \emph on
 does not
 \emph default
  mean that the function is register bank
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-register bank (mcs51, ds390)
+register bank (mcs51,
+ ds390)
 \end_layout
 
 \end_inset
@@ -25275,6 +26572,8 @@
 
 Local variables
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25285,6 +26584,8 @@
 
  can be assigned intrinsic named address spaces and absolute
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25293,7 +26594,9 @@
 
 \end_inset
 
- addresses, e.g.: 
+ addresses,
+ e.g.:
+ 
 \end_layout
 
 \begin_layout Verse
@@ -25365,6 +26668,8 @@
 
 __data unsigned char __at
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25404,6 +26709,8 @@
 \begin_layout Standard
 In the above example the parameter
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25420,7 +26727,8 @@
 \emph on
 i
 \emph default
- will be allocated in the external ram, 
+ will be allocated in the external ram,
+ 
 \emph on
 bvar
 \emph default
@@ -25454,11 +26762,12 @@
 \end_layout
 
 \begin_layout Standard
-It is however allowed to use bit parameters in reentrant functions and also
- non-static local bit variables are supported.
+It is however allowed to use bit parameters in reentrant functions and also non-static local bit variables are supported.
  Efficient use is limited to 8 semi-bitregisters in bit space.
  They are pushed and popped to stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25480,6 +26789,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25494,6 +26805,8 @@
 \begin_layout Standard
 For non-reentrant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25502,10 +26815,11 @@
 
 \end_inset
 
- functions SDCC will try to reduce internal ram space usage by overlaying
- parameters and local variables of a function (if possible).
+ functions SDCC will try to reduce internal ram space usage by overlaying parameters and local variables of a function (if possible).
  Parameters and local variables
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25514,12 +26828,12 @@
 
 \end_inset
 
- of a function will be allocated to an overlayable segment if the function
- has 
+ of a function will be allocated to an overlayable segment if the function has 
 \emph on
-no other function calls and the function is non-reentrant and the memory
- model
+no other function calls and the function is non-reentrant and the memory model
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25533,6 +26847,8 @@
 \emph default
  If an explicit intrinsic named address space
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -25541,12 +26857,12 @@
 
 \end_inset
 
- is specified for a local variable, it will NOT be overlaid.
+ is specified for a local variable,
+ it will NOT be overlaid.
 \end_layout
 
 \begin_layout Standard
-Note that the compiler (not the linkage editor) makes the decision for overlayin
-g the data items.
+Note that the compiler (not the linkage editor) makes the decision for overlaying the data items.
  Functions that are called from an interrupt service routine
 \begin_inset Marginal
 status collapsed
@@ -25565,6 +26881,8 @@
 
 nooverlay
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25589,10 +26907,8 @@
 \end_layout
 
 \begin_layout Standard
-Also note that the compiler does not do any processing of inline assembler
- code, so the compiler might incorrectly assign local variables and parameters
- of a function into the overlay segment if the inline assembler code calls
- other c-functions that might use the overlay.
+Also note that the compiler does not do any processing of inline assembler code,
+ so the compiler might incorrectly assign local variables and parameters of a function into the overlay segment if the inline assembler code calls other c-functions that might use the overlay.
  In that case the #pragma
 \begin_inset space ~
 \end_inset
@@ -25601,9 +26917,10 @@
 \end_layout
 
 \begin_layout Standard
-Parameters and local variables of functions that contain 16 or 32 bit multiplica
-tion
+Parameters and local variables of functions that contain 16 or 32 bit multiplication
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25614,6 +26931,8 @@
 
  or division
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25635,6 +26954,8 @@
 
 #pragma nooverlay
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25701,6 +27022,8 @@
 
 void some_isr () __interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25793,14 +27116,13 @@
 \begin_inset space ~
 \end_inset
 
-nooverlay was not present, this could cause unpredictable runtime behaviour
- when called from an interrupt service routine.
+nooverlay was not present,
+ this could cause unpredictable runtime behaviour when called from an interrupt service routine.
  The #pragma
 \begin_inset space ~
 \end_inset
 
-nooverlay ensures that the parameters and local variables for the function
- are NOT overlaid.
+nooverlay ensures that the parameters and local variables for the function are NOT overlaid.
 \end_layout
 
 \begin_layout Section
@@ -25831,7 +27153,8 @@
 \emph on
 r
 \emph default
-outines to be coded in C, with some extended keywords.
+outines to be coded in C,
+ with some extended keywords.
 \end_layout
 
 \begin_layout Verse
@@ -25873,6 +27196,8 @@
 \emph on
 __interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -25883,6 +27208,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -25919,9 +27246,11 @@
 
 \emph default
  keyword is the interrupt number this routine will service.
- When present, the compiler will insert a call to this routine in the interrupt
- vector table
+ When present,
+ the compiler will insert a call to this routine in the interrupt vector table
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25931,9 +27260,9 @@
 \end_inset
 
  for the interrupt number specified.
- If you have multiple source files in your project, interrupt service routines
- can be present in any of them, but a prototype of the isr MUST be present
- or included in the file that contains the function 
+ If you have multiple source files in your project,
+ interrupt service routines can be present in any of them,
+ but a prototype of the isr MUST be present or included in the file that contains the function 
 \emph on
 main
 \emph default
@@ -25942,6 +27271,8 @@
 \emph on
 __using
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -25970,15 +27301,15 @@
 
 \end_inset
 
-using (mcs51, ds390 register bank)
+using (mcs51,
+ ds390 register bank)
 \end_layout
 
 \end_inset
 
 
 \emph default
- can be used to tell the compiler to use the specified register bank when
- generating code for this function.
+ can be used to tell the compiler to use the specified register bank when generating code for this function.
 \begin_inset Newline newline
 \end_inset
 
@@ -25992,19 +27323,21 @@
 
 \end_inset
 
-Common interrupt pitfall: variable not declared 
+Common interrupt pitfall:
+ variable not declared 
 \emph on
 volatile
 \end_layout
 
 \begin_layout Standard
-If an interrupt service routine changes variables which are accessed by
- other functions these variables have to be declared 
+If an interrupt service routine changes variables which are accessed by other functions these variables have to be declared 
 \emph on
 volatile
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26035,7 +27368,8 @@
 
 \end_inset
 
-Common interrupt pitfall: 
+Common interrupt pitfall:
+ 
 \emph on
 non-atomic access
 \end_layout
@@ -26045,6 +27379,8 @@
 \emph on
 atomic
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26056,17 +27392,15 @@
 
 \emph default
  (i.e.
- the processor needs more than one instruction for the access and could
- be interrupted while accessing the variable) the interrupt must be disabled
- during the access to avoid inconsistent data.
+ the processor needs more than one instruction for the access and could be interrupted while accessing the variable) the interrupt must be disabled during the access to avoid inconsistent data.
  
 \begin_inset Newline newline
 \end_inset
 
-Access to 16 or 32 bit variables is obviously not atomic on 8 bit CPUs and
- should be protected by disabling interrupts.
+Access to 16 or 32 bit variables is obviously not atomic on 8 bit CPUs and should be protected by disabling interrupts.
  You're not automatically on the safe side if you use 8 bit variables though.
- We need an example here: f.e.
+ We need an example here:
+ f.e.
  on the 8051 the harmless looking 
 \begin_inset Quotes srd
 \end_inset
@@ -26112,8 +27446,7 @@
 \begin_inset Quotes sld
 \end_inset
 
- from within an interrupt routine might get lost if the interrupt occurs
- at the wrong time.
+ from within an interrupt routine might get lost if the interrupt occurs at the wrong time.
  
 \begin_inset Quotes sld
 \end_inset
@@ -26153,15 +27486,17 @@
 
 \end_inset
 
-Common interrupt pitfall: 
+Common interrupt pitfall:
+ 
 \emph on
 stack overflow
 \end_layout
 
 \begin_layout Standard
-The return address and the registers used in the interrupt service routine
- are saved on the stack
+The return address and the registers used in the interrupt service routine are saved on the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26171,14 +27506,15 @@
 \end_inset
 
  so there must be sufficient stack space.
- If there isn't variables or registers (or even the return address itself)
- will be corrupted.
+ If there isn't variables or registers (or even the return address itself) will be corrupted.
  This 
 \emph on
 stack overflow
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26206,14 +27542,18 @@
 
 \end_inset
 
-Common interrupt pitfall: 
+Common interrupt pitfall:
+ 
 \emph on
 use of non-reentrant functions
 \end_layout
 
 \begin_layout Standard
-A special note here, integer multiplicative operators and floating-point
+A special note here,
+ integer multiplicative operators and floating-point
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26222,12 +27562,10 @@
 
 \end_inset
 
- operations might be implemented using external support routines, depending
- on the target architecture.
- If an interrupt service routine needs to do any of these operations on
- a target where functions are non-reentrant by default, then the support
- routines (as mentioned in a following section) will have to be recompiled
- using the 
+ operations might be implemented using external support routines,
+ depending on the target architecture.
+ If an interrupt service routine needs to do any of these operations on a target where functions are non-reentrant by default,
+ then the support routines (as mentioned in a following section) will have to be recompiled using the 
 \emph on
 -
 \begin_inset ERT
@@ -26244,6 +27582,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26286,6 +27626,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26312,8 +27654,11 @@
 \begin_inset Newline newline
 \end_inset
 
-Note, the type promotion
+Note,
+ the type promotion
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26351,6 +27696,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:A-Step-by Assembler Introduction"
+nolink "false"
 
 \end_inset
 
@@ -26358,16 +27704,16 @@
 \end_layout
 
 \begin_layout Standard
-Calling other functions from an interrupt service routine on a target where
- functions are non-reentrant by default is not recommended, avoid it if
- possible.
- Note that when some function is called from an interrupt service routine
- it should be preceded by a #pragma
+Calling other functions from an interrupt service routine on a target where functions are non-reentrant by default is not recommended,
+ avoid it if possible.
+ Note that when some function is called from an interrupt service routine it should be preceded by a #pragma
 \begin_inset space ~
 \end_inset
 
 nooverlay
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26389,10 +27735,8 @@
 \end_inset
 
  if it is not reentrant.
- Furthermore non-reentrant functions should not be called from the main
- program while the interrupt service routine might be active.
- They also must not be called from low priority interrupt service routines
- while a high priority interrupt service routine might be active.
+ Furthermore non-reentrant functions should not be called from the main program while the interrupt service routine might be active.
+ They also must not be called from low priority interrupt service routines while a high priority interrupt service routine might be active.
  You could use semaphores or make the function 
 \emph on
 critical
@@ -26405,6 +27749,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Overlaying"
+nolink "false"
 
 \end_inset
 
@@ -26416,6 +27761,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Functions-using-private-banks"
+nolink "false"
 
 \end_inset
 
@@ -26433,6 +27779,8 @@
 \begin_layout Standard
 Interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26441,10 +27789,11 @@
 
 \end_inset
 
- numbers and the corresponding address & descriptions for the Standard 8051/8052
- are listed below.
+ numbers and the corresponding address & descriptions for the Standard 8051/8052 are listed below.
  SDCC will automatically adjust the 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26749,16 +28098,21 @@
 \emph on
 __using
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-using (mcs51, ds390 register bank)
+using (mcs51,
+ ds390 register bank)
 \end_layout
 
 \end_inset
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26787,7 +28141,8 @@
 
 \end_inset
 
-using (mcs51, ds390 register bank)
+using (mcs51,
+ ds390 register bank)
 \end_layout
 
 \end_inset
@@ -26798,24 +28153,24 @@
 \emph on
 __using
 \emph default
- (0)), the compiler will save the registers used by itself on the stack
- upon entry and restore them at exit, however if such an interrupt service
- routine calls another function then the entire register bank will be saved
- on the stack.
- This scheme may be advantageous for small interrupt service routines which
- have low register usage.
+ (0)),
+ the compiler will save the registers used by itself on the stack upon entry and restore them at exit,
+ however if such an interrupt service routine calls another function then the entire register bank will be saved on the stack.
+ This scheme may be advantageous for small interrupt service routines which have low register usage.
 \end_layout
 
 \begin_layout Standard
-If the interrupt service routine is defined to be using a specific register
- bank then only 
+If the interrupt service routine is defined to be using a specific register bank then only 
 \emph on
-a, b, dptr
+a,
+ b,
+ dptr
 \emph default
- & psw are saved and restored, if such an interrupt service routine calls
- another function (using another register bank) then the entire register
- bank of the called function will be saved on the stack
+ & psw are saved and restored,
+ if such an interrupt service routine calls another function (using another register bank) then the entire register bank of the called function will be saved on the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26831,6 +28186,8 @@
 \begin_layout Subsection
 HC08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26845,6 +28202,8 @@
 \begin_layout Standard
 Since the number of interrupts
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26853,16 +28212,19 @@
 
 \end_inset
 
- available is chip specific and the interrupt vector table always ends at
- the last byte of memory, the interrupt numbers corresponds to the interrupt
- vectors in reverse order of address.
- For example, interrupt 1 will use the interrupt vector at 0xfffc, interrupt
- 2 will use the interrupt vector at 0xfffa, and so on.
- However, interrupt 0 (the reset vector at 0xfffe) is not redefinable in
- this way; instead see section 
+ available is chip specific and the interrupt vector table always ends at the last byte of memory,
+ the interrupt numbers corresponds to the interrupt vectors in reverse order of address.
+ For example,
+ interrupt 1 will use the interrupt vector at 0xfffc,
+ interrupt 2 will use the interrupt vector at 0xfffa,
+ and so on.
+ However,
+ interrupt 0 (the reset vector at 0xfffe) is not redefinable in this way;
+ instead see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:MCS51-Startup-Code"
+nolink "false"
 
 \end_inset
 
@@ -26870,12 +28232,15 @@
 \end_layout
 
 \begin_layout Subsection
-Z80, Z180 and eZ80 Interrupt Service Routines
+Z80,
+ Z180 and eZ80 Interrupt Service Routines
 \end_layout
 
 \begin_layout Standard
 The Z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26886,6 +28251,8 @@
 
  uses several different methods for determining the correct interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -26895,14 +28262,17 @@
 \end_inset
 
  vector depending on the hardware implementation.
- Therefore, SDCC does not attempt to generate an interrupt vector table.
+ Therefore,
+ SDCC does not attempt to generate an interrupt vector table.
 \end_layout
 
 \begin_layout Standard
-By default, SDCC generates code for a maskable interrupt, which uses a RETI
- instruction to return from the interrupt.
- To write an interrupt handler for the non-maskable interrupt, which needs
- a RETN instruction instead, leave out the interrupt number:
+By default,
+ SDCC generates code for a maskable interrupt,
+ which uses a RETI instruction to return from the interrupt.
+ To write an interrupt handler for the non-maskable interrupt,
+ which needs a RETN instruction instead,
+ leave out the interrupt number:
 \end_layout
 
 \begin_layout Verse
@@ -26940,9 +28310,8 @@
 \end_layout
 
 \begin_layout Standard
-Since interrupts on the Z80 and Z180 are level-triggered (except for the
- NMI), interruptible interrupt handlers should only be used where hardware
- acknowledge is available.
+Since interrupts on the Z80 and Z180 are level-triggered (except for the NMI),
+ interruptible interrupt handlers should only be used where hardware acknowledge is available.
 \end_layout
 
 \begin_layout Standard
@@ -27076,7 +28445,8 @@
 \end_layout
 
 \begin_layout Subsection
-Rabbit 2000, 3000 and 3000A Interrupt Service Routines
+Rabbit 2000,
+ 3000 and 3000A Interrupt Service Routines
 \end_layout
 
 \begin_layout Standard
@@ -27298,12 +28668,15 @@
 \end_layout
 
 \begin_layout Standard
-The STM8 interrupt table contains 31 entries: Reset (used by SDCC for program
- startup), trap and user interrupts 0 to 29.
+The STM8 interrupt table contains 31 entries:
+ Reset (used by SDCC for program startup),
+ trap and user interrupts 0 to 29.
  Where the keyword 
 \emph on
 __interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -27314,7 +28687,8 @@
 
 
 \emph default
- is used for normal user interrupts, the 
+ is used for normal user interrupts,
+ the 
 \emph on
 __trap
 \emph default
@@ -27364,14 +28738,15 @@
 \end_layout
 
 \begin_layout Standard
-A special keyword may be associated with a block or a function declaring
- it as 
+A special keyword may be associated with a block or a function declaring it as 
 \emph on
 __critical
 \emph default
 .
  SDCC will generate code to disable all interrupts
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -27380,12 +28755,14 @@
 
 \end_inset
 
- upon entry to a critical function and restore the interrupt enable to the
- previous state before returning (for architectures where there is no efficient
- way to do so (sm83, tlcs90, stm8), interrupts will be unconditionally enabled
- instead).
+ upon entry to a critical function and restore the interrupt enable to the previous state before returning (for architectures where there is no efficient way to do so (sm83,
+ tlcs90,
+ stm8),
+ interrupts will be unconditionally enabled instead).
  Nesting critical functions will need one additional byte on the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -27402,6 +28779,8 @@
 \family typewriter
 int foo () __critical
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -27412,6 +28791,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -27515,7 +28896,8 @@
 \begin_layout Verse
 
 \family typewriter
-__critical{ i++; }
+__critical{ i++;
+ }
 \end_layout
 
 \begin_layout Standard
@@ -27529,6 +28911,8 @@
 \begin_layout Standard
 Interrupts
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28012,9 +29396,10 @@
 \end_layout
 
 \begin_layout Standard
-On other architectures which have separate opcodes for enabling and disabling
- interrupts you might want to make use of defines with inline assembly
+On other architectures which have separate opcodes for enabling and disabling interrupts you might want to make use of defines with inline assembly
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28025,6 +29410,8 @@
 
  (HC08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28041,6 +29428,8 @@
 \family typewriter
 #define CLI __asm
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -28092,6 +29481,8 @@
 
 __endasm
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -28125,7 +29516,8 @@
 
 \end_inset
 
-; 
+;
+ 
 \end_layout
 
 \begin_layout Verse
@@ -28147,7 +29539,8 @@
 \begin_inset space ~
 \end_inset
 
-__endasm; 
+__endasm;
+ 
 \end_layout
 
 \begin_layout Verse
@@ -28165,7 +29558,8 @@
 \begin_inset Quotes srd
 \end_inset
 
-); 
+);
+ 
 \end_layout
 
 \begin_layout Verse
@@ -28179,16 +29573,19 @@
 \begin_inset Quotes srd
 \end_inset
 
-); 
+);
+ 
 \end_layout
 
 \begin_layout Standard
-Note: it is sometimes sufficient to disable only a specific interrupt source
- like f.e.
+Note:
+ it is sometimes sufficient to disable only a specific interrupt source like f.e.
  a timer or serial interrupt by manipulating an 
 \emph on
 interrupt mask
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28204,14 +29601,15 @@
 \end_layout
 
 \begin_layout Standard
-Usually the time during which interrupts are disabled should be kept as
- short as possible.
+Usually the time during which interrupts are disabled should be kept as short as possible.
  This minimizes both 
 \emph on
 interrupt latency
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28220,13 +29618,14 @@
 
 \end_inset
 
- (the time between the occurrence of the interrupt and the execution of
- the first code in the interrupt routine) and 
+ (the time between the occurrence of the interrupt and the execution of the first code in the interrupt routine) and 
 \emph on
 interrupt jitter
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28236,22 +29635,23 @@
 \end_inset
 
  (the difference between the shortest and the longest interrupt latency).
- These really are something different, f.e.
- a serial interrupt has to be served before its buffer overruns so it cares
- for the maximum interrupt latency, whereas it does not care about jitter.
- On a loudspeaker driven via a digital to analog converter which is fed
- by an interrupt a latency of a few milliseconds might be tolerable, whereas
- a much smaller jitter will be very audible.
+ These really are something different,
+ f.e.
+ a serial interrupt has to be served before its buffer overruns so it cares for the maximum interrupt latency,
+ whereas it does not care about jitter.
+ On a loudspeaker driven via a digital to analog converter which is fed by an interrupt a latency of a few milliseconds might be tolerable,
+ whereas a much smaller jitter will be very audible.
 \end_layout
 
 \begin_layout Standard
-You can re-enable interrupts within an interrupt routine and on some architectur
-es you can make use of two (or more) levels of 
+You can re-enable interrupts within an interrupt routine and on some architectures you can make use of two (or more) levels of 
 \emph on
 interrupt priorities
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28261,11 +29661,11 @@
 \end_inset
 
 .
- On some architectures which don't support interrupt priorities these can
- be implemented by manipulating the interrupt mask and re-enabling interrupts
- within the interrupt routine.
+ On some architectures which don't support interrupt priorities these can be implemented by manipulating the interrupt mask and re-enabling interrupts within the interrupt routine.
  Check there is sufficient space on the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28281,6 +29681,8 @@
 \begin_layout Subsection
 Semaphore
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28295,6 +29697,8 @@
 \begin_layout Standard
 Some architectures (mcs51/ds390) have an atomic
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28304,10 +29708,12 @@
 \end_inset
 
  bit test and clear instruction.
- These type of instructions are typically used in preemptive multitasking
- systems, where a routine f.e.
+ These type of instructions are typically used in preemptive multitasking systems,
+ where a routine f.e.
  claims the use of a data structure ('acquires a lock
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28316,12 +29722,13 @@
 
 \end_inset
 
- on it'), makes some modifications and then releases the lock when the data
- structure is consistent again.
- The instruction may also be used if interrupt and non-interrupt code have
- to compete for a resource.
+ on it'),
+ makes some modifications and then releases the lock when the data structure is consistent again.
+ The instruction may also be used if interrupt and non-interrupt code have to compete for a resource.
  With the atomic bit test and clear instruction interrupts
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28343,6 +29750,8 @@
 \family typewriter
 volatile
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28447,8 +29856,11 @@
 \end_layout
 
 \begin_layout Standard
-Note, mcs51 and ds390 support only an atomic
+Note,
+ mcs51 and ds390 support only an atomic
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28483,16 +29895,21 @@
 \emph on
 __using
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-using (mcs51, ds390 register bank)
+using (mcs51,
+ ds390 register bank)
 \end_layout
 
 \end_inset
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28521,7 +29938,8 @@
 
 \end_inset
 
-using (mcs51, ds390 register bank)
+using (mcs51,
+ ds390 register bank)
 \end_layout
 
 \end_inset
@@ -28530,10 +29948,13 @@
 \emph default
  attribute (which tells the compiler to use a register bank
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-register bank (mcs51, ds390)
+register bank (mcs51,
+ ds390)
 \end_layout
 
 \end_inset
@@ -28543,6 +29964,8 @@
 \emph on
 interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28554,8 +29977,7 @@
 
 \emph default
  functions (see footnote below).
- This will in most circumstances make the generated ISR code more efficient
- since it will not have to save registers on the stack.
+ This will in most circumstances make the generated ISR code more efficient since it will not have to save registers on the stack.
 \end_layout
 
 \begin_layout Standard
@@ -28572,13 +29994,14 @@
 status collapsed
 
 \begin_layout Plain Layout
-possible exception: if a function is called ONLY from 'interrupt' functions
- using a particular bank, it can be declared with the same 'using' attribute
- as the calling 'interrupt' functions.
- For instance, if you have several ISRs using bank one, and all of them
- call memcpy(), it might make sense to create a specialized version of memcpy()
- 'using 1', since this would prevent the ISR from having to save bank zero
- to the stack on entry and switch to bank zero before calling the function
+possible exception:
+ if a function is called ONLY from 'interrupt' functions using a particular bank,
+ it can be declared with the same 'using' attribute as the calling 'interrupt' functions.
+ For instance,
+ if you have several ISRs using bank one,
+ and all of them call memcpy(),
+ it might make sense to create a specialized version of memcpy() 'using 1',
+ since this would prevent the ISR from having to save bank zero to the stack on entry and switch to bank zero before calling the function
 \end_layout
 
 \end_inset
@@ -28589,7 +30012,9 @@
 
 
 \emph on
-(pending: Note, nowadays the
+(pending:
+ Note,
+ nowadays the
 \emph default
  __using 
 \emph on
@@ -28613,10 +30038,12 @@
 \emph on
 interrupt
 \emph default
- function using a non-zero bank will assume that it can trash that register
- bank, and will not save it.
+ function using a non-zero bank will assume that it can trash that register bank,
+ and will not save it.
  Since high-priority interrupts
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28627,6 +30054,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28635,8 +30064,8 @@
 
 \end_inset
 
- can interrupt low-priority ones on the 8051 and friends, this means that
- if a high-priority ISR 
+ can interrupt low-priority ones on the 8051 and friends,
+ this means that if a high-priority ISR 
 \emph on
 using
 \emph default
@@ -28644,26 +30073,27 @@
 \emph on
 using
 \emph default
- the same bank, terrible and bad things can happen.
- To prevent this, no single register bank should be 
+ the same bank,
+ terrible and bad things can happen.
+ To prevent this,
+ no single register bank should be 
 \emph on
 used
 \emph default
  by both a high priority and a low priority ISR.
- This is probably most easily done by having all high priority ISRs use
- one bank and all low priority ISRs use another.
- If you have an ISR which can change priority at runtime, you're on your
- own: I suggest using the default bank zero and taking the small performance
- hit.
+ This is probably most easily done by having all high priority ISRs use one bank and all low priority ISRs use another.
+ If you have an ISR which can change priority at runtime,
+ you're on your own:
+ I suggest using the default bank zero and taking the small performance hit.
 \end_layout
 
 \begin_layout Standard
 It is most efficient if your ISR calls no other functions.
- If your ISR must call other functions, it is most efficient if those functions
- use the same bank as the ISR (see note 1 below); the next best is if the
- called functions use bank zero.
- It is very inefficient to call a function using a different, non-zero bank
- from an ISR.
+ If your ISR must call other functions,
+ it is most efficient if those functions use the same bank as the ISR (see note 1 below);
+ the next best is if the called functions use bank zero.
+ It is very inefficient to call a function using a different,
+ non-zero bank from an ISR.
  
 \end_layout
 
@@ -28677,6 +30107,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -28698,12 +30130,13 @@
 
 \begin_layout Subsubsection
 Old __asm ...
- __endasm; Format
+ __endasm;
+ Format
 \end_layout
 
 \begin_layout Standard
-Most of inline assembler code examples in this manual use the old inline
- assembler code format, but the new format could be used equivalently.
+Most of inline assembler code examples in this manual use the old inline assembler code format,
+ but the new format could be used equivalently.
 \end_layout
 
 \begin_layout Standard
@@ -28737,7 +30170,8 @@
 \begin_inset space ~
 \end_inset
 
-; This is a comment
+;
+ This is a comment
 \begin_inset Newline newline
 \end_inset
 
@@ -28801,8 +30235,9 @@
 \end_layout
 
 \begin_layout Standard
-Note: As of SDCC 4.2.9, assembler comments occurring in this type of inline
- assembler block are affected by macro expansion.
+Note:
+ As of SDCC 4.2.9,
+ assembler comments occurring in this type of inline assembler block are affected by macro expansion.
 \end_layout
 
 \begin_layout Subsubsection
@@ -28818,10 +30253,8 @@
 \end_layout
 
 \begin_layout Standard
-The __asm__ inline assembler code format was introduced in SDCC version
- 3.2.0.
- Its main advantage is that it is compatible with all standard compliant
- C preprocessors.
+The __asm__ inline assembler code format was introduced in SDCC version 3.2.0.
+ Its main advantage is that it is compatible with all standard compliant C preprocessors.
 \end_layout
 
 \begin_layout Standard
@@ -28835,7 +30268,8 @@
 \begin_inset Quotes sld
 \end_inset
 
-; This is a comment
+;
+ This is a comment
 \backslash
 nlabel:
 \backslash
@@ -28871,7 +30305,8 @@
 \begin_inset Quotes sld
 \end_inset
 
-; This is a comment
+;
+ This is a comment
 \backslash
 n
 \begin_inset Quotes srd
@@ -28942,9 +30377,9 @@
 \end_layout
 
 \begin_layout Standard
-Starting from a small snippet of c-code this example shows for the MCS51
- how to use inline assembly, access variables, a function parameter and
- an array in xdata memory.
+Starting from a small snippet of c-code this example shows for the MCS51 how to use inline assembly,
+ access variables,
+ a function parameter and an array in xdata memory.
  The example uses an MCS51 here but is easily adapted for other architectures.
  This is a buffer routine which should be optimized:
 \end_layout
@@ -28955,6 +30390,8 @@
 \size footnotesize
 unsigned char __far
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -28990,6 +30427,8 @@
 
  __at
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -29025,6 +30464,8 @@
 
 (0x7f00) buf[0x100];
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -29037,7 +30478,8 @@
 \begin_inset Newline newline
 \end_inset
 
-unsigned char head, tail;
+unsigned char head,
+ tail;
 \begin_inset space ~
 \end_inset
 
@@ -29107,6 +30549,8 @@
 
 /* if interrupts
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -29303,6 +30747,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Common-interrupt-pitfall-volatile"
+nolink "false"
 
 \end_inset
 
@@ -29364,6 +30809,8 @@
 \family typewriter
 to avoid promotion
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -29374,6 +30821,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -29505,14 +30954,13 @@
 \end_layout
 
 \begin_layout Standard
-If the code snippet (assume it is saved in buffer.c) is compiled with SDCC
- then a corresponding buffer.asm file is generated.
+If the code snippet (assume it is saved in buffer.c) is compiled with SDCC then a corresponding buffer.asm file is generated.
  We define a new function 
 \family typewriter
 to_buffer_asm()
 \family default
- in file buffer.c in which we cut and paste the generated code, removing
- unwanted comments and some ':'.
+ in file buffer.c in which we cut and paste the generated code,
+ removing unwanted comments and some ':'.
  Then add 
 \begin_inset Quotes sld
 \end_inset
@@ -29542,9 +30990,10 @@
 status collapsed
 
 \begin_layout Plain Layout
-Note, that the single underscore form (_asm and _endasm) are not C99 compatible,
- and for C99 compatibility, the double-underscore form (__asm and __endasm)
- has to be used.
+Note,
+ that the single underscore form (_asm and _endasm) are not C99 compatible,
+ and for C99 compatibility,
+ the double-underscore form (__asm and __endasm) has to be used.
  The latter is also used in the library functions.
 \end_layout
 
@@ -29557,7 +31006,8 @@
 
 \family typewriter
 \size footnotesize
-/* With a cut and paste from the .asm file, we have something to start with.
+/* With a cut and paste from the .asm file,
+ we have something to start with.
 \begin_inset Newline newline
 \end_inset
 
@@ -29573,7 +31023,8 @@
 \begin_inset space ~
 \end_inset
 
-The function is not yet OK! (registers aren't saved) */ 
+The function is not yet OK!
+ (registers aren't saved) */ 
 \begin_inset Newline newline
 \end_inset
 
@@ -29603,6 +31054,8 @@
 
 __asm
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -29684,6 +31137,8 @@
 \family typewriter
 to avoid promotion
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -29694,6 +31149,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -29862,8 +31319,11 @@
 \begin_inset Newline newline
 \end_inset
 
-;buffer.c buf[ head++ ] = c; /* access to a 256 byte aligned array */
+;buffer.c buf[ head++ ] = c;
+ /* access to a 256 byte aligned array */
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -30078,6 +31538,8 @@
 
 __endasm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -30119,10 +31581,8 @@
 \end_layout
 
 \begin_layout Standard
-The new file buffer.c should compile with only one warning about the unreferenced
- function argument 'c'.
- Now we hand-optimize the assembly code and insert an #define USE_ASSEMBLY
- (1) and finally have:
+The new file buffer.c should compile with only one warning about the unreferenced function argument 'c'.
+ Now we hand-optimize the assembly code and insert an #define USE_ASSEMBLY (1) and finally have:
 \end_layout
 
 \begin_layout Verse
@@ -30133,7 +31593,8 @@
 \begin_inset Newline newline
 \end_inset
 
-unsigned char head, tail;
+unsigned char head,
+ tail;
 \begin_inset Newline newline
 \end_inset
 
@@ -30257,7 +31718,9 @@
 \begin_inset space ~
 \end_inset
 
-c; // to avoid warning: unreferenced function argument
+c;
+ // to avoid warning:
+ unreferenced function argument
 \begin_inset Newline newline
 \end_inset
 
@@ -30279,6 +31742,8 @@
 
 __asm
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -30348,7 +31813,8 @@
 \begin_inset space ~
 \end_inset
 
-; save used registers here.
+;
+ save used registers here.
 \begin_inset Newline newline
 \end_inset
 
@@ -30384,11 +31850,13 @@
 \begin_inset space ~
 \end_inset
 
-; If we were still using r2,r3 we would have to push them here.
+;
+ If we were still using r2,r3 we would have to push them here.
 \begin_inset Newline newline
 \end_inset
 
-; if( head != (unsigned char)(tail-1) )
+;
+ if( head != (unsigned char)(tail-1) )
 \begin_inset Newline newline
 \end_inset
 
@@ -30544,7 +32012,8 @@
 \begin_inset space ~
 \end_inset
 
-; we could do an ANL a,#0x0f here to use a smaller buffer (see below)
+;
+ we could do an ANL a,#0x0f here to use a smaller buffer (see below)
 \begin_inset Newline newline
 \end_inset
 
@@ -30628,7 +32097,8 @@
 \begin_inset Newline newline
 \end_inset
 
-; buf[ head++ ] = c;
+;
+ buf[ head++ ] = c;
 \begin_inset Newline newline
 \end_inset
 
@@ -30696,7 +32166,8 @@
 \begin_inset space ~
 \end_inset
 
-; dpl holds lower byte of function argument
+;
+ dpl holds lower byte of function argument
 \begin_inset Newline newline
 \end_inset
 
@@ -30748,7 +32219,8 @@
 \begin_inset space ~
 \end_inset
 
-; buf is 0x100 byte aligned so head can be used directly
+;
+ buf is 0x100 byte aligned so head can be used directly
 \begin_inset Newline newline
 \end_inset
 
@@ -30900,7 +32372,8 @@
 \begin_inset space ~
 \end_inset
 
-; we could do an ANL _head,#0x0f here to use a smaller buffer (see above)
+;
+ we could do an ANL _head,#0x0f here to use a smaller buffer (see above)
 \begin_inset Newline newline
 \end_inset
 
@@ -30940,7 +32413,8 @@
 \begin_inset space ~
 \end_inset
 
-; restore used registers here
+;
+ restore used registers here
 \begin_inset Newline newline
 \end_inset
 
@@ -30962,6 +32436,8 @@
 
 __endasm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31007,21 +32483,28 @@
 \end_layout
 
 \begin_layout Standard
-The inline assembler code can contain any valid code understood by the assembler
-, this includes any assembler directives and comment lines.
+The inline assembler code can contain any valid code understood by the assembler,
+ this includes any assembler directives and comment lines.
  The assembler does not like some characters like ':' or ''' in comments.
  You'll find an 100+ pages assembler manual in sdcc/sdas/doc/asmlnk.txt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-sdas (sdasgb, sdas6808, sdas8051, sdasz80)
+sdas (sdasgb,
+ sdas6808,
+ sdas8051,
+ sdasz80)
 \end_layout
 
 \end_inset
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31049,6 +32532,8 @@
 \family typewriter
 __asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31087,6 +32572,8 @@
 \size footnotesize
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31123,11 +32610,13 @@
 
 \size default
 ;
+
 \family default
  keyword pair.
- Specifically it will not know which registers are used and thus register
- pushing/popping
+ Specifically it will not know which registers are used and thus register pushing/popping
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31143,12 +32632,8 @@
 \begin_layout Standard
 It is required that each assembly instruction be placed on a separate line.
  This is also recommended for labels (as the example shows).
- This is especially important to note when the inline assembler is placed
- in a C preprocessor macro as the preprocessor will normally put all replacing
- code on a single line.
- Only when the macro has each assembly instruction on a single line that
- ends with a line continuation character will it be placed as separate lines
- in the resulting .asm file.
+ This is especially important to note when the inline assembler is placed in a C preprocessor macro as the preprocessor will normally put all replacing code on a single line.
+ Only when the macro has each assembly instruction on a single line that ends with a line continuation character will it be placed as separate lines in the resulting .asm file.
 \end_layout
 
 \begin_layout Verse
@@ -31380,6 +32865,8 @@
 \emph on
 peep-asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31403,9 +32890,11 @@
 
 
 \emph default
- command line option is used, the inline assembler code will be passed through
- the peephole optimizer
+ command line option is used,
+ the inline assembler code will be passed through the peephole optimizer
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31415,8 +32904,8 @@
 \end_inset
 
 .
- There are only a few (if any) cases where this option makes sense, it might
- cause some unexpected changes in the inline assembler code.
+ There are only a few (if any) cases where this option makes sense,
+ it might cause some unexpected changes in the inline assembler code.
  Please go through the peephole optimizer rules defined in file 
 \emph on
 peeph.def
@@ -31434,6 +32923,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31450,6 +32941,8 @@
 \emph on
 __naked
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31472,6 +32965,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31514,6 +33009,8 @@
 \emph default
  function modifier attribute prevents the compiler from generating prologue
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31524,6 +33021,8 @@
 
  and epilogue
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31533,18 +33032,20 @@
 \end_inset
 
  code for that function.
- This means that the user is entirely responsible for such things as saving
- any registers that may need to be preserved, selecting the proper register
- bank, generating the 
+ This means that the user is entirely responsible for such things as saving any registers that may need to be preserved,
+ selecting the proper register bank,
+ generating the 
 \emph on
 return
 \emph default
- instruction at the end, etc.
- Practically, this means that the contents of the function must be written
- in inline assembler.
- This is particularly useful for interrupt functions, which can have a large
- (and often unnecessary) prologue/epilogue.
- For example, compare the code generated by these two functions:
+ instruction at the end,
+ etc.
+ Practically,
+ this means that the contents of the function must be written in inline assembler.
+ This is particularly useful for interrupt functions,
+ which can have a large (and often unnecessary) prologue/epilogue.
+ For example,
+ compare the code generated by these two functions:
 \end_layout
 
 \begin_layout Verse
@@ -31552,6 +33053,8 @@
 \family typewriter
 volatile
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31570,6 +33073,8 @@
 
 void simpleInterrupt(void) __interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31580,6 +33085,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31675,6 +33182,8 @@
 
 __asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31756,7 +33265,9 @@
 \begin_inset space ~
 \end_inset
 
-_counter ; does not change flags, no need to save psw
+_counter ;
+ does not change flags,
+ no need to save psw
 \begin_inset Newline newline
 \end_inset
 
@@ -31800,7 +33311,8 @@
 \begin_inset space ~
 \end_inset
 
-; MUST explicitly include ret or reti in _naked function.
+;
+ MUST explicitly include ret or reti in _naked function.
 \begin_inset Newline newline
 \end_inset
 
@@ -31822,6 +33334,8 @@
 
 __endasm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -31863,13 +33377,15 @@
 \end_layout
 
 \begin_layout Standard
-For an 8051 target, the generated simpleInterrupt looks like:
+For an 8051 target,
+ the generated simpleInterrupt looks like:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-Note, this is an
+Note,
+ this is an
 \family default
  
 \family typewriter
@@ -31879,7 +33395,8 @@
 \emph default
  
 \family typewriter
-example, recent versions of SDCC generate
+example,
+ recent versions of SDCC generate
 \begin_inset Newline newline
 \end_inset
 
@@ -32427,7 +33944,9 @@
 \begin_inset space ~
 \end_inset
 
-_counter ; does not change flags, no need to save psw
+_counter ;
+ does not change flags,
+ no need to save psw
 \begin_inset Newline newline
 \end_inset
 
@@ -32495,12 +34014,15 @@
 \begin_inset space ~
 \end_inset
 
-; MUST explicitly include ret or reti in _naked function
+;
+ MUST explicitly include ret or reti in _naked function
 \end_layout
 
 \begin_layout Standard
 The related directive #pragma exclude
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -32523,6 +34045,8 @@
 
  allows a more fine grained control over pushing & popping
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -32539,7 +34063,8 @@
 \family typewriter
 _naked
 \family default
- function, there are many ways to shoot yourself in the foot doing this,
+ function,
+ there are many ways to shoot yourself in the foot doing this,
  and it is recommended that you stick to inline assembler.
 \end_layout
 
@@ -32548,15 +34073,12 @@
 \end_layout
 
 \begin_layout Standard
-SDCC allows the use of in-line assembler with a few restrictions regarding
- labels.
- All labels defined within inline assembler code have to be of the form
- 
+SDCC allows the use of in-line assembler with a few restrictions regarding labels.
+ All labels defined within inline assembler code have to be of the form 
 \emph on
 nnnnn$
 \emph default
- where nnnnn is a number less than 100 (which implies a limit of utmost
- 100 inline assembler labels 
+ where nnnnn is a number less than 100 (which implies a limit of utmost 100 inline assembler labels 
 \emph on
 per function
 \emph default
@@ -32568,24 +34090,22 @@
 status collapsed
 
 \begin_layout Plain Layout
-This is a slightly more stringent rule than absolutely necessary, but stays
- always on the safe side.
- Labels in the form of nnnnn$ are local labels in the assembler, locality
- of which is confined within two labels of the standard form.
- The compiler uses the same form for labels within a function (but starting
- from nnnnn=00100); and places always a standard label at the beginning
- of a function, thus limiting the locality of labels within the scope of
- the function.
- So, if the inline assembler part would be embedded into C-code, an improperly
- placed non-local label in the assembler would break up the reference space
- for labels created by the compiler for the C-code, leading to an assembling
- error.
+This is a slightly more stringent rule than absolutely necessary,
+ but stays always on the safe side.
+ Labels in the form of nnnnn$ are local labels in the assembler,
+ locality of which is confined within two labels of the standard form.
+ The compiler uses the same form for labels within a function (but starting from nnnnn=00100);
+ and places always a standard label at the beginning of a function,
+ thus limiting the locality of labels within the scope of the function.
+ So,
+ if the inline assembler part would be embedded into C-code,
+ an improperly placed non-local label in the assembler would break up the reference space for labels created by the compiler for the C-code,
+ leading to an assembling error.
 \end_layout
 
 \begin_layout Plain Layout
-The numeric part of local labels does not need to have 5 digits (although
- this is the form of labels output by the compiler), any valid integer will
- do.
+The numeric part of local labels does not need to have 5 digits (although this is the form of labels output by the compiler),
+ any valid integer will do.
  Please refer to the assemblers documentation for further details.
 \end_layout
 
@@ -32599,6 +34119,8 @@
 \family typewriter
 __asm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -32718,6 +34240,8 @@
 
 __endasm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -32755,9 +34279,11 @@
 \end_layout
 
 \begin_layout Standard
-Inline assembler code cannot reference any C-labels, however it can reference
- labels
+Inline assembler code cannot reference any C-labels,
+ however it can reference labels
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -32766,7 +34292,8 @@
 
 \end_inset
 
- defined by the inline assembler, e.g.:
+ defined by the inline assembler,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -32840,7 +34367,8 @@
 \begin_inset space ~
 \end_inset
 
-; some assembler code
+;
+ some assembler code
 \begin_inset Newline newline
 \end_inset
 
@@ -32925,12 +34453,13 @@
 status collapsed
 
 \begin_layout Plain Layout
-Here, the C-label 
+Here,
+ the C-label 
 \family typewriter
 clabel
 \family default
- is translated by the compiler into a local label, so the locality of labels
- within the function is not broken.
+ is translated by the compiler into a local label,
+ so the locality of labels within the function is not broken.
 \end_layout
 
 \end_inset
@@ -32975,7 +34504,8 @@
 \begin_inset space ~
 \end_inset
 
-0003$: ;label (can be referenced by inline assembler only)
+0003$:
+ ;label (can be referenced by inline assembler only)
 \begin_inset Newline newline
 \end_inset
 
@@ -32997,6 +34527,8 @@
 
 __endasm
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -33058,9 +34590,9 @@
 \end_layout
 
 \begin_layout Standard
-In other words inline assembly code can access labels defined in inline
- assembly within the scope of the function.
- The same goes the other way, i.e.
+In other words inline assembly code can access labels defined in inline assembly within the scope of the function.
+ The same goes the other way,
+ i.e.
  labels defines in inline assembly can not be accessed by C statements.
 \end_layout
 
@@ -33069,13 +34601,13 @@
 \end_layout
 
 \begin_layout Standard
-Depending on the target architecture, some integer multiplicative operators
- might be implemented by support routines.
- These support routines exist in portable C versions to facilitate porting
- to other MCUs, although depending on the target, assembler routines might
- be used instead.
- The following files contain some of the described routines, all of them
- can be found in <installdir>/share/sdcc/lib.
+Depending on the target architecture,
+ some integer multiplicative operators might be implemented by support routines.
+ These support routines exist in portable C versions to facilitate porting to other MCUs,
+ although depending on the target,
+ assembler routines might be used instead.
+ The following files contain some of the described routines,
+ all of them can be found in <installdir>/share/sdcc/lib.
 \begin_inset Newline newline
 \end_inset
 
@@ -33329,13 +34861,21 @@
 \end_layout
 
 \begin_layout Standard
-In the mcs51, ds390, hc08, s08, pdk13, pdk14, pdk15, pic14 and pic16 backends
- they are by default compiled as 
+In the mcs51,
+ ds390,
+ hc08,
+ s08,
+ pdk13,
+ pdk14,
+ pdk15,
+ pic14 and pic16 backends they are by default compiled as 
 \emph on
 non-reentrant
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -33344,8 +34884,12 @@
 
 \end_inset
 
-; when targeting on of these architectures, interrupt
+;
+ when targeting on of these architectures,
+ interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -33355,8 +34899,7 @@
 \end_inset
 
  service routines should not do any of the above operations.
- If this is unavoidable then the above routines will need to be compiled
- with the 
+ If this is unavoidable then the above routines will need to be compiled with the 
 \emph on
 -
 \begin_inset ERT
@@ -33373,6 +34916,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -33396,7 +34941,8 @@
 
 
 \emph default
- option, after which the source program will have to be compiled with 
+ option,
+ after which the source program will have to be compiled with 
 \emph on
 -
 \begin_inset ERT
@@ -33413,6 +34959,8 @@
 
 -int-long-reent
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -33438,13 +34986,14 @@
 \emph default
  option.
  Notice that you don't have to call these routines directly.
- The compiler will use them automatically every time an integer operation
- is required.
+ The compiler will use them automatically every time an integer operation is required.
 \end_layout
 
 \begin_layout Section
 Floating Point Support
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -33457,11 +35006,12 @@
 \end_layout
 
 \begin_layout Standard
-SDCC supports (single precision 4 bytes) floating point numbers; the format
- is somewhat similar to IEEE, but it is not IEEE; in particular, denormalized
- floating -point numbers are not supported.
- The floating point support routines are derived from gcc's floatlib.c and
- consist of the following routines:
+SDCC supports (single precision 4 bytes) floating point numbers;
+ the format is somewhat similar to IEEE,
+ but it is not IEEE;
+ in particular,
+ denormalized floating -point numbers are not supported.
+ The floating point support routines are derived from gcc's floatlib.c and consist of the following routines:
 \begin_inset Newline newline
 \end_inset
 
@@ -34180,6 +35730,8 @@
 \begin_layout Section
 Library Routines
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34194,8 +35746,8 @@
 \begin_layout Standard
 
 \emph on
-<pending: this is messy and incomplete - a little more information is at
- 
+<pending:
+ this is messy and incomplete - a little more information is at 
 \emph default
 
 \begin_inset Flex URL
@@ -34212,11 +35764,14 @@
 \end_layout
 
 \begin_layout Subsection
-Compiler support routines (_gptrget, _mulint etc.)
+Compiler support routines (_gptrget,
+ _mulint etc.)
 \end_layout
 
 \begin_layout Subsection
-Stdclib functions (puts, printf, strcat etc.)
+Stdclib functions (puts,
+ printf,
+ strcat etc.)
 \end_layout
 
 \begin_layout Subsubsection
@@ -34224,11 +35779,14 @@
 \end_layout
 
 \begin_layout Paragraph
-getchar(), putchar()
+getchar(),
+ putchar()
 \end_layout
 
 \begin_layout Standard
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34241,6 +35799,8 @@
 \family typewriter
 getchar()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34255,6 +35815,8 @@
 \family typewriter
 putchar()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34265,6 +35827,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34276,8 +35840,9 @@
 
 \family default
  routines.
- SDCC does not know whether the system connects to a serial line with or
- without handshake, LCD, keyboard or other device.
+ SDCC does not know whether the system connects to a serial line with or without handshake,
+ LCD,
+ keyboard or other device.
  And whether a 
 \family typewriter
 lf
@@ -34450,6 +36015,8 @@
 \family typewriter
 printf()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34466,6 +36033,8 @@
 \family default
  does not support float
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34474,8 +36043,11 @@
 
 \end_inset
 
- (except on ds390), only <NO FLOAT>
+ (except on ds390),
+ only <NO FLOAT>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34486,6 +36058,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34495,7 +36069,8 @@
 \end_inset
 
  will be printed instead of the value.
- To enable floating point output, recompile it with the option 
+ To enable floating point output,
+ recompile it with the option 
 \emph on
 -
 \begin_inset ERT
@@ -34512,6 +36087,8 @@
 
 DUSE_FLOATS=1
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34553,6 +36130,8 @@
 
 -model-large
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34576,11 +36155,14 @@
 
 
 \emph default
- for the mcs51 port, since this uses a lot of memory.
- To enable float support for the pic16 targets, see 
+ for the mcs51 port,
+ since this uses a lot of memory.
+ To enable float support for the pic16 targets,
+ see 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:pic16Libraries"
+nolink "false"
 
 \end_inset
 
@@ -34592,6 +36174,8 @@
 \family typewriter
 printf_small()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34628,6 +36212,8 @@
 \family typewriter
 printf_tiny()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34655,6 +36241,8 @@
 \family typewriter
 printf_fast()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34682,6 +36270,8 @@
 \family typewriter
 printf_fast_f()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -34718,9 +36308,7 @@
 
 
 \family default
- (floating-point aware version of printf_fast) which should fit the requirements
- of many embedded systems (printf_fast() can be customized by unsetting
- #defines to 
+ (floating-point aware version of printf_fast) which should fit the requirements of many embedded systems (printf_fast() can be customized by unsetting #defines to 
 \emph on
 not
 \emph default
@@ -34770,6 +36358,8 @@
 \begin_layout Plain Layout
 printf
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35342,6 +36932,8 @@
 \begin_layout Plain Layout
 float format
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35400,7 +36992,8 @@
 status collapsed
 
 \begin_layout Plain Layout
-Range limited to +/- 4294967040, precision limited to 8 digits past decimal
+Range limited to +/- 4294967040,
+ precision limited to 8 digits past decimal
 \end_layout
 
 \end_inset
@@ -35560,11 +37153,19 @@
 status collapsed
 
 \begin_layout Plain Layout
-Execution time of printf("%s%c%s%c%c%c", "Hello", ' ', "World", '!', '
+Execution time of printf("%s%c%s%c%c%c",
+ "Hello",
+ ' ',
+ "World",
+ '!',
+ '
 \backslash
-r', '
+r',
+ '
 \backslash
-n'); standard 8051 @ 22.1184 MHz, empty putchar()
+n');
+ standard 8051 @ 22.1184 MHz,
+ empty putchar()
 \end_layout
 
 \end_inset
@@ -35643,8 +37244,10 @@
 status collapsed
 
 \begin_layout Plain Layout
-Execution time of printf("%d", -12345); standard 8051 @ 22.1184 MHz, empty
- putchar()
+Execution time of printf("%d",
+ -12345);
+ standard 8051 @ 22.1184 MHz,
+ empty putchar()
 \end_layout
 
 \end_inset
@@ -35712,7 +37315,8 @@
 status collapsed
 
 \begin_layout Plain Layout
-printf_tiny integer speed is data dependent, worst case is 0.33 ms
+printf_tiny integer speed is data dependent,
+ worst case is 0.33 ms
 \end_layout
 
 \end_inset
@@ -35733,7 +37337,9 @@
 status collapsed
 
 \begin_layout Plain Layout
-Execution time of printf("%ld", -123456789); standard 8051 @ 22.1184 MHz,
+Execution time of printf("%ld",
+ -123456789);
+ standard 8051 @ 22.1184 MHz,
  empty putchar()
 \end_layout
 
@@ -35813,7 +37419,9 @@
 status collapsed
 
 \begin_layout Plain Layout
-Execution time of printf("%.3f", -12345.678); standard 8051 @ 22.1184 MHz,
+Execution time of printf("%.3f",
+ -12345.678);
+ standard 8051 @ 22.1184 MHz,
  empty putchar()
 \end_layout
 
@@ -35893,6 +37501,8 @@
 \begin_layout Subsubsection
 <malloc.h>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35905,9 +37515,10 @@
 \end_layout
 
 \begin_layout Standard
-As of SDCC 2.6.2 you no longer need to call an initialization routine before
- using dynamic memory allocation
+As of SDCC 2.6.2 you no longer need to call an initialization routine before using dynamic memory allocation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35918,6 +37529,8 @@
 
  and a default heap
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35927,10 +37540,8 @@
 \end_inset
 
  space of 1024 bytes is provided for malloc to allocate memory from.
- If you need a different heap size you need to recompile _heap.c with the
- required size defined in HEAP_SIZE.
- It is recommended to make a copy of this file into your project directory
- and compile it there with:
+ If you need a different heap size you need to recompile _heap.c with the required size defined in HEAP_SIZE.
+ It is recommended to make a copy of this file into your project directory and compile it there with:
 \end_layout
 
 \begin_layout Verse
@@ -35950,7 +37561,9 @@
 \end_layout
 
 \begin_layout Subsection
-Math functions (sinf, powf, sqrtf etc.)
+Math functions (sinf,
+ powf,
+ sqrtf etc.)
 \end_layout
 
 \begin_layout Subsubsection
@@ -35968,6 +37581,8 @@
 \begin_layout Standard
 Libraries
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35978,6 +37593,8 @@
 
  included in SDCC should have a license at least as liberal as the GPLv2+LE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -35987,23 +37604,36 @@
 \end_inset
 
 .
- Exception are pic device libraries and header files which are derived from
- Microchip header (.inc) and linker script (.lkr) files.
- Microchip requires that "The header files should state that they are only
- to be used with authentic Microchip devices" which makes them incompatible
- with GPL.
+ Exception are pic device libraries and header files which are derived from Microchip header (.inc) and linker script (.lkr) files.
+ Microchip requires that "The header files should state that they are only to be used with authentic Microchip devices" which makes them incompatible with GPL.
 \end_layout
 
 \begin_layout Standard
-If you have ported some library or want to share experience about some code
- which f.e.
+If you have ported some library or want to share experience about some code which f.e.
  falls into any of these categories Busses (I
 \begin_inset Formula $^{\textrm{2}}$
 \end_inset
 
-C, CAN, Ethernet, Profibus, Modbus, USB, SPI, JTAG ...), Media (IDE, Memory
- cards, eeprom, flash...), En-/Decryption, Remote debugging, Realtime kernel,
- Keyboard, LCD, RTC, FPGA, PID then the sdcc-user mailing list 
+C,
+ CAN,
+ Ethernet,
+ Profibus,
+ Modbus,
+ USB,
+ SPI,
+ JTAG ...),
+ Media (IDE,
+ Memory cards,
+ eeprom,
+ flash...),
+ En-/Decryption,
+ Remote debugging,
+ Realtime kernel,
+ Keyboard,
+ LCD,
+ RTC,
+ FPGA,
+ PID then the sdcc-user mailing list 
 \begin_inset Flex URL
 status collapsed
 
@@ -36018,9 +37648,8 @@
 \end_layout
 
 \begin_layout Standard
-Programmers coding for embedded systems are not especially famous for being
- enthusiastic, so don't expect a big hurray but as the mailing list is searchabl
-e these references are very valuable.
+Programmers coding for embedded systems are not especially famous for being enthusiastic,
+ so don't expect a big hurray but as the mailing list is searchable these references are very valuable.
  Let's help to create a climate where information is shared.
 \end_layout
 
@@ -36031,6 +37660,8 @@
 \begin_layout Subsection
 MCS51 Memory Models
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36041,6 +37672,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36053,13 +37686,18 @@
 \end_layout
 
 \begin_layout Subsubsection
-Small, Medium, Large and Huge
+Small,
+ Medium,
+ Large and Huge
 \end_layout
 
 \begin_layout Standard
-SDCC allows four memory models for MCS51 code, 
+SDCC allows four memory models for MCS51 code,
+ 
 \shape slanted
-small, medium, large
+small,
+ medium,
+ large
 \shape default
  and 
 \shape slanted
@@ -36071,19 +37709,20 @@
 never
 \emph default
  be combined together or the results would be unpredictable.
- The library routines supplied with the compiler are compiled for all models
- (however, the libraries for –stack-auto are compiled for the small and
- large models only).
+ The library routines supplied with the compiler are compiled for all models (however,
+ the libraries for –stack-auto are compiled for the small and large models only).
  The compiled library modules are contained in separate directories as small,
- medium, large and huge so that you can link to the appropriate set.
+ medium,
+ large and huge so that you can link to the appropriate set.
 \end_layout
 
 \begin_layout Standard
-When the medium, large or huge model is used all variables declared without
- specifying an intrinsic named address space will be allocated into the
- external ram, this includes all parameters and local variables (for non-reentra
-nt
+When the medium,
+ large or huge model is used all variables declared without specifying an intrinsic named address space will be allocated into the external ram,
+ this includes all parameters and local variables (for non-reentrant
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36094,8 +37733,7 @@
 
  functions).
  Medium model uses pdata and large and huge models use xdata.
- When the small model is used variables without an explicitly specified
- intrinsic named address space are allocated in the internal ram.
+ When the small model is used variables without an explicitly specified intrinsic named address space are allocated in the internal ram.
 \end_layout
 
 \begin_layout Standard
@@ -36105,6 +37743,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Bankswitching"
+nolink "false"
 
 \end_inset
 
@@ -36117,6 +37756,8 @@
 \begin_layout Standard
 Judicious usage of the processor specific intrinsic named address spaces
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -36127,9 +37768,8 @@
 
  and the 'reentrant' function type will yield much more efficient code,
  than using the large model.
- Several optimizations are disabled when the program is compiled using the
- large model, it is therefore recommended that the small model be used unless
- absolutely required.
+ Several optimizations are disabled when the program is compiled using the large model,
+ it is therefore recommended that the small model be used unless absolutely required.
 \end_layout
 
 \begin_layout Subsubsection
@@ -36142,6 +37782,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36152,6 +37794,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36179,6 +37823,8 @@
 
 -xstack option
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36202,6 +37848,8 @@
 
 ) is located in pdata
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36230,13 +37878,13 @@
 
 \end_inset
 
-pdata (mcs51, ds390 named address space)
+pdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
- memory (usually at the start of the external ram segment) and uses all
- unused space in pdata (max.
+ memory (usually at the start of the external ram segment) and uses all unused space in pdata (max.
  256 bytes).
  When -
 \begin_inset ERT
@@ -36251,9 +37899,11 @@
 
 \end_inset
 
--xstack option is used to compile the program, the parameters and local
- variables
+-xstack option is used to compile the program,
+ the parameters and local variables
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36279,6 +37929,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36300,16 +37952,17 @@
 
 \end_inset
 
- option, all parameters and local variables are allocated on the external
- stack (note: support libraries will need to be recompiled with the same
- options.
+ option,
+ all parameters and local variables are allocated on the external stack (note:
+ support libraries will need to be recompiled with the same options.
  There is a predefined target in the library makefile).
 \end_layout
 
 \begin_layout Standard
-The compiler outputs the higher order address byte of the external ram segment
- into port P2
+The compiler outputs the higher order address byte of the external ram segment into port P2
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36322,10 +37975,13 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:MCS51-variants"
+nolink "false"
 
 \end_inset
 
-), therefore when using the External Stack option, this port 
+),
+ therefore when using the External Stack option,
+ this port 
 \emph on
 may not
 \emph default
@@ -36335,6 +37991,8 @@
 \begin_layout Subsection
 DS390 Memory Model
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36345,6 +38003,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36359,6 +38019,8 @@
 \begin_layout Standard
 The only model supported is Flat 24
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36368,10 +38030,9 @@
 \end_inset
 
 .
- This generates code for the 24 bit contiguous addressing mode of the Dallas
- DS80C390 part.
- In this mode, up to four meg of external RAM or code space can be directly
- addressed.
+ This generates code for the 24 bit contiguous addressing mode of the Dallas DS80C390 part.
+ In this mode,
+ up to four meg of external RAM or code space can be directly addressed.
  See the data sheets at www.dalsemi.com for further information on this part.
 \begin_inset Newline newline
 \end_inset
@@ -36380,8 +38041,7 @@
 \begin_inset Newline newline
 \end_inset
 
-Note that the compiler does not generate any code to place the processor
- into 24 bit mode (although 
+Note that the compiler does not generate any code to place the processor into 24 bit mode (although 
 \emph on
 tinibios
 \emph default
@@ -36392,6 +38052,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36400,8 +38062,8 @@
 
 \end_inset
 
-, the boot loader or similar code must ensure that the processor is in 24
- bit contiguous addressing mode before calling the SDCC startup code.
+,
+ the boot loader or similar code must ensure that the processor is in 24 bit contiguous addressing mode before calling the SDCC startup code.
 \begin_inset Newline newline
 \end_inset
 
@@ -36426,7 +38088,8 @@
 
 -model-large
 \emph default
- option, variables will by default be placed into the XDATA segment.
+ option,
+ variables will by default be placed into the XDATA segment.
 \begin_inset Newline newline
 \end_inset
 
@@ -36434,8 +38097,7 @@
 \begin_inset Newline newline
 \end_inset
 
-Segments may be placed anywhere in the 4 meg address space using the usual
- -
+Segments may be placed anywhere in the 4 meg address space using the usual -
 \begin_inset ERT
 status collapsed
 
@@ -36449,20 +38111,23 @@
 \end_inset
 
 -*-loc options.
- Note that if any segments are located above 64K, the -r flag must be passed
- to the linker to generate the proper segment relocations, and the Intel
- HEX output format must be used.
+ Note that if any segments are located above 64K,
+ the -r flag must be passed to the linker to generate the proper segment relocations,
+ and the Intel HEX output format must be used.
  The -r flag can be passed to the linker by using the option 
 \emph on
 -Wl-r
 \emph default
  on the SDCC command line.
- However, currently the linker can not handle code segments > 64k.
+ However,
+ currently the linker can not handle code segments > 64k.
 \end_layout
 
 \begin_layout Subsection
 STM8 Memory Models
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36473,6 +38138,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -36485,7 +38152,8 @@
 \end_layout
 
 \begin_layout Standard
-SDCC implements two memory models for the STM8: 
+SDCC implements two memory models for the STM8:
+ 
 \emph on
 medium
 \emph default
@@ -36505,24 +38173,24 @@
 \begin_layout Standard
 In the medium model the address space is 16 bits for both objects and functions,
  allowing for a memory space of 64 KB.
- Since the STM8 typically has Flash starting at 0x8000, this means that
- only up to 32 KB of Flash can be used (most STM8 devices don't have more
- than 32 KB of Flash).
+ Since the STM8 typically has Flash starting at 0x8000,
+ this means that only up to 32 KB of Flash can be used (most STM8 devices don't have more than 32 KB of Flash).
 \end_layout
 
 \begin_layout Standard
-In the large memory model, the address space is 16 bits for objects and
- 24 bits for functions.
- Since the STM8 typically has flash starting at 0x8000, this means that
- up to 32 KB of flash can be used for constant data, while the whole Flash
- can be used for functions.
- Code generated for the large model is slightly bigger and slower and needs
- slightly more stack space than code generated for the medium model.
+In the large memory model,
+ the address space is 16 bits for objects and 24 bits for functions.
+ Since the STM8 typically has flash starting at 0x8000,
+ this means that up to 32 KB of flash can be used for constant data,
+ while the whole Flash can be used for functions.
+ Code generated for the large model is slightly bigger and slower and needs slightly more stack space than code generated for the medium model.
 \end_layout
 
 \begin_layout Subsection
 MOS6502 Memory Models
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36533,6 +38201,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36545,7 +38215,8 @@
 \end_layout
 
 \begin_layout Standard
-SDCC implements two memory models for the MOS6502: 
+SDCC implements two memory models for the MOS6502:
+ 
 \emph on
 small
 \emph default
@@ -36568,12 +38239,10 @@
 \end_layout
 
 \begin_layout Standard
-In the large memory model, data is placed by default in 16-bit addressable
- memory.
- Critical data can still be placed in Page Zero using the __ZP or __near
- storage modifier.
- Code generated for the large model is slightly bigger and slower than code
- generated for the small model.
+In the large memory model,
+ data is placed by default in 16-bit addressable memory.
+ Critical data can still be placed in Page Zero using the __ZP or __near storage modifier.
+ Code generated for the large model is slightly bigger and slower than code generated for the small model.
 \end_layout
 
 \begin_layout Section
@@ -36586,6 +38255,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36599,11 +38270,11 @@
 
 \begin_layout Standard
 Pragmas are used to turn on and/or off certain compiler options.
- Some of them are closely related to corresponding command-line options
- (see section 
+ Some of them are closely related to corresponding command-line options (see section 
 \begin_inset CommandInset ref
 LatexCommand vref
 reference "sec:Command-Line-Options"
+nolink "false"
 
 \end_inset
 
@@ -36611,8 +38282,8 @@
 \begin_inset Newline newline
 \end_inset
 
-Pragmas should be placed before and/or after a function, placing pragmas
- inside a function body could have unpredictable results.
+Pragmas should be placed before and/or after a function,
+ placing pragmas inside a function body could have unpredictable results.
 \begin_inset Newline newline
 \end_inset
 
@@ -36630,6 +38301,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36665,6 +38338,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36687,7 +38362,8 @@
 
  - will restore saved options from the last save.
  saves & restores can be nested.
- SDCC uses a save/restore stack: save pushes current options to the stack,
+ SDCC uses a save/restore stack:
+ save pushes current options to the stack,
  restore pulls current options from the stack.
  See #pragma
 \begin_inset space ~
@@ -36707,6 +38383,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36742,6 +38420,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36757,10 +38437,11 @@
 
 \end_inset
 
-- The compiler by default uses a caller saves convention for register saving
- across function calls, however this can cause unnecessary register pushing
- and popping
+- The compiler by default uses a caller saves convention for register saving across function calls,
+ however this can cause unnecessary register pushing and popping
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36770,14 +38451,11 @@
 \end_inset
 
  when calling small functions from larger functions.
- This option can be used to switch off the register saving convention for
- the function names specified.
- The compiler will not save registers when calling these functions, extra
- code need to be manually inserted at the entry and exit for these functions
- to save and restore the registers used by these functions, this can SUBSTANTIAL
-LY reduce code and improve run time performance of the generated code.
- In the future the compiler (with inter procedural analysis) may be able
- to determine the appropriate scheme to use for each function call.
+ This option can be used to switch off the register saving convention for the function names specified.
+ The compiler will not save registers when calling these functions,
+ extra code need to be manually inserted at the entry and exit for these functions to save and restore the registers used by these functions,
+ this can SUBSTANTIALLY reduce code and improve run time performance of the generated code.
+ In the future the compiler (with inter procedural analysis) may be able to determine the appropriate scheme to use for each function call.
  If -
 \begin_inset ERT
 status collapsed
@@ -36795,15 +38473,19 @@
 \begin_inset CommandInset ref
 LatexCommand vpageref
 reference "lyx:--callee-saves-function1[,function2][,function3]..."
+nolink "false"
 
 \end_inset
 
-), the function names specified in #pragma
+),
+ the function names specified in #pragma
 \begin_inset space ~
 \end_inset
 
 callee_saves
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36847,6 +38529,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36867,9 +38551,10 @@
 
 \end_inset
 
- none | {acc[,b[,dpl[,dph[,bits]]]]} - The exclude pragma disables the generatio
-n of pairs of push/pop
+ none | {acc[,b[,dpl[,dph[,bits]]]]} - The exclude pragma disables the generation of pairs of push/pop
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36884,6 +38569,8 @@
 \emph default
 nterrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36901,8 +38588,7 @@
 R
 \emph default
 outines.
- The directive should be placed immediately before the ISR function definition
- and it affects ALL ISR functions following it.
+ The directive should be placed immediately before the ISR function definition and it affects ALL ISR functions following it.
  To enable the normal register saving for ISR functions use #pragma
 \begin_inset space ~
 \end_inset
@@ -36913,6 +38599,8 @@
 
 none
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36940,6 +38628,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -36962,6 +38652,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37005,6 +38697,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37015,6 +38709,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37055,8 +38751,8 @@
 
 \end_inset
 
- - the compiler will not warn you anymore for obvious mistakes, you're on
- your own now ;-(.
+ - the compiler will not warn you anymore for obvious mistakes,
+ you're on your own now ;-(.
  See also the command line option -
 \begin_inset ERT
 status collapsed
@@ -37074,6 +38770,7 @@
 \begin_inset CommandInset ref
 LatexCommand vpageref
 reference "lyx:--less-pedantic"
+nolink "false"
 
 \end_inset
 
@@ -37082,19 +38779,25 @@
 \begin_inset Newline newline
 \end_inset
 
-More specifically, the following warnings will be disabled: 
+More specifically,
+ the following warnings will be disabled:
+ 
 \shape italic
 comparison is always [true/false] due to limited range of data type
 \shape default
- (94); 
+ (94);
+ 
 \shape italic
 overflow in implicit constant conversion
 \shape default
- (158); [the (in)famous] 
+ (158);
+ [the (in)famous] 
 \shape italic
-conditional flow changed by optimizer: so said EVELYN the modified DOG
+conditional flow changed by optimizer:
+ so said EVELYN the modified DOG
 \shape default
- (110); 
+ (110);
+ 
 \shape italic
 function '[function name]' must return value
 \shape default
@@ -37103,8 +38806,11 @@
 \begin_inset Newline newline
 \end_inset
 
-Furthermore, warnings of less importance (of PEDANTIC and INFO warning level)
- are disabled, too, namely: 
+Furthermore,
+ warnings of less importance (of PEDANTIC and INFO warning level) are disabled,
+ too,
+ namely:
+ 
 \shape italic
 constant value '[
 \begin_inset Note Note
@@ -37116,33 +38822,41 @@
 
 \end_inset
 
-]', out of range
+]',
+ out of range
 \shape default
- (81); 
+ (81);
+ 
 \shape italic
 [left/right] shifting more than size of object changed to zero
 \shape default
- (116); 
+ (116);
+ 
 \shape italic
 unreachable code
 \shape default
- (126); 
+ (126);
+ 
 \shape italic
 integer overflow in expression
 \shape default
- (165); 
+ (165);
+ 
 \shape italic
 unmatched #pragma save and #pragma restore
 \shape default
- (170); 
+ (170);
+ 
 \shape italic
 comparison of 'signed char' with 'unsigned char' requires promotion to int
 \shape default
- (185); 
+ (185);
+ 
 \shape italic
 ISO C90 does not support flexible array members
 \shape default
- (187); 
+ (187);
+ 
 \shape italic
 extended stack by [number] bytes for compiler temp(s) :in function '[function
 \begin_inset space ~
@@ -37164,10 +38878,13 @@
 
 ]
 \shape default
- (114); 
+ (114);
+ 
 \shape italic
-function '[function name]', # edges [number] , # nodes [number] , cyclomatic
- complexity [number]
+function '[function name]',
+ # edges [number] ,
+ # nodes [number] ,
+ cyclomatic complexity [number]
 \shape default
  (121).
 \end_layout
@@ -37179,6 +38896,8 @@
 \series default
  <nnnn>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37222,6 +38941,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37252,6 +38973,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37282,6 +39005,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37307,6 +39032,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Loop-Optimizations"
+nolink "false"
 
 \end_inset
 
@@ -37320,6 +39046,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37342,6 +39070,8 @@
 
  - Do not generate interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37352,6 +39082,8 @@
 
  vector table
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37361,19 +39093,20 @@
 \end_inset
 
  entries for all ISR functions defined after the pragma.
- This is useful in cases where the interrupt vector table must be defined
- manually, or when there is a secondary, manually defined interrupt vector
- table (e.g.
+ This is useful in cases where the interrupt vector table must be defined manually,
+ or when there is a secondary,
+ manually defined interrupt vector table (e.g.
  for the autovector feature of the Cypress EZ-USB FX2).
- More elegantly this can be achieved by omitting the optional interrupt
- number after the 
+ More elegantly this can be achieved by omitting the optional interrupt number after the 
 \emph on
 __interrupt
 \emph default
- keyword, see section 
+ keyword,
+ see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Interrupt-Service-Routines"
+nolink "false"
 
 \end_inset
 
@@ -37391,6 +39124,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37421,6 +39156,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37441,8 +39178,7 @@
 
 \end_inset
 
- - the compiler will not overlay the parameters and local variables of a
- function.
+ - the compiler will not overlay the parameters and local variables of a function.
 \end_layout
 
 \begin_layout Itemize
@@ -37452,6 +39188,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37487,6 +39225,8 @@
 
 -stack-auto
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37512,6 +39252,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Parameters-and-Local-Variables"
+nolink "false"
 
 \end_inset
 
@@ -37525,6 +39266,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37571,8 +39314,8 @@
 
 \end_inset
 
-- The compiler will optimize code generation towards fast code, possibly
- at the expense of code size.
+- The compiler will optimize code generation towards fast code,
+ possibly at the expense of code size.
 \end_layout
 
 \begin_layout Itemize
@@ -37582,6 +39325,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37628,8 +39373,8 @@
 
 \end_inset
 
-- The compiler will optimize code generation towards compact code, possibly
- at the expense of code speed.
+- The compiler will optimize code generation towards compact code,
+ possibly at the expense of code speed.
  
 \end_layout
 
@@ -37640,6 +39385,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37687,8 +39434,7 @@
 \end_inset
 
 - The compiler will attempt to generate code that is both compact and fast,
- as long as meeting one goal is not a detriment to the other (this is the
- default).
+ as long as meeting one goal is not a detriment to the other (this is the default).
  
 \end_layout
 
@@ -37699,6 +39445,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37732,8 +39480,8 @@
 
 \end_inset
 
-- Generally follow the C89 standard, but allow SDCC features that conflict
- with the standard.
+- Generally follow the C89 standard,
+ but allow SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -37743,6 +39491,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37776,8 +39526,7 @@
 
 \end_inset
 
-- Follow the C89 standard and disable SDCC features that conflict with the
- standard.
+- Follow the C89 standard and disable SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -37787,6 +39536,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37820,8 +39571,8 @@
 
 \end_inset
 
-- Generally follow the C99 standard, but allow SDCC features that conflict
- with the standard.
+- Generally follow the C99 standard,
+ but allow SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -37831,6 +39582,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -37864,8 +39617,7 @@
 
 \end_inset
 
-- Follow the C99 standard and disable SDCC features that conflict with the
- standard.
+- Follow the C99 standard and disable SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -37875,6 +39627,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -37908,8 +39662,7 @@
 
 \end_inset
 
-- Follow the C11 standard and disable SDCC features that conflict with the
- standard.
+- Follow the C11 standard and disable SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -37919,6 +39672,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -37952,8 +39707,8 @@
 
 \end_inset
 
-- Follow the C11 standard, but allow SDCC features that conflict with the
- standard.
+- Follow the C11 standard,
+ but allow SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -37963,6 +39718,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -37996,8 +39753,8 @@
 
 \end_inset
 
-- Follow the C23 standard and disable SDCC features that conflict with the
- standard (for backwards compatibility, 
+- Follow the C23 standard and disable SDCC features that conflict with the standard (for backwards compatibility,
+ 
 \series bold
 std_c2x
 \series default
@@ -38011,6 +39768,8 @@
 \series default
  
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -38044,8 +39803,8 @@
 
 \end_inset
 
-- Generally follow the C23 standard, but allow SDCC features that conflict
- with the standard.
+- Generally follow the C23 standard,
+ but allow SDCC features that conflict with the standard.
 \end_layout
 
 \begin_layout Itemize
@@ -38055,6 +39814,8 @@
 \series default
  <name>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38100,6 +39861,8 @@
 \series default
  <name>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38141,6 +39904,8 @@
 \begin_layout Standard
 The preprocessor
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38151,6 +39916,8 @@
 
  SDCPP
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38169,6 +39936,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38212,6 +39981,8 @@
 \family typewriter
 #pragma preproc_asm -
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38373,7 +40144,8 @@
 \begin_inset space ~
 \end_inset
 
-; this is an assembler nop instruction
+;
+ this is an assembler nop instruction
 \begin_inset Newline newline
 \end_inset
 
@@ -38389,7 +40161,8 @@
 \begin_inset space ~
 \end_inset
 
-; it is not preprocessed to ';' since the asm preprocessing is disabled
+;
+ it is not preprocessed to ';' since the asm preprocessing is disabled
 \begin_inset Newline newline
 \end_inset
 
@@ -38449,13 +40222,10 @@
 \end_layout
 
 \begin_layout Verse
-The pragma preproc_asm should not be used to define multilines of assembly
- code (even if it supports it), since this behavior is only a side effect
- of sdcpp __asm __endasm implementation in combination with pragma preproc_asm
- and is not in conformance with the C standard.
+The pragma preproc_asm should not be used to define multilines of assembly code (even if it supports it),
+ since this behavior is only a side effect of sdcpp __asm __endasm implementation in combination with pragma preproc_asm and is not in conformance with the C standard.
  This behavior might be changed in the future sdcpp versions.
- To define multilines of assembly code you have to include each assembly
- line into it's own __asm __endasm block.
+ To define multilines of assembly code you have to include each assembly line into it's own __asm __endasm block.
  Below is an example for multiline assembly defines.
 \end_layout
 
@@ -38482,13 +40252,15 @@
 \begin_inset Newline newline
 \end_inset
 
-#define ThreeNops Nop; 
+#define ThreeNops Nop;
+ 
 \backslash
 
 \begin_inset Newline newline
 \end_inset
 
-Nop; 
+Nop;
+ 
 \backslash
 
 \begin_inset Newline newline
@@ -38572,6 +40344,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38615,7 +40389,8 @@
 
 \end_inset
 
- Allow "naked" hash in macro definition, for example:
+ Allow "naked" hash in macro definition,
+ for example:
 \begin_inset Newline newline
 \end_inset
 
@@ -38640,6 +40415,8 @@
 
 #pragma sdcc_hash +
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38699,7 +40476,8 @@
 \begin_inset space ~
 \end_inset
 
-mov R6_B3, #(x & 0xff) 
+mov R6_B3,
+ #(x & 0xff) 
 \backslash
 
 \begin_inset Newline newline
@@ -38717,7 +40495,8 @@
 \begin_inset space ~
 \end_inset
 
-mov R7_B3, #((x >> 8) & 0xff) 
+mov R7_B3,
+ #((x >> 8) & 0xff) 
 \backslash
 
 \begin_inset Newline newline
@@ -38767,12 +40546,10 @@
 \end_layout
 
 \begin_layout Standard
-Some of the pragmas are intended to be used to turn-on or off certain optimizati
-ons which might cause the compiler to generate extra stack and/or data space
- to store compiler generated temporary variables.
+Some of the pragmas are intended to be used to turn-on or off certain optimizations which might cause the compiler to generate extra stack and/or data space to store compiler generated temporary variables.
  This usually happens in large functions.
- Pragma directives should be used as shown in the following example, they
- are used to control options and optimizations for a given function.
+ Pragma directives should be used as shown in the following example,
+ they are used to control options and optimizations for a given function.
  
 \end_layout
 
@@ -38781,6 +40558,8 @@
 \family typewriter
 #pragma save
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38835,6 +40614,8 @@
 
 #pragma nogcse
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38881,6 +40662,8 @@
 
 #pragma noinduction
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38955,6 +40738,8 @@
 
 #pragma restore
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -38980,8 +40765,7 @@
 
 \begin_layout Standard
 The compiler will generate a warning message when extra space is allocated.
- It is strongly recommended that the save and restore pragmas be used when
- changing options for a function.
+ It is strongly recommended that the save and restore pragmas be used when changing options for a function.
 \end_layout
 
 \begin_layout Section
@@ -38989,9 +40773,11 @@
 \end_layout
 
 \begin_layout Standard
-Besides defines from the C standards, the compiler creates the following
- #defines
+Besides defines from the C standards,
+ the compiler creates the following #defines
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39014,6 +40800,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39066,6 +40854,8 @@
 \begin_layout Plain Layout
 __SDCC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39076,6 +40866,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39117,10 +40909,8 @@
 \begin_layout Plain Layout
 OBSOLETE.
  WILL BE REMOVED IN THE FUTURE.
- CURRENTLY Only defined for the mcs51 backend (and only if –std-cXX is not
- used).
- This macro has been available since SDCC 2.5.6 and is the version number
- as an int (ex.
+ CURRENTLY Only defined for the mcs51 backend (and only if –std-cXX is not used).
+ This macro has been available since SDCC 2.5.6 and is the version number as an int (ex.
  256).
  PLEASE USE OTHER VERSION MACROS INSTEAD!
 \end_layout
@@ -39135,6 +40925,8 @@
 \begin_layout Plain Layout
 __SDCC_mcs51
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39158,6 +40950,8 @@
 
  or __SDCC_ds390
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39181,6 +40975,8 @@
 
  or __SDCC_z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39202,7 +40998,8 @@
 
 \end_inset
 
-, etc.
+,
+ etc.
 \end_layout
 
 \end_inset
@@ -39211,8 +41008,10 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-depending on the model used (e.g.: -mds390).
- Older versions used SDCC_mcs51, etc instead.
+depending on the model used (e.g.:
+ -mds390).
+ Older versions used SDCC_mcs51,
+ etc instead.
 \end_layout
 
 \end_inset
@@ -39225,6 +41024,8 @@
 \begin_layout Plain Layout
 __SDCC_STACK_AUTO
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39298,6 +41099,8 @@
 \begin_layout Plain Layout
 __SDCC_MODEL_SMALL
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39371,6 +41174,8 @@
 \begin_layout Plain Layout
 __SDCC_MODEL_MEDIUM
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39444,6 +41249,8 @@
 \begin_layout Plain Layout
 __SDCC_MODEL_LARGE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39517,6 +41324,8 @@
 \begin_layout Plain Layout
 __SDCC_MODEL_HUGE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39590,6 +41399,8 @@
 \begin_layout Plain Layout
 __SDCC_USE_XSTACK
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39663,6 +41474,8 @@
 \begin_layout Plain Layout
 __SDCC_STACK_TENBIT
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39723,6 +41536,8 @@
 \begin_layout Plain Layout
 __SDCC_MODEL_FLAT24
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39852,6 +41667,8 @@
 \begin_layout Plain Layout
 __SDCC_REVISION
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39897,6 +41714,8 @@
 \begin_layout Plain Layout
 SDCC_PARMS_IN_BANK1
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -39983,6 +41802,8 @@
 \begin_layout Plain Layout
 __SDCC_ALL_CALLEE_SAVES
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40069,6 +41890,8 @@
 \begin_layout Plain Layout
 __SDCC_FLOAT_REENT
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40142,6 +41965,8 @@
 \begin_layout Plain Layout
 __SDCC_INT_LONG_REENT
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40228,6 +42053,8 @@
 \begin_layout Plain Layout
 __SDCC_OPTIMIZE_SPEED
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40301,6 +42128,8 @@
 \begin_layout Plain Layout
 __SDCC_OPTIMIZE_SIZE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40374,6 +42203,8 @@
 \begin_layout Plain Layout
 __SDCCCALL
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40418,6 +42249,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40430,10 +42263,8 @@
 \end_layout
 
 \begin_layout Standard
-MCS51 processors are available from many vendors and come in many different
- flavours.
- While they might differ considerably in respect to Special Function Registers
- the core MCS51 is usually not modified or is kept compatible.
+MCS51 processors are available from many vendors and come in many different flavours.
+ While they might differ considerably in respect to Special Function Registers the core MCS51 is usually not modified or is kept compatible.
  
 \end_layout
 
@@ -40442,9 +42273,10 @@
 \end_layout
 
 \begin_layout Standard
-With the upcome of devices with internal xdata and flash memory devices
- using port P2
+With the upcome of devices with internal xdata and flash memory devices using port P2
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40456,6 +42288,8 @@
  as dedicated I/O port is becoming more popular.
  Switching the high byte for __pdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -40484,14 +42318,16 @@
 
 \end_inset
 
-pdata (mcs51, ds390 named address space)
+pdata (mcs51,
+ ds390 named address space)
 \end_layout
 
 \end_inset
 
- access which was formerly done by port P2 is then achieved by a Special
- Function Register
+ access which was formerly done by port P2 is then achieved by a Special Function Register
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40507,11 +42343,13 @@
 \emph default
  is where the chip designers decided to put it.
  Needless to say that they didn't agree on a common name either.
- So that the startup code can correctly initialize xdata variables, you
- should define an sfr with the name _XPAGE
+ So that the startup code can correctly initialize xdata variables,
+ you should define an sfr with the name _XPAGE
 \family typewriter
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40534,53 +42372,58 @@
 
 
 \family default
- at the appropriate location if the default, port P2, is not used for this.
+ at the appropriate location if the default,
+ port P2,
+ is not used for this.
  Some examples are:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-__sfr __at (0x85) _XPAGE; /* Ramtron VRS51 family a.k.a.
+__sfr __at (0x85) _XPAGE;
+ /* Ramtron VRS51 family a.k.a.
  MPAGE */
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-__sfr __at (0x92) _XPAGE; /* Cypress EZ-USB family, Texas Instruments (Chipcon)
- a.k.a.
+__sfr __at (0x92) _XPAGE;
+ /* Cypress EZ-USB family,
+ Texas Instruments (Chipcon) a.k.a.
  MPAGE */
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-__sfr __at (0x91) _XPAGE; /* Infineon (Siemens) C500 family a.k.a.
+__sfr __at (0x91) _XPAGE;
+ /* Infineon (Siemens) C500 family a.k.a.
  XPAGE */
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-__sfr __at (0xaf) _XPAGE; /* some Silicon Labs (Cygnal) chips a.k.a.
+__sfr __at (0xaf) _XPAGE;
+ /* some Silicon Labs (Cygnal) chips a.k.a.
  EMI0CN */
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-__sfr __at (0xaa) _XPAGE; /* some Silicon Labs (Cygnal) chips a.k.a.
+__sfr __at (0xaa) _XPAGE;
+ /* some Silicon Labs (Cygnal) chips a.k.a.
  EMI0CN */
 \end_layout
 
 \begin_layout Standard
-There are also devices without anything resembling _XPAGE, but luckily they
- usually have dual data-pointers.
- For these devices a different method can be used to correctly initialize
- xdata variables.
- A default implementation is already in crtxinit.asm but it needs to be assembled
- manually with DUAL_DPTR set to 1.
+There are also devices without anything resembling _XPAGE,
+ but luckily they usually have dual data-pointers.
+ For these devices a different method can be used to correctly initialize xdata variables.
+ A default implementation is already in crtxinit.asm but it needs to be assembled manually with DUAL_DPTR set to 1.
 \end_layout
 
 \begin_layout Standard
@@ -40589,6 +42432,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:MCS51-Startup-Code"
+nolink "false"
 
 \end_inset
 
@@ -40602,6 +42446,8 @@
 \begin_layout Standard
 Some MCS51 variants offer features like Dual DPTR
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40610,10 +42456,12 @@
 
 \end_inset
 
-, multiple DPTR, decrementing DPTR, 16x16 Multiply.
+,
+ multiple DPTR,
+ decrementing DPTR,
+ 16x16 Multiply.
  These are currently not used for the MCS51 port.
- If you absolutely need them you can fall back to inline assembly or submit
- a patch to SDCC.
+ If you absolutely need them you can fall back to inline assembly or submit a patch to SDCC.
 \end_layout
 
 \begin_layout Subsection
@@ -40630,6 +42478,8 @@
 \begin_layout Standard
 Bankswitching
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40641,6 +42491,8 @@
  (a.k.a.
  code banking
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40790,15 +42642,10 @@
 \begin_inset Newline newline
 \end_inset
 
-Usually the hardware uses some sfr (an output port or an internal sfr) to
- select a bank and put it in the banked area of the memory map.
- The selected bank usually becomes active immediately upon assignment to
- this sfr and when running inside a bank it will switch out this code it
- is currently running.
- Therefor you cannot jump or call directly from one bank to another and
- need to use a so-called trampoline in the common area.
- For SDCC an example trampoline is in crtbank.asm and you may need to change
- it to your 8051 derivative or schematic.
+Usually the hardware uses some sfr (an output port or an internal sfr) to select a bank and put it in the banked area of the memory map.
+ The selected bank usually becomes active immediately upon assignment to this sfr and when running inside a bank it will switch out this code it is currently running.
+ Therefor you cannot jump or call directly from one bank to another and need to use a so-called trampoline in the common area.
+ For SDCC an example trampoline is in crtbank.asm and you may need to change it to your 8051 derivative or schematic.
  The presented code is written for the C8051F120.
 \begin_inset Newline newline
 \end_inset
@@ -40807,15 +42654,14 @@
 \begin_inset Newline newline
 \end_inset
 
-When calling a banked function SDCC will put the LSB of the functions address
- in register R0, the MSB in R1 and the bank in R2 and then call this trampoline
- 
+When calling a banked function SDCC will put the LSB of the functions address in register R0,
+ the MSB in R1 and the bank in R2 and then call this trampoline 
 \emph on
 __sdcc_banked_call
 \emph default
 .
- The current selected bank is saved on the stack, the new bank is selected
- and an indirect jump is made.
+ The current selected bank is saved on the stack,
+ the new bank is selected and an indirect jump is made.
  When the banked function returns it jumps to 
 \emph on
 __sdcc_banked_ret
@@ -40828,8 +42674,7 @@
 \end_layout
 
 \begin_layout Standard
-When writing banked software using SDCC you need to use some special keywords
- and options.
+When writing banked software using SDCC you need to use some special keywords and options.
  You also need to take over a bit of work from the linker.
 \begin_inset Newline newline
 \end_inset
@@ -40838,13 +42683,14 @@
 \begin_inset Newline newline
 \end_inset
 
-To create a function that can be called from another bank it requires the
- keyword 
+To create a function that can be called from another bank it requires the keyword 
 \emph on
 __banked
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40854,14 +42700,14 @@
 \end_inset
 
 .
- The caller must see this in the prototype of the callee and the callee
- needs it for a proper return.
+ The caller must see this in the prototype of the callee and the callee needs it for a proper return.
  Called functions within the same bank as the caller do not need the 
 \emph on
 __banked
 \emph default
  keyword nor do functions in the common area.
- Beware: SDCC does not know or check if functions are in the same bank.
+ Beware:
+ SDCC does not know or check if functions are in the same bank.
  This is your responsibility!
 \begin_inset Newline newline
 \end_inset
@@ -40871,10 +42717,8 @@
 \end_inset
 
 Normally all functions you write end up in the segment CSEG.
- If you want a function explicitly to reside in the common area put it in
- segment HOME.
- This applies for instance to interrupt service routines as they should
- not be banked.
+ If you want a function explicitly to reside in the common area put it in segment HOME.
+ This applies for instance to interrupt service routines as they should not be banked.
 \end_layout
 
 \begin_layout Standard
@@ -40898,6 +42742,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "lyx:-codeseg"
+nolink "false"
 
 \end_inset
 
@@ -40905,13 +42750,12 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Pragmas"
+nolink "false"
 
 \end_inset
 
 ) at the top of the C source file.
- The segment name always applies to the whole source file and generated
- object so functions for different banks need to be defined in different
- source files.
+ The segment name always applies to the whole source file and generated object so functions for different banks need to be defined in different source files.
 \begin_inset Newline newline
 \end_inset
 
@@ -40919,20 +42763,21 @@
 \begin_inset Newline newline
 \end_inset
 
-When linking your objects you need to tell the linker where to put your
- segments.
- To do this you use the following command line option to SDCC: -Wl-b BANK1=0x180
-00 (See 
+When linking your objects you need to tell the linker where to put your segments.
+ To do this you use the following command line option to SDCC:
+ -Wl-b BANK1=0x18000 (See 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "lyx:-Wl option"
+nolink "false"
 
 \end_inset
 
 ).
  This sets the virtual start address of this segment.
  It sets the banknumber to 0x01 and maps the bank to 0x8000 and up.
- The linker will not check for overflows, again this is your responsibility.
+ The linker will not check for overflows,
+ again this is your responsibility.
 \end_layout
 
 \begin_layout Subsection
@@ -40947,9 +42792,10 @@
 \end_layout
 
 \begin_layout Standard
-The compiler triggers the linker to link certain initialization modules
- from the runtime library
+The compiler triggers the linker to link certain initialization modules from the runtime library
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -40959,7 +42805,8 @@
 \end_inset
 
  called crt<something>.
- Only the necessary ones are linked, for instance crtxstack.asm (GSINIT1,
+ Only the necessary ones are linked,
+ for instance crtxstack.asm (GSINIT1,
  GSINIT5) is not linked unless the -
 \series bold
 
@@ -41205,8 +43052,8 @@
 \begin_inset Newline newline
 \end_inset
 
-; Need to initialize in GSINIT1 in case the user's __sdcc_external_startup
- uses the xstack.
+;
+ Need to initialize in GSINIT1 in case the user's __sdcc_external_startup uses the xstack.
 \begin_inset Newline newline
 \end_inset
 
@@ -42288,7 +44135,8 @@
 \begin_inset Newline newline
 \end_inset
 
-; _mcs51_genRAMCLEAR() end
+;
+ _mcs51_genRAMCLEAR() end
 \end_layout
 
 \begin_layout Verse
@@ -43096,11 +44944,13 @@
 \begin_inset Newline newline
 \end_inset
 
-; Need to initialize in GSINIT5 because __mcs51_genXINIT modifies __XPAGE
+;
+ Need to initialize in GSINIT5 because __mcs51_genXINIT modifies __XPAGE
 \begin_inset Newline newline
 \end_inset
 
-; and __mcs51_genRAMCLEAR modifies _spx.
+;
+ and __mcs51_genRAMCLEAR modifies _spx.
 \begin_inset Newline newline
 \end_inset
 
@@ -43308,7 +45158,8 @@
 \begin_inset Newline newline
 \end_inset
 
-; Home
+;
+ Home
 \begin_inset Newline newline
 \end_inset
 
@@ -43428,7 +45279,8 @@
 \begin_inset Newline newline
 \end_inset
 
-; return from main will lock up
+;
+ return from main will lock up
 \begin_inset Newline newline
 \end_inset
 
@@ -43470,6 +45322,8 @@
 \begin_layout Standard
 On some mcs51 variants __xdata
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -43498,14 +45352,16 @@
 
 \end_inset
 
-xdata (mcs51, ds390 named address space
+xdata (mcs51,
+ ds390 named address space
 \end_layout
 
 \end_inset
 
- memory has to be explicitly enabled before it can be accessed or if the
- watchdog
+ memory has to be explicitly enabled before it can be accessed or if the watchdog
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43514,8 +45370,10 @@
 
 \end_inset
 
- needs to be disabled, this is the place to do it.
- The startup code clears all internal data memory, 256 bytes by default,
+ needs to be disabled,
+ this is the place to do it.
+ The startup code clears all internal data memory,
+ 256 bytes by default,
  but from 0 to n-1 if 
 \emph on
 -
@@ -43533,6 +45391,8 @@
 
 -iram-size
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43584,6 +45444,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43609,6 +45471,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:MCS51-variants"
+nolink "false"
 
 \end_inset
 
@@ -43620,8 +45483,7 @@
 \end_layout
 
 \begin_layout Standard
-While these initialization modules are meant as generic startup code there
- might be the need for customization.
+While these initialization modules are meant as generic startup code there might be the need for customization.
  Let's assume the return value of 
 \emph on
 __sdcc_external_startup()
@@ -43651,7 +45513,9 @@
 
 \end_inset
 
-) into the source directory, adapt it there, then assemble it with 
+) into the source directory,
+ adapt it there,
+ then assemble it with 
 \emph on
 sdas8051 -plosgff
 \begin_inset Foot
@@ -43671,8 +45535,7 @@
 
 \begin_layout Plain Layout
 
-http://sdcc.svn.sourceforge.net/viewvc/sdcc/trunk/sdcc/device/lib/mcs51/Makefile.in?
-view=markup 
+http://sdcc.svn.sourceforge.net/viewvc/sdcc/trunk/sdcc/device/lib/mcs51/Makefile.in?view=markup 
 \end_layout
 
 \end_inset
@@ -43699,6 +45562,8 @@
 \begin_layout Subsection
 Interfacing with Assembler Code
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43713,6 +45578,8 @@
 \begin_layout Subsubsection
 Global Registers used for Parameter Passing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43727,18 +45594,25 @@
 \begin_layout Standard
 The compiler always uses the global registers 
 \emph on
-DPL, DPH
+DPL,
+ DPH
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-DPTR, DPH, DPL
+DPTR,
+ DPH,
+ DPL
 \end_layout
 
 \end_inset
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43747,12 +45621,16 @@
 
 \end_inset
 
-, B
+,
+ B
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-B (mcs51, ds390 register)
+B (mcs51,
+ ds390 register)
 \end_layout
 
 \end_inset
@@ -43763,19 +45641,25 @@
 \emph on
 ACC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-ACC (mcs51, ds390 register)
+ACC (mcs51,
+ ds390 register)
 \end_layout
 
 \end_inset
 
 
 \emph default
- to pass the first (non-bit, non-struct) parameter to a function, and also
- to pass the return value 
+ to pass the first (non-bit,
+ non-struct) parameter to a function,
+ and also to pass the return value 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43784,12 +45668,14 @@
 
 \end_inset
 
-of function; according to the following scheme: one byte return value in
- 
+of function;
+ according to the following scheme:
+ one byte return value in 
 \emph on
 DPL
 \emph default
-, two byte value in 
+,
+ two byte value in 
 \emph on
 DPL
 \emph default
@@ -43802,7 +45688,8 @@
 \emph on
 DPH
 \emph default
-, 
+,
+ 
 \emph on
 DPL
 \emph default
@@ -43810,15 +45697,18 @@
 \emph on
 B
 \emph default
-, and four byte values in 
+,
+ and four byte values in 
 \emph on
 DPH
 \emph default
-, 
+,
+ 
 \emph on
 DPL
 \emph default
-, 
+,
+ 
 \emph on
 B
 \emph default
@@ -43829,6 +45719,8 @@
 .
  Generic pointers
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43841,19 +45733,23 @@
 \emph on
 B
 \emph default
-: 
+:
+ 
 \series bold
 0x00
 \series default
- – xdata/far, 
+ – xdata/far,
+ 
 \series bold
 0x40
 \series default
- – idata/near – , 
+ – idata/near – ,
+ 
 \series bold
 0x60
 \series default
- – pdata, 
+ – pdata,
+ 
 \series bold
 0x80
 \series default
@@ -43871,9 +45767,8 @@
 \end_layout
 
 \begin_layout Standard
-Further such parameters (and all struct parameters, as well as the bit parameter
-s from the 9th onwards) are either allocated on the stack (for reentrant
- routines or if -
+Further such parameters (and all struct parameters,
+ as well as the bit parameters from the 9th onwards) are either allocated on the stack (for reentrant routines or if -
 \begin_inset ERT
 status collapsed
 
@@ -43890,15 +45785,14 @@
 \end_layout
 
 \begin_layout Standard
-The first 8 bit parameters are passed in a virtual register called 'bits'
- in bit-addressable space for reentrant functions or allocated directly
- in bit memory otherwise.
+The first 8 bit parameters are passed in a virtual register called 'bits' in bit-addressable space for reentrant functions or allocated directly in bit memory otherwise.
 \end_layout
 
 \begin_layout Standard
-Functions (with two or more parameters or bit parameters) that are called
- through function pointers
+Functions (with two or more parameters or bit parameters) that are called through function pointers
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43921,6 +45815,8 @@
 \family default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43929,7 +45825,8 @@
 
 \end_inset
 
-, or the -
+,
+ or the -
 \begin_inset ERT
 status collapsed
 
@@ -43944,6 +45841,8 @@
 
 -callee-saves
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -43978,12 +45877,13 @@
 
 \end_inset
 
--all-callee-saves command line option or the corresponding callee_saves
- pragma are used, the caller will save the registers (
+-all-callee-saves command line option or the corresponding callee_saves pragma are used,
+ the caller will save the registers (
 \emph on
 R0-R7
 \emph default
-) around the call, so the called function can destroy they content freely.
+) around the call,
+ so the called function can destroy they content freely.
 \end_layout
 
 \begin_layout Standard
@@ -43991,8 +45891,9 @@
 \family typewriter
 _naked
 \family default
-, the caller will swap register banks around the call, if caller and callee
- use different register banks (having them defined by the 
+,
+ the caller will swap register banks around the call,
+ if caller and callee use different register banks (having them defined by the 
 \family typewriter
 __using
 \family default
@@ -44005,11 +45906,13 @@
 \emph on
 DPL
 \emph default
-, 
+,
+ 
 \emph on
 DPH
 \emph default
-, 
+,
+ 
 \emph on
 B
 \emph default
@@ -44027,6 +45930,8 @@
 \begin_layout Standard
 In the following example
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -44037,6 +45942,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -44045,9 +45952,11 @@
 
 \end_inset
 
- the function c_func calls an assembler routine asm_func, which takes two
- parameters
+ the function c_func calls an assembler routine asm_func,
+ which takes two parameters
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -44062,7 +45971,8 @@
 \begin_layout Verse
 
 \family typewriter
-extern int asm_func(unsigned char, unsigned char);
+extern int asm_func(unsigned char,
+ unsigned char);
 \begin_inset Newline newline
 \end_inset
 
@@ -44070,7 +45980,8 @@
 \begin_inset Newline newline
 \end_inset
 
-int c_func (unsigned char i, unsigned char j)
+int c_func (unsigned char i,
+ unsigned char j)
 \begin_inset Newline newline
 \end_inset
 
@@ -44537,10 +46448,14 @@
 
 dph
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-DPTR, DPH, DPL
+DPTR,
+ DPH,
+ DPL
 \end_layout
 
 \end_inset
@@ -44585,17 +46500,20 @@
 \end_layout
 
 \begin_layout Standard
-The parameter naming convention is _<function_name>_PARM_<n>, where n is
- the parameter number starting from 1, and counting from the left.
+The parameter naming convention is _<function_name>_PARM_<n>,
+ where n is the parameter number starting from 1,
+ and counting from the left.
  The first parameter is passed in 
 \emph on
 DPH
 \emph default
-, 
+,
+ 
 \emph on
 DPL
 \emph default
-, 
+,
+ 
 \emph on
 B
 \emph default
@@ -44634,8 +46552,7 @@
 
 \family default
 \series default
-Then compile and link the assembler routine to the C source file with the
- following command:
+Then compile and link the assembler routine to the C source file with the following command:
 \begin_inset Newline newline
 \end_inset
 
@@ -44656,6 +46573,8 @@
 \begin_layout Standard
 In this case
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -44666,6 +46585,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -44676,6 +46597,8 @@
 
  the second parameter
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -44684,17 +46607,18 @@
 
 \end_inset
 
- onwards will be passed on the stack, the parameters are pushed from right
- to left i.e.
- before the call the second leftmost parameter will be on the top of the
- stack (the leftmost parameter is passed in registers).
+ onwards will be passed on the stack,
+ the parameters are pushed from right to left i.e.
+ before the call the second leftmost parameter will be on the top of the stack (the leftmost parameter is passed in registers).
  Here is an example:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-extern int asm_func(unsigned char, unsigned char, unsigned char) reentrant;
+extern int asm_func(unsigned char,
+ unsigned char,
+ unsigned char) reentrant;
 \begin_inset Newline newline
 \end_inset
 
@@ -44702,8 +46626,9 @@
 \begin_inset Newline newline
 \end_inset
 
-int c_func (unsigned char i, unsigned char j, unsigned char k) reentrant
- 
+int c_func (unsigned char i,
+ unsigned char j,
+ unsigned char k) reentrant 
 \begin_inset Newline newline
 \end_inset
 
@@ -44857,7 +46782,11 @@
 \begin_inset space ~
 \end_inset
 
-;stack contains: _bp, return address, second parameter, third parameter
+;stack contains:
+ _bp,
+ return address,
+ second parameter,
+ third parameter
 \begin_inset Newline newline
 \end_inset
 
@@ -45373,10 +47302,9 @@
 \end_layout
 
 \begin_layout Standard
-The compiling and linking procedure remains the same, however note the extra
- entry & exit linkage required for the assembler code, _bp is the stack
- frame pointer and is used to compute the offset into the stack for parameters
- and local variables.
+The compiling and linking procedure remains the same,
+ however note the extra entry & exit linkage required for the assembler code,
+ _bp is the stack frame pointer and is used to compute the offset into the stack for parameters and local variables.
 \end_layout
 
 \begin_layout Section
@@ -45386,6 +47314,8 @@
 \begin_layout Standard
 The DS80C400
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45396,6 +47326,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45405,10 +47337,9 @@
 \end_inset
 
  microcontroller has a rich set of peripherals.
- In its built-in ROM library it includes functions to access some of the
- features, among them is a TCP stack with IP4 and IP6 support.
- Library headers (currently in beta status) and other files are provided
- at 
+ In its built-in ROM library it includes functions to access some of the features,
+ among them is a TCP stack with IP4 and IP6 support.
+ Library headers (currently in beta status) and other files are provided at 
 \size footnotesize
 
 \begin_inset Flex URL
@@ -45426,13 +47357,21 @@
 \end_layout
 
 \begin_layout Section
-The Z80, Z180, Rabbit 2000, Rabbit 2000A, Rabbit 3000A, SM83 (GameBoy),
- eZ80, TLCS-90 and R800 ports
+The Z80,
+ Z180,
+ Rabbit 2000,
+ Rabbit 2000A,
+ Rabbit 3000A,
+ SM83 (GameBoy),
+ eZ80,
+ TLCS-90 and R800 ports
 \end_layout
 
 \begin_layout Standard
 SDCC can target the Z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45441,9 +47380,16 @@
 
 \end_inset
 
-, Z180, eZ80 in Z80 mode, Rabbit 2000, Rabbit 2000A, Rabbit 3000A and LR35902,
+,
+ Z180,
+ eZ80 in Z80 mode,
+ Rabbit 2000,
+ Rabbit 2000A,
+ Rabbit 3000A and LR35902,
  the Sharp SM83 (used .e.g in the Nintendo GameBoy) sm83
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -45456,9 +47402,15 @@
 \end_layout
 
 \begin_layout Standard
-When a frame pointer is used, it resides in IX.
- Register A, B, C, D, E, H, L and IY are used as a temporary registers for
- holding variables.
+When a frame pointer is used,
+ it resides in IX.
+ Register A,
+ B,
+ C,
+ D,
+ E,
+ H,
+ L and IY are used as a temporary registers for holding variables.
 \end_layout
 
 \begin_layout Standard
@@ -45482,8 +47434,7 @@
 
 \end_inset
 
- SDCC typically generates much better code for these architectures than
- many other compilers.
+ SDCC typically generates much better code for these architectures than many other compilers.
  A comparison of compilers for these architecture can be found at 
 \begin_inset Flex URL
 status collapsed
@@ -45505,6 +47456,8 @@
 \begin_layout Standard
 On the Z80
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45513,8 +47466,7 @@
 
 \end_inset
 
- the startup code is inserted by linking with crt0.rel which is generated
- from sdcc/device/lib/z80/crt0.s.
+ the startup code is inserted by linking with crt0.rel which is generated from sdcc/device/lib/z80/crt0.s.
  If you need a different startup code you can use the compiler option 
 \emph on
 -
@@ -45540,6 +47492,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45570,17 +47524,20 @@
 \end_layout
 
 \begin_layout Standard
-SDCC has three Rabbit-supporting ports: r2k for the Rabbit 2000, r2ka for
- the Rabbit 2000A, 2000B, 2000C and 3000, r3ka for the Rabbit 3000A.
- The instruction set of the Rabbit 2000 to Rabbit 3000 is the same, and
- a subset of the Rabbit 3000A instruction set.
- Code from the r2k backend will work on Rabbit 2000 to 3000A and code from
- the r2ka backend will work on Rabbit 2000A to 3000A.
- In some hardware configurations (see below), code from the r2ka backend
- will work on the Rabbit 2000.
- Typically, code from the r3ka backend will be faster and smaller than code
- from the r2ka backend, and code from the r2ka backend will be faster and
- smaller than code from the r2k backend.
+SDCC has three Rabbit-supporting ports:
+ r2k for the Rabbit 2000,
+ r2ka for the Rabbit 2000A,
+ 2000B,
+ 2000C and 3000,
+ r3ka for the Rabbit 3000A.
+ The instruction set of the Rabbit 2000 to Rabbit 3000 is the same,
+ and a subset of the Rabbit 3000A instruction set.
+ Code from the r2k backend will work on Rabbit 2000 to 3000A and code from the r2ka backend will work on Rabbit 2000A to 3000A.
+ In some hardware configurations (see below),
+ code from the r2ka backend will work on the Rabbit 2000.
+ Typically,
+ code from the r3ka backend will be faster and smaller than code from the r2ka backend,
+ and code from the r2ka backend will be faster and smaller than code from the r2k backend.
 \end_layout
 
 \begin_layout Subsubsection
@@ -45589,72 +47546,72 @@
 
 \begin_layout Standard
 There are multiple wait state bugs present in some of the the Rabbits.
- The difference between the r2k and r2ka port is in additional wait state
- bug workarounds.
- If all memory used has zero wait states, code from the r2ka backend can
- be safely run on the original Rabbit 2000.
+ The difference between the r2k and r2ka port is in additional wait state bug workarounds.
+ If all memory used has zero wait states,
+ code from the r2ka backend can be safely run on the original Rabbit 2000.
 \end_layout
 
 \begin_layout Standard
-Note that The r2k and r2ka port assume that the whole stack has the same
- number of wait states (code from the r2k and r2ka ports can fail is the
- stack spans memories with a different amount of wait states).
+Note that The r2k and r2ka port assume that the whole stack has the same number of wait states (code from the r2k and r2ka ports can fail is the stack spans memories with a different amount of wait states).
 \end_layout
 
 \begin_layout Standard
 The Rabbit 2000 has some wait state bugs that SDCC does not work around.
- These bugs result in the number of wait states used being one less than
- configured for some instructions.
- The workaround has to be supplied by the user, by configuring all memories
- that do use wait states to use on additional wait state.
+ These bugs result in the number of wait states used being one less than configured for some instructions.
+ The workaround has to be supplied by the user,
+ by configuring all memories that do use wait states to use on additional wait state.
 \end_layout
 
 \begin_layout Standard
-For all Rabbit ports, SDCC assumes that all data memory is at least as fast
- (i.e.
+For all Rabbit ports,
+ SDCC assumes that all data memory is at least as fast (i.e.
  does not need more wait states) as all code memory.
  Code where this is not the case (e.g.
- code in fast Flash writing into slow battery-backed SRAM) will have to
- be written in assembler by hand.
+ code in fast Flash writing into slow battery-backed SRAM) will have to be written in assembler by hand.
 \end_layout
 
 \begin_layout Subsection
-Z80, Z180, Z80N and R800 calling conventions
+Z80,
+ Z180,
+ Z80N and R800 calling conventions
 \end_layout
 
 \begin_layout Standard
-The current default is the SDCC calling convention, version 1.
- Using the command-line option –sdcccall 0, the default can be changed to
- version 0.
- There are three other calling conventions supported, which can be specified
- using the keywords __smallc, __z88dk_fastcall and __z88dk_callee.
- They are primarily intended for compatibility with libraries written for
- other compilers.
- For __z88dk_fastcall, there may be only one parameter of at most 32 bits,
+The current default is the SDCC calling convention,
+ version 1.
+ Using the command-line option –sdcccall 0,
+ the default can be changed to version 0.
+ There are three other calling conventions supported,
+ which can be specified using the keywords __smallc,
+ __z88dk_fastcall and __z88dk_callee.
+ They are primarily intended for compatibility with libraries written for other compilers.
+ For __z88dk_fastcall,
+ there may be only one parameter of at most 32 bits,
  which is passed the same way as the return value of __sdcccall(0).
- For __z88dk_callee, the stack is not adjusted for stack parameters the
- parameters after the call (thus the callee has to do this instead).
- __z88dk_callee can be combined with __smallc, __sdcccall(0) or __sdcccall(1).
+ For __z88dk_callee,
+ the stack is not adjusted for stack parameters the parameters after the call (thus the callee has to do this instead).
+ __z88dk_callee can be combined with __smallc,
+ __sdcccall(0) or __sdcccall(1).
 \end_layout
 
 \begin_layout Subsubsection
-Z80 SDCC calling convention, version 1
+Z80 SDCC calling convention,
+ version 1
 \end_layout
 
 \begin_layout Standard
 This calling convention can be chosen per function via __sdcccall(1).
- 8-bit return values are passed in a, 16-bit values in de, 24-bit values
- in lde, 32-bit values in hlde.
- Larger return values (as well as struct and union independent of their
- size) are passed in memory in a location specified by the caller through
- a hidden pointer argument.
+ 8-bit return values are passed in a,
+ 16-bit values in de,
+ 24-bit values in lde,
+ 32-bit values in hlde.
+ Larger return values (as well as struct and union independent of their size) are passed in memory in a location specified by the caller through a hidden pointer argument.
 \end_layout
 
 \begin_layout Standard
-For functions that have variable arguments: All parameters are passed on
- the stack.
- The stack is not adjusted for the parameters by the callee (thus the caller
- has to do this instead).
+For functions that have variable arguments:
+ All parameters are passed on the stack.
+ The stack is not adjusted for the parameters by the callee (thus the caller has to do this instead).
 \end_layout
 
 \begin_layout Standard
@@ -45667,15 +47624,21 @@
 \end_layout
 
 \begin_layout Standard
-For Functions that do not have variable arguments: the first parameter is
- passed in a if it has 8 bits.
+For Functions that do not have variable arguments:
+ the first parameter is passed in a if it has 8 bits.
  If it has 16 bits it is passed in hl.
- If it has 32 bits, it is passed in hlde.
- If the first parameter is in a, and the second has 8 bits, it is passed
- in l; if the first is passed in a or hl, and the second has 16 bits, it
- is passed in de; all other parameters are passed on the stack, right-to-left.
- Independent of their size, struct / union parameters and all following
- parameters are always passed on the stack.
+ If it has 32 bits,
+ it is passed in hlde.
+ If the first parameter is in a,
+ and the second has 8 bits,
+ it is passed in l;
+ if the first is passed in a or hl,
+ and the second has 16 bits,
+ it is passed in de;
+ all other parameters are passed on the stack,
+ right-to-left.
+ Independent of their size,
+ struct / union parameters and all following parameters are always passed on the stack.
 \end_layout
 
 \begin_layout Standard
@@ -45688,69 +47651,80 @@
 \end_layout
 
 \begin_layout Standard
-If __z88dk_callee is not used, after the call, the stack parameters are
- cleaned up by the caller, with the following exceptions: functions that
- do not have variable arguments and return void or a type of at most 16
- bits, or have both a first parameter of type float and a return value of
- type float.
+If __z88dk_callee is not used,
+ after the call,
+ the stack parameters are cleaned up by the caller,
+ with the following exceptions:
+ functions that do not have variable arguments and return void or a type of at most 16 bits,
+ or have both a first parameter of type float and a return value of type float.
 \end_layout
 
 \begin_layout Subsubsection
-Z80 SDCC calling convention, version 0
+Z80 SDCC calling convention,
+ version 0
 \end_layout
 
 \begin_layout Standard
 This calling convention can be chosen per function via __sdcccall(0).
- All parameters are passed on the stack, right-to-left.
- 8-bit return values are passed in l, 16-bit values in hl, 24-bit values
- in ehl, 32-bit values in dehl.
- Except for the SM83, where 8-bit values are passed in e, 16-bit values
- in de, 32-bit values in hlde.
- Larger return values (as well as struct and union independent of their
- size) are passed in a memory in a location specified by the caller through
- a hidden pointer argument.
- Unless __z88dk_callee is used, all stack parameters are cleaned up by the
- caller.
+ All parameters are passed on the stack,
+ right-to-left.
+ 8-bit return values are passed in l,
+ 16-bit values in hl,
+ 24-bit values in ehl,
+ 32-bit values in dehl.
+ Except for the SM83,
+ where 8-bit values are passed in e,
+ 16-bit values in de,
+ 32-bit values in hlde.
+ Larger return values (as well as struct and union independent of their size) are passed in a memory in a location specified by the caller through a hidden pointer argument.
+ Unless __z88dk_callee is used,
+ all stack parameters are cleaned up by the caller.
 \end_layout
 
 \begin_layout Subsection
-Rabbit 2000, Rabbit 2000A, Rabbit 3000A, eZ80 and TLCS-90 calling conventions
+Rabbit 2000,
+ Rabbit 2000A,
+ Rabbit 3000A,
+ eZ80 and TLCS-90 calling conventions
 \end_layout
 
 \begin_layout Standard
-The current default is the Rabbit calling convetion desribed here, version
- 1.
- Using the command-line option –sdcccall 8, the default can be changed to
- version 0 of the Z80 calling convention, described above.
- There are four other calling conventions supported, which can be specified
- using the keywords __smallc, __z88dk_fastcall and __z88dk_callee.
- They are primarily intended for compatibility with libraries written for
- other compilers.
- For __z88dk_fastcall, there may be only one parameter of at most 32 bits,
+The current default is the Rabbit calling convetion desribed here,
+ version 1.
+ Using the command-line option –sdcccall 8,
+ the default can be changed to version 0 of the Z80 calling convention,
+ described above.
+ There are four other calling conventions supported,
+ which can be specified using the keywords __smallc,
+ __z88dk_fastcall and __z88dk_callee.
+ They are primarily intended for compatibility with libraries written for other compilers.
+ For __z88dk_fastcall,
+ there may be only one parameter of at most 32 bits,
  which is passed the same way as the return value.
- For __z88dk_callee, the stack is not adjusted for stack parameters the
- parameters after the call (thus the callee has to do this instead).
- __z88dk_callee can be combined with __smallc, __sdcccall(0) or __sdcccall(1).
+ For __z88dk_callee,
+ the stack is not adjusted for stack parameters the parameters after the call (thus the callee has to do this instead).
+ __z88dk_callee can be combined with __smallc,
+ __sdcccall(0) or __sdcccall(1).
 \end_layout
 
 \begin_layout Subsubsection
-Rabbit SDCC calling convention, version 1
+Rabbit SDCC calling convention,
+ version 1
 \end_layout
 
 \begin_layout Standard
 This calling convention can be chosen per function via __sdcccall(1).
- 8-bit return values are passed in a, 16-bit values in hl, 24-bit values
- in lde, 32-bit values in hlde.
- Larger return values (as well as struct and union independent of their
- size) are passed in memory in a location specified by the caller through
- a hidden pointer argument.
+ 8-bit return values are passed in a,
+ 16-bit values in hl,
+ 24-bit values in lde,
+ 32-bit values in hlde.
+ Larger return values (as well as struct and union independent of their size) are passed in memory in a location specified by the caller through a hidden pointer argument.
 \end_layout
 
 \begin_layout Standard
-For functions that have variable arguments: All parameters are passed on
- the stack.
- The stack is not adjusted for the parameters by the callee (thus the caller
- has to do this instead).
+For functions that have variable arguments:
+ All parameters are passed on the stack.
+ The stack is not adjusted for the parameters by the callee (thus the caller has to do this instead).
 \end_layout
 
 \begin_layout Standard
@@ -45763,16 +47737,24 @@
 \end_layout
 
 \begin_layout Standard
-For Functions that do not have variable arguments: the first parameter is
- passed in a if it has 8 bits.
+For Functions that do not have variable arguments:
+ the first parameter is passed in a if it has 8 bits.
  If it has 16 bits it is passed in hl.
- If it has 32 bits, it is passed in hlde.
- If the first parameter is in a, and the second has 8 bits, it is passed
- in l; if the first is in hl or hlde, and the second has 8 bits, it is passed
- in a; if the first is in a, and the second has 16 bits, it is passed in
- hl; all other parameters are passed on the stack, right-to-left.
- Independent of their size, struct / union parameters and all following
- parameters are always passed on the stack.
+ If it has 32 bits,
+ it is passed in hlde.
+ If the first parameter is in a,
+ and the second has 8 bits,
+ it is passed in l;
+ if the first is in hl or hlde,
+ and the second has 8 bits,
+ it is passed in a;
+ if the first is in a,
+ and the second has 16 bits,
+ it is passed in hl;
+ all other parameters are passed on the stack,
+ right-to-left.
+ Independent of their size,
+ struct / union parameters and all following parameters are always passed on the stack.
 \end_layout
 
 \begin_layout Standard
@@ -45785,11 +47767,12 @@
 \end_layout
 
 \begin_layout Standard
-If __z88dk_callee is not used, after the call, the stack parameters are
- cleaned up by the caller, with the following exceptions: functions that
- do not have variable arguments and return void or a type of at most 16
- bits, or have both a first parameter of type float and a return value of
- type float.
+If __z88dk_callee is not used,
+ after the call,
+ the stack parameters are cleaned up by the caller,
+ with the following exceptions:
+ functions that do not have variable arguments and return void or a type of at most 16 bits,
+ or have both a first parameter of type float and a return value of type float.
 \end_layout
 
 \begin_layout Subsection
@@ -45797,13 +47780,15 @@
 \end_layout
 
 \begin_layout Standard
-The current default is the SDCC calling convention, version 1.
- Using the command-line option –sdcccall 0, the default can be changed to
- version 0.
+The current default is the SDCC calling convention,
+ version 1.
+ Using the command-line option –sdcccall 0,
+ the default can be changed to version 0.
 \end_layout
 
 \begin_layout Subsubsection
-SM83 SDCC calling convention, version 1
+SM83 SDCC calling convention,
+ version 1
 \end_layout
 
 \begin_layout Standard
@@ -45811,18 +47796,16 @@
 \end_layout
 
 \begin_layout Standard
-8-bit return values are passed in a, 16-bit values in bc, 32-bit values
- in debc.
- Larger return values (as well as struct and union independent of their
- size) are passed in memory in a location specified by the caller through
- a hidden pointer argument.
+8-bit return values are passed in a,
+ 16-bit values in bc,
+ 32-bit values in debc.
+ Larger return values (as well as struct and union independent of their size) are passed in memory in a location specified by the caller through a hidden pointer argument.
 \end_layout
 
 \begin_layout Standard
-For functions that have variable arguments: All parameters are passed on
- the stack.
- The stack is not adjusted for the parameters by the callee (thus the caller
- has to do this instead).
+For functions that have variable arguments:
+ All parameters are passed on the stack.
+ The stack is not adjusted for the parameters by the callee (thus the caller has to do this instead).
 \end_layout
 
 \begin_layout Standard
@@ -45835,35 +47818,45 @@
 \end_layout
 
 \begin_layout Standard
-For Functions that do not have variable arguments: the first parameter is
- passed in a if it has 8 bits.
+For Functions that do not have variable arguments:
+ the first parameter is passed in a if it has 8 bits.
  If it has 16 bits it is passed in de.
- If it has 32 bits, it is passed in debc.
- If the first parameter is in a, and the second has 8 bits, it is passed
- in e; if the first is in bc or debc, and the second has 8 bits, it is passed
- in a; if the first is passed in a, and the second has 16 bits, it is passed
- in bc; if the first is passed in de, and the second has 16 bits, it is
- passed in bc; all other parameters are passed on the stack, right-to-left.
- Independent of their size, struct / union parameters and all following
- parameters are always passed on the stack.
- The stack is adjusted by the callee (thus explicitly specifying __z88dk_callee
- does not make a difference), unless the functionhas variable arguments.
+ If it has 32 bits,
+ it is passed in debc.
+ If the first parameter is in a,
+ and the second has 8 bits,
+ it is passed in e;
+ if the first is in bc or debc,
+ and the second has 8 bits,
+ it is passed in a;
+ if the first is passed in a,
+ and the second has 16 bits,
+ it is passed in bc;
+ if the first is passed in de,
+ and the second has 16 bits,
+ it is passed in bc;
+ all other parameters are passed on the stack,
+ right-to-left.
+ Independent of their size,
+ struct / union parameters and all following parameters are always passed on the stack.
+ The stack is adjusted by the callee (thus explicitly specifying __z88dk_callee does not make a difference),
+ unless the functionhas variable arguments.
 \end_layout
 
 \begin_layout Subsubsection
-SM83 SDCC calling convention, version 0
+SM83 SDCC calling convention,
+ version 0
 \end_layout
 
 \begin_layout Standard
 This calling convention can be chosen per function via __sdcccall(0).
- 8-bit return values are passed in e, 16-bit values in de, 32-bit values
- in hlde.
- Larger return values (as well as struct and union independent of their
- size) are passed in memory in a location specified by the caller through
- a hidden pointer argument.
+ 8-bit return values are passed in e,
+ 16-bit values in de,
+ 32-bit values in hlde.
+ Larger return values (as well as struct and union independent of their size) are passed in memory in a location specified by the caller through a hidden pointer argument.
  All parameters are passed on the stack.
- The stack is not adjusted for the parameters by the callee (thus the caller
- has to do this instead), unless __z88dk_callee is specified.
+ The stack is not adjusted for the parameters by the callee (thus the caller has to do this instead),
+ unless __z88dk_callee is specified.
  __sdcccall(0) can be combined with __z88dk_callee.
 \end_layout
 
@@ -45872,18 +47865,15 @@
 \end_layout
 
 \begin_layout Standard
-Functions declared as __smallc are called using the Small-C calling convention
- (passing arguments on-stack left-to-right, 1 byte arguments are passed
- as 2 bytes, with the value in the lower byte).
- 8-bit return values are passed in a, 16-bit values in de, 32-bit values
- in hlde.
- Larger return values (as well as struct and union independent of their
- size) are passed in memory in a location specified by the caller through
- a hidden pointer argument.
- This way assembler routines originally written for Small-C or code generated
- by Small-C can be called from SDCC.
- Currently variable arguments are not yet supported (neither on the caller
- nor on the callee side).
+Functions declared as __smallc are called using the Small-C calling convention (passing arguments on-stack left-to-right,
+ 1 byte arguments are passed as 2 bytes,
+ with the value in the lower byte).
+ 8-bit return values are passed in a,
+ 16-bit values in de,
+ 32-bit values in hlde.
+ Larger return values (as well as struct and union independent of their size) are passed in memory in a location specified by the caller through a hidden pointer argument.
+ This way assembler routines originally written for Small-C or code generated by Small-C can be called from SDCC.
+ Currently variable arguments are not yet supported (neither on the caller nor on the callee side).
 \end_layout
 
 \begin_layout Subsection
@@ -45891,20 +47881,26 @@
 \end_layout
 
 \begin_layout Standard
-The Z80 and some derivatives support complex instructions, such as ldir,
- cpir, ...
+The Z80 and some derivatives support complex instructions,
+ such as ldir,
+ cpir,
+ ...
  .
  SDCC only emits these instructions for functions in the standard library.
- Thus, e.g.
- copying one array into another is more efficient when using memcpy() than
- by using a a user-written loop.
+ Thus,
+ e.g.
+ copying one array into another is more efficient when using memcpy() than by using a a user-written loop.
 \end_layout
 
 \begin_layout Standard
-Depending on the target, code generation options and the parameters to the
- call, SDCC emits ldir for memcpy(), ldir or lsidr for memset(), ldi for
- strcpy(), ldi for strncpy().
- Other library functions use the complex instructions as well, but for those,
+Depending on the target,
+ code generation options and the parameters to the call,
+ SDCC emits ldir for memcpy(),
+ ldir or lsidr for memset(),
+ ldi for strcpy(),
+ ldi for strncpy().
+ Other library functions use the complex instructions as well,
+ but for those,
  function calls are generated.
 \end_layout
 
@@ -45913,11 +47909,11 @@
 \end_layout
 
 \begin_layout Standard
-Usually, Z80-based systems (except for the SM83 and TLCS-90) have separate
- I/O and memory spaces, and any normal memory location can be read without
- side-effects.
- For such systems, the option –allow-unsafe-reads can be used to enable
- some extra optimizations that rely on this.
+Usually,
+ Z80-based systems (except for the SM83 and TLCS-90) have separate I/O and memory spaces,
+ and any normal memory location can be read without side-effects.
+ For such systems,
+ the option –allow-unsafe-reads can be used to enable some extra optimizations that rely on this.
 \end_layout
 
 \begin_layout Subsection
@@ -45926,19 +47922,20 @@
 
 \begin_layout Standard
 Banked calls are supported via __banked.
- Banked calls are done via a trampoline (__sdcc_bcall if --legacy-banking
- is specified, __sdcc_bcall_abc for z88dk_fastcall, __sdcc_bcall_ehl for
- other calls).
+ Banked calls are done via a trampoline (__sdcc_bcall if --legacy-banking is specified,
+ __sdcc_bcall_abc for z88dk_fastcall,
+ __sdcc_bcall_ehl for other calls).
  Default trampolines are provided in the library.
- The default trampolines calls user supplied helper functions set_bank and
- get_bank that set the current bank to the value in register a, or return
- the current bank in register a.
+ The default trampolines calls user supplied helper functions set_bank and get_bank that set the current bank to the value in register a,
+ or return the current bank in register a.
 \end_layout
 
 \begin_layout Standard
-For banked functions, the calling convention is slightly different: the
- stack is always cleared up by the caller.
- Unless __z88dk_fastcall is used, all parameters are passed on the stack.
+For banked functions,
+ the calling convention is slightly different:
+ the stack is always cleared up by the caller.
+ Unless __z88dk_fastcall is used,
+ all parameters are passed on the stack.
 \end_layout
 
 \begin_layout Section
@@ -45948,6 +47945,8 @@
 \begin_layout Standard
 The port to the Freescale/Motorola HC08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45956,8 +47955,7 @@
 
 \end_inset
 
- and S08 does not yet generate code as compact as that generated by some
- non-free compilers.
+ and S08 does not yet generate code as compact as that generated by some non-free compilers.
  A comparison of compilers for these architecture can be found at 
 \begin_inset Flex URL
 status collapsed
@@ -45979,6 +47977,8 @@
 \begin_layout Standard
 The HC08
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -45999,19 +47999,25 @@
 \end_layout
 
 \begin_layout Standard
-By default, the SDCC calling convention, version 1 is used.
- Using the option –sdcccall 0, the default can be changed to version 0.
+By default,
+ the SDCC calling convention,
+ version 1 is used.
+ Using the option –sdcccall 0,
+ the default can be changed to version 0.
 \end_layout
 
 \begin_layout Standard
 Arguments are passed on the stack right-to-left.
- Return values are in a (8 bit), x (16 bit), xyl (24 bit), xy (32 bit) or
- use a hidden extra pointer parameter pointing to the location (anything
- wider than 32 bit, and all struct / union).
+ Return values are in a (8 bit),
+ x (16 bit),
+ xyl (24 bit),
+ xy (32 bit) or use a hidden extra pointer parameter pointing to the location (anything wider than 32 bit,
+ and all struct / union).
 \end_layout
 
 \begin_layout Subsubsection
-SDCC calling convention, version 1
+SDCC calling convention,
+ version 1
 \end_layout
 
 \begin_layout Standard
@@ -46024,37 +48030,42 @@
 \end_layout
 
 \begin_layout Standard
-For functions that have variable arguments, all parameters are passed on
- the stack.
- For other functions, if the first parameter has 8 or 16 bits, it is passed
- in a or x.
- If the first parameter is passed in a, and the second has 16 bits, the
- second is passed in x.
- If the first parameter is passed in x, and the second has 8 bits, the second
- is passed in a.
+For functions that have variable arguments,
+ all parameters are passed on the stack.
+ For other functions,
+ if the first parameter has 8 or 16 bits,
+ it is passed in a or x.
+ If the first parameter is passed in a,
+ and the second has 16 bits,
+ the second is passed in x.
+ If the first parameter is passed in x,
+ and the second has 8 bits,
+ the second is passed in a.
  All other parameters are passed on the stack.
- Independent of their size, struct / union parameters and all following
- parameters are always passed on the stack.
- If __z88dk_callee is specified, the stack is always adjusted by the callee.
- Otherwise, for the large memory model, the stack is always adjusted by
- the caller.
- For the medium memory model the stack is adjusted by the caller, with the
- following exceptions: functions that do not have variable arguments and
- return void or a type of at most 16 bits, or have both a first parameter
- of type float and a return value of type float.
+ Independent of their size,
+ struct / union parameters and all following parameters are always passed on the stack.
+ If __z88dk_callee is specified,
+ the stack is always adjusted by the callee.
+ Otherwise,
+ for the large memory model,
+ the stack is always adjusted by the caller.
+ For the medium memory model the stack is adjusted by the caller,
+ with the following exceptions:
+ functions that do not have variable arguments and return void or a type of at most 16 bits,
+ or have both a first parameter of type float and a return value of type float.
 \end_layout
 
 \begin_layout Subsubsection
-SDCC calling convention, version 0
+SDCC calling convention,
+ version 0
 \end_layout
 
 \begin_layout Standard
 This calling convention can be chosen per function via __sdcccall(0) (e.g.
- for compatibility with functions written in assembler for use with older
- versions of SDCC).
+ for compatibility with functions written in assembler for use with older versions of SDCC).
  All parameters are passed on the stack.
- The stack is not adjusted for the parametersby the callee (thus the caller
- has to do this instead), unless __z88dk_callee is specified.
+ The stack is not adjusted for the parametersby the callee (thus the caller has to do this instead),
+ unless __z88dk_callee is specified.
 \end_layout
 
 \begin_layout Subsubsection
@@ -46066,17 +48077,23 @@
 \lang british
 Raisonance
 \lang english
- STM8 compiler, the __raisonance calling convention is supported.
- If the first parameter is 8 or 16 bits, it is passed in a or x.
- If the first parameter is 8 bits, and the second 16 bits, the second is
- passed in x.
- If the first parameter is 16 bits, and the second is 8 bits, the second
- is passed in a.
+ STM8 compiler,
+ the __raisonance calling convention is supported.
+ If the first parameter is 8 or 16 bits,
+ it is passed in a or x.
+ If the first parameter is 8 bits,
+ and the second 16 bits,
+ the second is passed in x.
+ If the first parameter is 16 bits,
+ and the second is 8 bits,
+ the second is passed in a.
  All other parameters are passed on the stack.
- If the return value is 8 bits, it is passed in a.
- If it is 16 bits, it is passed in x.
- Raisonance passes larger return values in pseudoregisters, which is not
- supported by SDCC.
+ If the return value is 8 bits,
+ it is passed in a.
+ If it is 16 bits,
+ it is passed in x.
+ Raisonance passes larger return values in pseudoregisters,
+ which is not supported by SDCC.
 \end_layout
 
 \begin_layout Subsubsection
@@ -46084,17 +48101,20 @@
 \end_layout
 
 \begin_layout Standard
-For compatibility with the IAR STM8 compiler, the __iar calling convention
- is supported.
- The first 8-bit parameter is passed in a, the first 16-bit parameter in
- x, the second 16-bit parameter in y.
- Further parameters of up to 32 bits are passed in pseudoregisters, which
- is not supported by SDCC.
+For compatibility with the IAR STM8 compiler,
+ the __iar calling convention is supported.
+ The first 8-bit parameter is passed in a,
+ the first 16-bit parameter in x,
+ the second 16-bit parameter in y.
+ Further parameters of up to 32 bits are passed in pseudoregisters,
+ which is not supported by SDCC.
  All other parameters are passed on the stack.
- If the return value is 8 bits, it is passed in a.
- If it is 16 bits, it is passed in x.
- IAR passes larger return values in pseudoregisters, which is not supported
- by SDCC.
+ If the return value is 8 bits,
+ it is passed in a.
+ If it is 16 bits,
+ it is passed in x.
+ IAR passes larger return values in pseudoregisters,
+ which is not supported by SDCC.
 \end_layout
 
 \begin_layout Subsubsection
@@ -46102,20 +48122,26 @@
 \end_layout
 
 \begin_layout Standard
-For compatibility with the Cosmic STM8 compiler, the __cosmic calling convention
- is supported.
- If the first parameter is 8 or 16 bits, it is passed in a or x.
- If the return value is 8 bits, it is passed in a.
- If it is 16 bits, it is passed in x.
- Cosmic passes larger return values in pseudoregisters, which is not supported
- by SDCC.
- Even for the medium memory model, __cosmic functions use a 24-bit return
- address in their stack frame, and are called using callf.
+For compatibility with the Cosmic STM8 compiler,
+ the __cosmic calling convention is supported.
+ If the first parameter is 8 or 16 bits,
+ it is passed in a or x.
+ If the return value is 8 bits,
+ it is passed in a.
+ If it is 16 bits,
+ it is passed in x.
+ Cosmic passes larger return values in pseudoregisters,
+ which is not supported by SDCC.
+ Even for the medium memory model,
+ __cosmic functions use a 24-bit return address in their stack frame,
+ and are called using callf.
 \end_layout
 
 \begin_layout Section
 The PIC14
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46130,6 +48156,8 @@
 \begin_layout Standard
 The PIC14 port adds support for Microchip
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46144,6 +48172,8 @@
 
  PIC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46158,7 +48188,8 @@
 
  MCUs with 14 bit wide instructions.
  This port is not yet mature and still lacks many features.
- However, it can work for simple code.
+ However,
+ it can work for simple code.
 \end_layout
 
 \begin_layout Standard
@@ -46174,11 +48205,20 @@
 \end_layout
 
 \begin_layout Standard
-10F320, 10F322, 10LF320, 10LF322
+10F320,
+ 10F322,
+ 10LF320,
+ 10LF322
 \end_layout
 
 \begin_layout Standard
-12F609, 12F615, 12F617, 12F629, 12F635, 12F675, 12F683
+12F609,
+ 12F615,
+ 12F617,
+ 12F629,
+ 12F635,
+ 12F675,
+ 12F683
 \end_layout
 
 \begin_layout Standard
@@ -46190,36 +48230,63 @@
 \end_layout
 
 \begin_layout Standard
-16C62, 16C63A, 16C65B
+16C62,
+ 16C63A,
+ 16C65B
 \end_layout
 
 \begin_layout Standard
-16C71, 16C72, 16C73B, 16C74B
+16C71,
+ 16C72,
+ 16C73B,
+ 16C74B
 \end_layout
 
 \begin_layout Standard
-16C432, 16C433
+16C432,
+ 16C433
 \end_layout
 
 \begin_layout Standard
-16C554, 16C557, 16C558
+16C554,
+ 16C557,
+ 16C558
 \end_layout
 
 \begin_layout Standard
-16C620, 16C620A, 16C621, 16C621A, 16C622, 16C622A
+16C620,
+ 16C620A,
+ 16C621,
+ 16C621A,
+ 16C622,
+ 16C622A
 \end_layout
 
 \begin_layout Standard
-16C710, 16C711, 16C715, 16C717, 16C745, 16C765, 16C770, 16C771, 16C773,
- 16C774, 16C781, 16C782
+16C710,
+ 16C711,
+ 16C715,
+ 16C717,
+ 16C745,
+ 16C765,
+ 16C770,
+ 16C771,
+ 16C773,
+ 16C774,
+ 16C781,
+ 16C782
 \end_layout
 
 \begin_layout Standard
-16C925, 16C926 
+16C925,
+ 16C926 
 \end_layout
 
 \begin_layout Standard
-16CR73, 16CR74, 16CR76, 16CR77
+16CR73,
+ 16CR74,
+ 16CR76,
+ 16CR77
 \end_layout
 
 \begin_layout Standard
@@ -46227,76 +48294,163 @@
 \end_layout
 
 \begin_layout Standard
-16F72 ,16F73, 16F74, 16F76, 16F77
+16F72 ,16F73,
+ 16F74,
+ 16F76,
+ 16F77
 \end_layout
 
 \begin_layout Standard
-16F84, 16F84A, 16F87, 16F88
+16F84,
+ 16F84A,
+ 16F87,
+ 16F88
 \end_layout
 
 \begin_layout Standard
-16F610, 16F616, 16F627, 16F627A, 16F628, 16F628A, 16F630, 16F631, 16F636,
- 16F639, 16F648A
+16F610,
+ 16F616,
+ 16F627,
+ 16F627A,
+ 16F628,
+ 16F628A,
+ 16F630,
+ 16F631,
+ 16F636,
+ 16F639,
+ 16F648A
 \end_layout
 
 \begin_layout Standard
-16F676, 16F677, 16F684, 16F685, 16F687, 16F688, 16F689, 16F690
+16F676,
+ 16F677,
+ 16F684,
+ 16F685,
+ 16F687,
+ 16F688,
+ 16F689,
+ 16F690
 \end_layout
 
 \begin_layout Standard
-16F707, 16F716, 16F720, 16F721, 16F722, 16F722A, 16F723, 16F723A, 16F724,
- 16F726, 16F727
+16F707,
+ 16F716,
+ 16F720,
+ 16F721,
+ 16F722,
+ 16F722A,
+ 16F723,
+ 16F723A,
+ 16F724,
+ 16F726,
+ 16F727
 \end_layout
 
 \begin_layout Standard
-16F737, 16F747, 16F753, 16F767, 16F777, 16F785
+16F737,
+ 16F747,
+ 16F753,
+ 16F767,
+ 16F777,
+ 16F785
 \end_layout
 
 \begin_layout Standard
-16F818, 16F819, 16F870, 16F871, 16F872, 16F873, 16F873A, 16F874, 16F874A,
- 16F876, 16F876A
+16F818,
+ 16F819,
+ 16F870,
+ 16F871,
+ 16F872,
+ 16F873,
+ 16F873A,
+ 16F874,
+ 16F874A,
+ 16F876,
+ 16F876A
 \end_layout
 
 \begin_layout Standard
-16F877, 16F877A, 16F882, 16F883, 16F884, 16F886, 16F887
+16F877,
+ 16F877A,
+ 16F882,
+ 16F883,
+ 16F884,
+ 16F886,
+ 16F887
 \end_layout
 
 \begin_layout Standard
-16F913, 16F914, 16F916, 16F917, 16F946
+16F913,
+ 16F914,
+ 16F916,
+ 16F917,
+ 16F946
 \end_layout
 
 \begin_layout Standard
-16LF74, 16LF76, 16LF77
+16LF74,
+ 16LF76,
+ 16LF77
 \end_layout
 
 \begin_layout Standard
-16LF84, 16LF84A, 16LF87, 16LF88
+16LF84,
+ 16LF84A,
+ 16LF87,
+ 16LF88
 \end_layout
 
 \begin_layout Standard
-16LF627, 16LF627A, 16LF628, 16LF628A, 16LF648A
+16LF627,
+ 16LF627A,
+ 16LF628,
+ 16LF628A,
+ 16LF648A
 \end_layout
 
 \begin_layout Standard
-16LF707, 16LF720, 16LF721, 16LF722, 16LF722A, 16LF723, 16LF723A, 16LF724,
- 16LF726, 16LF727 
+16LF707,
+ 16LF720,
+ 16LF721,
+ 16LF722,
+ 16LF722A,
+ 16LF723,
+ 16LF723A,
+ 16LF724,
+ 16LF726,
+ 16LF727 
 \end_layout
 
 \begin_layout Standard
-16LF747, 16LF767, 16LF777
+16LF747,
+ 16LF767,
+ 16LF777
 \end_layout
 
 \begin_layout Standard
-16LF818, 16LF819, 16LF870, 16LF871, 16LF872, 16LF873, 16LF873A, 16LF874,
+16LF818,
+ 16LF819,
+ 16LF870,
+ 16LF871,
+ 16LF872,
+ 16LF873,
+ 16LF873A,
+ 16LF874,
  16LF874A
 \end_layout
 
 \begin_layout Standard
-16LF876, 16LF876A, 16LF877, 16LF877A
+16LF876,
+ 16LF876A,
+ 16LF877,
+ 16LF877A
 \end_layout
 
 \begin_layout Standard
-16HV610, 16HV616, 16HV753, 16HV785
+16HV610,
+ 16HV616,
+ 16HV753,
+ 16HV785
 \end_layout
 
 \begin_layout Standard
@@ -46320,119 +48474,262 @@
 \end_layout
 
 \begin_layout Standard
-12F1501, 12F1571, 12F1572, 12F1612, 12F1822, 12F1840
+12F1501,
+ 12F1571,
+ 12F1572,
+ 12F1612,
+ 12F1822,
+ 12F1840
 \end_layout
 
 \begin_layout Standard
-12LF1501, 12LF1552, 12LF1571, 12LF1572, 12LF1612, 12LF1822, 12LF1840, 12LF1840T3
-9A, 12LF1840T48A
+12LF1501,
+ 12LF1552,
+ 12LF1571,
+ 12LF1572,
+ 12LF1612,
+ 12LF1822,
+ 12LF1840,
+ 12LF1840T39A,
+ 12LF1840T48A
 \end_layout
 
 \begin_layout Standard
-16F1454, 16F1455, 16F1458, 16F1459
+16F1454,
+ 16F1455,
+ 16F1458,
+ 16F1459
 \end_layout
 
 \begin_layout Standard
-16F1503, 16F1507, 16F1508, 16F1509, 16F1512, 16F1513, 16F1516, 16F1517,
- 16F1518, 16F1519
+16F1503,
+ 16F1507,
+ 16F1508,
+ 16F1509,
+ 16F1512,
+ 16F1513,
+ 16F1516,
+ 16F1517,
+ 16F1518,
+ 16F1519
 \end_layout
 
 \begin_layout Standard
-16F1526, 16F1527, 16F1574, 16F1575, 16F1578, 16F1579
+16F1526,
+ 16F1527,
+ 16F1574,
+ 16F1575,
+ 16F1578,
+ 16F1579
 \end_layout
 
 \begin_layout Standard
-16F1613, 16F1614, 16F1615, 16F1618, 16F1619
+16F1613,
+ 16F1614,
+ 16F1615,
+ 16F1618,
+ 16F1619
 \end_layout
 
 \begin_layout Standard
-16F1703, 16F1704, 16F1705, 16F1707, 16F1708, 16F1709, 16F1713, 16F1716,
- 16F1717, 16F1718, 16F1719
+16F1703,
+ 16F1704,
+ 16F1705,
+ 16F1707,
+ 16F1708,
+ 16F1709,
+ 16F1713,
+ 16F1716,
+ 16F1717,
+ 16F1718,
+ 16F1719
 \end_layout
 
 \begin_layout Standard
-16F1764, 16F1765, 16F1768, 16F1769, 16F1773, 16F1776, 16F1777, 16F1778,
+16F1764,
+ 16F1765,
+ 16F1768,
+ 16F1769,
+ 16F1773,
+ 16F1776,
+ 16F1777,
+ 16F1778,
  16F1779
 \end_layout
 
 \begin_layout Standard
-16F1782, 16F1783, 16F1784, 16F1786, 16F1787, 16F1788, 16F1789
+16F1782,
+ 16F1783,
+ 16F1784,
+ 16F1786,
+ 16F1787,
+ 16F1788,
+ 16F1789
 \end_layout
 
 \begin_layout Standard
-16F1823, 16F1824, 16F1825, 16F1826, 16F1827, 16F1828, 16F1829, 16F1829LIN,
+16F1823,
+ 16F1824,
+ 16F1825,
+ 16F1826,
+ 16F1827,
+ 16F1828,
+ 16F1829,
+ 16F1829LIN,
  16F1847
 \end_layout
 
 \begin_layout Standard
-16F1933, 16F1934, 16F1936, 16F1937, 16F1938, 16F1939, 16F1946, 16F1947
+16F1933,
+ 16F1934,
+ 16F1936,
+ 16F1937,
+ 16F1938,
+ 16F1939,
+ 16F1946,
+ 16F1947
 \end_layout
 
 \begin_layout Standard
-16F18313, 16F18323, 16F18324, 16F18325, 16F18344, 16F18345,
+16F18313,
+ 16F18323,
+ 16F18324,
+ 16F18325,
+ 16F18344,
+ 16F18345,
 \end_layout
 
 \begin_layout Standard
-16F18855, 16F18875
+16F18855,
+ 16F18875
 \end_layout
 
 \begin_layout Standard
-16LF1454, 16LF1455, 16LF1458, 16LF1459
+16LF1454,
+ 16LF1455,
+ 16LF1458,
+ 16LF1459
 \end_layout
 
 \begin_layout Standard
-16LF1503, 16LF1507, 16LF1508, 16LF1509, 16LF1512, 16LF1513, 16LF1516, 16LF1517,
- 16LF1518, 16LF1519,
+16LF1503,
+ 16LF1507,
+ 16LF1508,
+ 16LF1509,
+ 16LF1512,
+ 16LF1513,
+ 16LF1516,
+ 16LF1517,
+ 16LF1518,
+ 16LF1519,
 \end_layout
 
 \begin_layout Standard
-16LF1526, 16LF1527 
+16LF1526,
+ 16LF1527 
 \end_layout
 
 \begin_layout Standard
-16LF1554, 16LF1559, 16LF1566, 16LF1567, 16LF1574, 16LF1575, 16LF1578, 16LF1579
+16LF1554,
+ 16LF1559,
+ 16LF1566,
+ 16LF1567,
+ 16LF1574,
+ 16LF1575,
+ 16LF1578,
+ 16LF1579
 \end_layout
 
 \begin_layout Standard
-16LF1613, 16LF1614, 16LF1615, 16LF1618, 16LF1619
+16LF1613,
+ 16LF1614,
+ 16LF1615,
+ 16LF1618,
+ 16LF1619
 \end_layout
 
 \begin_layout Standard
-16LF1703, 16LF1704, 16LF1705, 16LF1707, 16LF1708, 16LF1709, 16LF1713, 16LF1716,
- 16LF1717, 16LF1718, 16LF1719 
+16LF1703,
+ 16LF1704,
+ 16LF1705,
+ 16LF1707,
+ 16LF1708,
+ 16LF1709,
+ 16LF1713,
+ 16LF1716,
+ 16LF1717,
+ 16LF1718,
+ 16LF1719 
 \end_layout
 
 \begin_layout Standard
-16LF1764, 16LF1765, 16LF1768, 16LF1769, 16LF1773, 16LF1776, 16LF1777, 16LF1778,
+16LF1764,
+ 16LF1765,
+ 16LF1768,
+ 16LF1769,
+ 16LF1773,
+ 16LF1776,
+ 16LF1777,
+ 16LF1778,
  16LF1779
 \end_layout
 
 \begin_layout Standard
-16LF1782, 16LF1783, 16LF1784, 16LF1786, 16LF1787, 16LF1788, 16LF1789,
+16LF1782,
+ 16LF1783,
+ 16LF1784,
+ 16LF1786,
+ 16LF1787,
+ 16LF1788,
+ 16LF1789,
 \end_layout
 
 \begin_layout Standard
-16LF1823, 16LF1824, 16LF1824T39A
+16LF1823,
+ 16LF1824,
+ 16LF1824T39A
 \end_layout
 
 \begin_layout Standard
-16LF1825, 16LF1826, 16LF1827, 16LF1828, 16LF1829, 16LF1847
+16LF1825,
+ 16LF1826,
+ 16LF1827,
+ 16LF1828,
+ 16LF1829,
+ 16LF1847
 \end_layout
 
 \begin_layout Standard
-16LF1902, 16LF1903, 16LF1904, 16LF1906, 16LF1907
+16LF1902,
+ 16LF1903,
+ 16LF1904,
+ 16LF1906,
+ 16LF1907
 \end_layout
 
 \begin_layout Standard
-16LF1933, 16LF1934, 16LF1936, 16LF1937, 16LF1938, 16LF1939, 16LF1946, 16LF1947
+16LF1933,
+ 16LF1934,
+ 16LF1936,
+ 16LF1937,
+ 16LF1938,
+ 16LF1939,
+ 16LF1946,
+ 16LF1947
 \end_layout
 
 \begin_layout Standard
-16LF18313, 16LF18323, 16LF18324, 16LF18325, 16LF18344, 16LF18345
+16LF18313,
+ 16LF18323,
+ 16LF18324,
+ 16LF18325,
+ 16LF18344,
+ 16LF18345
 \end_layout
 
 \begin_layout Standard
-16LF18855, 16LF18875
+16LF18855,
+ 16LF18875
 \end_layout
 
 \begin_layout Standard
@@ -46454,6 +48751,8 @@
 \begin_layout Subsection
 PIC Code Pages
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46464,6 +48763,8 @@
 
  and Memory Banks
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46478,10 +48779,9 @@
 \begin_layout Standard
 The linker organizes allocation for the code page and RAM banks.
  It does not have intimate knowledge of the code flow.
- It will put all the code section of a single .asm file into a single code
- page.
- In order to make use of multiple code pages, separate asm files must be
- used.
+ It will put all the code section of a single .asm file into a single code page.
+ In order to make use of multiple code pages,
+ separate asm files must be used.
  The compiler assigns all 
 \emph on
 static
@@ -46494,32 +48794,32 @@
 \begin_inset Newline newline
 \end_inset
 
-To get the best results, follow these guidelines:
+To get the best results,
+ follow these guidelines:
 \end_layout
 
 \begin_layout Enumerate
-Make local functions static, as non static functions require code page selection
- overhead.
+Make local functions static,
+ as non static functions require code page selection overhead.
 \begin_inset Newline newline
 \end_inset
 
-Due to the way SDCC handles functions, place called functions prior to calling
- functions in the file wherever possible: Otherwise SDCC will insert unnecessary
- pagesel directives around the call, believing that the called function
- is externally defined.
+Due to the way SDCC handles functions,
+ place called functions prior to calling functions in the file wherever possible:
+ Otherwise SDCC will insert unnecessary pagesel directives around the call,
+ believing that the called function is externally defined.
 \end_layout
 
 \begin_layout Enumerate
-For devices that have multiple code pages it is more efficient to use the
- same number of files as pages: Use up to 4 separate .c files for the 16F877,
+For devices that have multiple code pages it is more efficient to use the same number of files as pages:
+ Use up to 4 separate .c files for the 16F877,
  but only 2 files for the 16F874.
- This way the linker can put the code for each file into different code
- pages and there will be less page selection overhead.
+ This way the linker can put the code for each file into different code pages and there will be less page selection overhead.
 \end_layout
 
 \begin_layout Enumerate
-And as for any 8 bit micro (especially for PIC14 as they have a very simple
- instruction set), use `unsigned char' wherever possible instead of `int'.
+And as for any 8 bit micro (especially for PIC14 as they have a very simple instruction set),
+ use `unsigned char' wherever possible instead of `int'.
 \end_layout
 
 \begin_layout Subsection
@@ -46548,11 +48848,12 @@
 \begin_inset Newline newline
 \end_inset
 
-Each device is described in two files: pic16f*.h and pic16f*.c.
- These files primarily define SFRs, structs to access their bits, and symbolic
- configuration options.
- Both files can be generated from gputils' .inc files using the perl script
- 
+Each device is described in two files:
+ pic16f*.h and pic16f*.c.
+ These files primarily define SFRs,
+ structs to access their bits,
+ and symbolic configuration options.
+ Both files can be generated from gputils' .inc files using the perl script 
 \family typewriter
 support/scripts/inc2h.pl
 \family default
@@ -46561,13 +48862,13 @@
 \end_layout
 
 \begin_layout Enumerate
-Copy the .h file into SDCC's include path and either add the .c file to your
- project or copy it to 
+Copy the .h file into SDCC's include path and either add the .c file to your project or copy it to 
 \family typewriter
 device/lib/pic/libdev
 \family default
 .
- Afterwards, rebuild and install the libraries.
+ Afterwards,
+ rebuild and install the libraries.
 \end_layout
 
 \begin_layout Enumerate
@@ -46583,8 +48884,10 @@
 \begin_inset Newline newline
 \end_inset
 
-You need to add a device specification here to make the memory layout (code
- banks, RAM, aliased memory regions, ...) known to the compiler.
+You need to add a device specification here to make the memory layout (code banks,
+ RAM,
+ aliased memory regions,
+ ...) known to the compiler.
  Probably you can copy and modify an existing entry.
  The file format is documented at the top of the file.
 \end_layout
@@ -46594,12 +48897,15 @@
 \end_layout
 
 \begin_layout Standard
-For the interrupt function, use the keyword 
+For the interrupt function,
+ use the keyword 
 \emph on
 __interrupt
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46608,8 +48914,7 @@
 
 \end_inset
 
- with level number of 0 (PIC14 only has 1 interrupt so this number is only
- there to avoid a syntax error - it ought to be fixed).
+ with level number of 0 (PIC14 only has 1 interrupt so this number is only there to avoid a syntax error - it ought to be fixed).
  E.g.:
 \end_layout
 
@@ -46632,7 +48937,8 @@
 \begin_inset space ~
 \end_inset
 
-T0IF = 0; /* Clear timer interrupt */
+T0IF = 0;
+ /* Clear timer interrupt */
 \begin_inset Newline newline
 \end_inset
 
@@ -46653,8 +48959,7 @@
 __at
 \family default
 ' modifiers.
- Possible options should be ANDed and can be found in your processor header
- file.
+ Possible options should be ANDed and can be found in your processor header file.
  Example for PIC16F88:
 \end_layout
 
@@ -46689,8 +48994,8 @@
 \family typewriter
 __at()
 \family default
-) refers to a config word location, using a type large enough for the configurat
-ion word (
+) refers to a config word location,
+ using a type large enough for the configuration word (
 \family typewriter
 uint16_t
 \family default
@@ -46703,8 +49008,7 @@
 \begin_inset Newline newline
 \end_inset
 
-If your processor header file doesn't contain config addresses you can declare
- it manually or use a literal address:
+If your processor header file doesn't contain config addresses you can declare it manually or use a literal address:
 \end_layout
 
 \begin_layout LyX-Code
@@ -46724,6 +49028,8 @@
 \begin_layout Standard
 For assembling you can use either GPUTILS'
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46746,8 +49052,7 @@
 
 .
  For linking you can use either GPUTILS' gplink or MPLAB's mplink.exe.
- If you use MPLAB and an interrupt function then the linker script file
- vectors section will need to be enlarged to link with mplink.
+ If you use MPLAB and an interrupt function then the linker script file vectors section will need to be enlarged to link with mplink.
 \begin_inset Newline newline
 \end_inset
 
@@ -46755,20 +49060,20 @@
 \begin_inset Newline newline
 \end_inset
 
-Pic device specific header and c source files are automatically generated
- from MPLAB include files, which are published by Microchip with a special
- requirement that they are only to be used with authentic Microchip devices.
- This reqirement prevents to publish generated header and c source files
- under the GPL compatible license, so they are located in non-free directory
- (see section 
+Pic device specific header and c source files are automatically generated from MPLAB include files,
+ which are published by Microchip with a special requirement that they are only to be used with authentic Microchip devices.
+ This reqirement prevents to publish generated header and c source files under the GPL compatible license,
+ so they are located in non-free directory (see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Search-Paths"
+nolink "false"
 
 \end_inset
 
 ).
- In order to include them in include and library search paths, the 
+ In order to include them in include and library search paths,
+ the 
 \series bold
 -
 \begin_inset ERT
@@ -46785,6 +49090,8 @@
 
 -use-non-free
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -46816,7 +49123,9 @@
 \begin_inset Newline newline
 \end_inset
 
-NOTE: the compiled code, which use non-free pic device specific libraries,
+NOTE:
+ the compiled code,
+ which use non-free pic device specific libraries,
  is not GPL compatible!
 \begin_inset Newline newline
 \end_inset
@@ -46879,7 +49188,8 @@
 \begin_inset Newline newline
 \end_inset
 
-$(PRJ).hex: $(OBJS)
+$(PRJ).hex:
+ $(OBJS)
 \begin_inset Newline newline
 \end_inset
 
@@ -46929,7 +49239,8 @@
 \begin_layout Verse
 
 \family typewriter
-.c.o: 
+.c.o:
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -47009,7 +49320,8 @@
 \begin_inset Newline newline
 \end_inset
 
-$(PRJ).hex: $(OBJS)
+$(PRJ).hex:
+ $(OBJS)
 \begin_inset Newline newline
 \end_inset
 
@@ -47061,8 +49373,8 @@
 \end_layout
 
 \begin_layout Standard
-Besides the switches common to all SDCC backends, the PIC14 port accepts
- the following options (for an updated list see sdcc -
+Besides the switches common to all SDCC backends,
+ the PIC14 port accepts the following options (for an updated list see sdcc -
 \begin_inset ERT
 status collapsed
 
@@ -47094,6 +49406,8 @@
 
 -debug-xtra
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47134,6 +49448,8 @@
 
 -no-pcode-opt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47174,6 +49490,8 @@
 
 -stack-loc
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47195,8 +49513,7 @@
 
 \end_inset
 
- sets the lowest address of the argument passing stack (defaults to a suitably
- large shared databank to reduce BANKSEL overhead)
+ sets the lowest address of the argument passing stack (defaults to a suitably large shared databank to reduce BANKSEL overhead)
 \end_layout
 
 \begin_layout Description
@@ -47215,6 +49532,8 @@
 
 -stack-size
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47236,7 +49555,10 @@
 
 \end_inset
 
- sets the size if the argument passing stack (default: 16, minimum: 4)
+ sets the size if the argument passing stack (default:
+ 16,
+ minimum:
+ 4)
 \end_layout
 
 \begin_layout Description
@@ -47255,6 +49577,8 @@
 
 -use-non-free
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47276,8 +49600,7 @@
 
 \end_inset
 
- make non-free device headers and libraries available in the compiler's
- search paths (implicit -I and -L options)
+ make non-free device headers and libraries available in the compiler's search paths (implicit -I and -L options)
 \end_layout
 
 \begin_layout Description
@@ -47309,6 +49632,8 @@
 \begin_layout Description
 SDCC_PIC14_SPLIT_LOCALS
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47358,6 +49683,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47405,10 +49732,10 @@
 
 \end_inset
 
- If set and not empty, sdcc will allocate each temporary register (the ones
- called r0xNNNN) in a section of its own.
- By default (if this variable is unset), sdcc tries to cluster registers
- in sections in order to reduce the BANKSEL overhead when accessing them.
+ If set and not empty,
+ sdcc will allocate each temporary register (the ones called r0xNNNN) in a section of its own.
+ By default (if this variable is unset),
+ sdcc tries to cluster registers in sections in order to reduce the BANKSEL overhead when accessing them.
 \end_layout
 
 \begin_layout Subsection
@@ -47416,10 +49743,11 @@
 \end_layout
 
 \begin_layout Standard
-The PIC14 library currently only contains support routines required by the
- compiler to implement multiplication, division, and floating point support.
- No libc-like replacement is available at the moment, though many of the
- common sdcc library sources (in 
+The PIC14 library currently only contains support routines required by the compiler to implement multiplication,
+ division,
+ and floating point support.
+ No libc-like replacement is available at the moment,
+ though many of the common sdcc library sources (in 
 \family typewriter
 device/lib
 \family default
@@ -47431,9 +49759,9 @@
 \end_layout
 
 \begin_layout Standard
-SDCC/PIC14 has experimental support for devices with the enhanced 14-bit
- cores (such as pic12f1822).
- Due to differences in required code, the libraries provided with SDCC (
+SDCC/PIC14 has experimental support for devices with the enhanced 14-bit cores (such as pic12f1822).
+ Due to differences in required code,
+ the libraries provided with SDCC (
 \family typewriter
 libm.lib
 \family default
@@ -47441,7 +49769,8 @@
 \family typewriter
 libsdcc.lib
 \family default
-) are now provided in two variants: 
+) are now provided in two variants:
+ 
 \family typewriter
 libm.lib
 \family default
@@ -47449,7 +49778,8 @@
 \family typewriter
 libsdcc.lib
 \family default
- are compiled for the regular, non-enhanced devices.
+ are compiled for the regular,
+ non-enhanced devices.
  
 \family typewriter
 libme.lib
@@ -47463,17 +49793,19 @@
 e
 \family default
 ') are compiled for enhanced devices.
- When linking manually, make sure to select the proper variant!
+ When linking manually,
+ make sure to select the proper variant!
 \end_layout
 
 \begin_layout Standard
-When SDCC is used to invoke the linker, SDCC will automatically select the
- 
+When SDCC is used to invoke the linker,
+ SDCC will automatically select the 
 \family typewriter
 libsdcc.lib
 \family default
 -variant suitable for the target device.
- However, no such magic has been conjured up for 
+ However,
+ no such magic has been conjured up for 
 \family typewriter
 libm.lib
 \family default
@@ -47493,13 +49825,14 @@
 \family typewriter
 <bitname>
 \family default
-, which is defined in the respective device header for all 
+,
+ which is defined in the respective device header for all 
 \family typewriter
 <bitname>
 \family default
 s.
- In order to avoid polluting the global namespace with the names of all
- the bits, you can 
+ In order to avoid polluting the global namespace with the names of all the bits,
+ you can 
 \family typewriter
 #define NO_BIT_DEFINES
 \family default
@@ -47522,20 +49855,21 @@
 \family typewriter
 NO_BIT_DEFINES
 \family default
- is used, individual bits of the SFRs can be accessed as 
+ is used,
+ individual bits of the SFRs can be accessed as 
 \family typewriter
 <sfrname>bits.<bitname>
 \family default
 .
- With the 3.1.0 release, the previously used 
+ With the 3.1.0 release,
+ the previously used 
 \family typewriter
 <sfrname>_bits.<bitname>
 \family default
  (note the underscore) is deprecated.
- This was done to align the naming conventions with the PIC16 port and competing
- compiler vendors.
- To avoid polluting the global namespace with the legacy names, you can
- prevent their definition using 
+ This was done to align the naming conventions with the PIC16 port and competing compiler vendors.
+ To avoid polluting the global namespace with the legacy names,
+ you can prevent their definition using 
 \family typewriter
 #define NO_LEGACY_NAMES
 \family default
@@ -47557,7 +49891,8 @@
 \family typewriter
 <sfrname>bits.<bitname>
 \family default
-, otherwise 
+,
+ otherwise 
 \family typewriter
 <bitname>
 \family default
@@ -47565,7 +49900,8 @@
 \family typewriter
 <sfrname>bits.<bitname>
 \family default
-, yielding the undefined expression 
+,
+ yielding the undefined expression 
 \family typewriter
 <sfrname>bits.<sfrname>bits.<bitname>
 \family default
@@ -47573,26 +49909,26 @@
 \end_layout
 
 \begin_layout Subsubsection
-error: missing definition for symbol ``__gptrget1''
+error:
+ missing definition for symbol ``__gptrget1''
 \end_layout
 
 \begin_layout Standard
-The PIC14 port uses library routines to provide more complex operations
- like multiplication, division/modulus and (generic) pointer dereferencing.
- In order to add these routines to your project, you must link with PIC14's
- 
+The PIC14 port uses library routines to provide more complex operations like multiplication,
+ division/modulus and (generic) pointer dereferencing.
+ In order to add these routines to your project,
+ you must link with PIC14's 
 \family typewriter
 libsdcc.lib
 \family default
 .
- For single source file projects this is done automatically, more complex
- projects must add 
+ For single source file projects this is done automatically,
+ more complex projects must add 
 \family typewriter
 libsdcc.lib
 \family default
  to the linker's arguments.
- Make sure you also add an include path for the library (using the -I switch
- to the linker)!
+ Make sure you also add an include path for the library (using the -I switch to the linker)!
 \end_layout
 
 \begin_layout Subsubsection
@@ -47600,8 +49936,7 @@
 \end_layout
 
 \begin_layout Standard
-This warning can usually be ignored due to the very good compatibility amongst
- 14
+This warning can usually be ignored due to the very good compatibility amongst 14
 \begin_inset ERT
 status collapsed
 
@@ -47616,6 +49951,8 @@
 
 bit PIC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47628,8 +49965,7 @@
 \end_layout
 
 \begin_layout Standard
-You might also consider recompiling the library for your specific device
- by changing the ARCH=p16f877 (default target) entry in 
+You might also consider recompiling the library for your specific device by changing the ARCH=p16f877 (default target) entry in 
 \family typewriter
 device/lib/pic/Makefile.in
 \family default
@@ -47638,8 +49974,7 @@
 device/lib/pic/Makefile
 \family default
  to reflect your device.
- This might even improve performance for smaller devices as unnecessary
- BANKSELs might be removed.
+ This might even improve performance for smaller devices as unnecessary BANKSELs might be removed.
 \end_layout
 
 \begin_layout Subsection
@@ -47652,8 +49987,9 @@
 
 \begin_layout Standard
 Functions with variable argument lists (like printf) are not yet supported.
- Similarly, taking the address of the first argument passed into a function
- does not work: It is currently passed in WREG and has no address...
+ Similarly,
+ taking the address of the first argument passed into a function does not work:
+ It is currently passed in WREG and has no address...
 \end_layout
 
 \begin_layout Subsubsection
@@ -47661,15 +49997,18 @@
 \end_layout
 
 \begin_layout Standard
-Though the small subset of regression tests in src/regression passes, SDCC
- regression test suite does not, indicating that there are still major bugs
- in the port.
- However, many smaller projects have successfully used SDCC in the past...
+Though the small subset of regression tests in src/regression passes,
+ SDCC regression test suite does not,
+ indicating that there are still major bugs in the port.
+ However,
+ many smaller projects have successfully used SDCC in the past...
 \end_layout
 
 \begin_layout Section
 The PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47684,6 +50023,8 @@
 \begin_layout Standard
 The PIC16 port adds support for Microchip
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47698,6 +50039,8 @@
 
  PIC
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -47712,9 +50055,10 @@
 
  MCUs with 16 bit wide instructions.
  This port is not yet mature and still lacks many features.
- However, it can work for simple code.
- Currently this family of microcontrollers contains the PIC18Fxxx and PIC18Fxxxx
-; devices supported by the port include:
+ However,
+ it can work for simple code.
+ Currently this family of microcontrollers contains the PIC18Fxxx and PIC18Fxxxx;
+ devices supported by the port include:
 \end_layout
 
 \begin_layout Standard
@@ -47781,8 +50125,7 @@
 \end_layout
 
 \begin_layout Standard
-18F65J10 18F65J11 18F65J15 18F65J50 18F65J90 18F65J94 18F65K22 18F65K80
- 18F65K90
+18F65J10 18F65J11 18F65J15 18F65J50 18F65J90 18F65J94 18F65K22 18F65K80 18F65K90
 \end_layout
 
 \begin_layout Standard
@@ -47794,8 +50137,7 @@
 \end_layout
 
 \begin_layout Standard
-18F67J10 18F67J11 18F67J50 18F67J60 18F67J90 18F67J93 18F67J94 18F67K22
- 18F67K90
+18F67J10 18F67J11 18F67J50 18F67J60 18F67J90 18F67J93 18F67J94 18F67K22 18F67K90
 \end_layout
 
 \begin_layout Standard
@@ -47819,8 +50161,7 @@
 \end_layout
 
 \begin_layout Standard
-18F87J10 18F87J11 18F87J50 18F87J60 18F87J72 18F87J90 18F87J93 18F87J94
- 18F87K22 18F87K90
+18F87J10 18F87J11 18F87J50 18F87J60 18F87J72 18F87J90 18F87J93 18F87J94 18F87K22 18F87K90
 \end_layout
 
 \begin_layout Standard
@@ -47860,8 +50201,7 @@
 \end_layout
 
 \begin_layout Standard
-18F2510 18F2515 18F2520 18F2523 18F2525 18F2539 18F2550 18F2553 18F2580
- 18F2585
+18F2510 18F2515 18F2520 18F2523 18F2525 18F2539 18F2550 18F2553 18F2580 18F2585
 \end_layout
 
 \begin_layout Standard
@@ -47881,8 +50221,7 @@
 \end_layout
 
 \begin_layout Standard
-18F4510 18F4515 18F4520 18F4523 18F4525 18F4539 18F4550 18F4553 18F4580
- 18F4585
+18F4510 18F4515 18F4520 18F4523 18F4525 18F4539 18F4550 18F4553 18F4580 18F4585
 \end_layout
 
 \begin_layout Standard
@@ -48006,13 +50345,11 @@
 \end_layout
 
 \begin_layout Standard
-18LF2410 18LF2420 18LF2423 18LF2431 18LF2439 18LF2450 18LF2455 18LF2458
- 18LF2480
+18LF2410 18LF2420 18LF2423 18LF2431 18LF2439 18LF2450 18LF2455 18LF2458 18LF2480
 \end_layout
 
 \begin_layout Standard
-18LF2510 18LF2515 18LF2520 18LF2523 18LF2525 18LF2539 18LF2550 18LF2553
- 18LF2580 18LF2585
+18LF2510 18LF2515 18LF2520 18LF2523 18LF2525 18LF2539 18LF2550 18LF2553 18LF2580 18LF2585
 \end_layout
 
 \begin_layout Standard
@@ -48028,13 +50365,11 @@
 \end_layout
 
 \begin_layout Standard
-18LF4410 18LF4420 18LF4423 18LF4431 18LF4439 18LF4450 18LF4455 18LF4458
- 18LF4480
+18LF4410 18LF4420 18LF4423 18LF4431 18LF4439 18LF4450 18LF4455 18LF4458 18LF4480
 \end_layout
 
 \begin_layout Standard
-18LF4510 18LF4515 18LF4520 18LF4523 18LF4525 18LF4539 18LF4550 18LF4553
- 18LF4580 18LF4585
+18LF4510 18LF4515 18LF4520 18LF4523 18LF4525 18LF4539 18LF4550 18LF4553 18LF4580 18LF4585
 \end_layout
 
 \begin_layout Standard
@@ -48102,9 +50437,8 @@
 \end_layout
 
 \begin_layout Standard
-PIC16 port supports the standard command line arguments as supposed, with
- the exception of certain cases that will be mentioned in the following
- list:
+PIC16 port supports the standard command line arguments as supposed,
+ with the exception of certain cases that will be mentioned in the following list:
 \end_layout
 
 \begin_layout Description
@@ -48123,6 +50457,8 @@
 
 -callee-saves
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48176,6 +50512,8 @@
 
 -use-non-free
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48197,13 +50535,14 @@
 
 \end_inset
 
- Make non-free device headers and libraries available in the compiler's
- search paths (implicit -I and -L options).
+ Make non-free device headers and libraries available in the compiler's search paths (implicit -I and -L options).
 \end_layout
 
 \begin_layout Subsection
 Port Specific Options
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48255,7 +50594,8 @@
 \end_inset
 
 -pstack-model=[model] Used in conjunction with the command above.
- Defines the stack model to be used, valid stack models are:
+ Defines the stack model to be used,
+ valid stack models are:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -48358,22 +50698,21 @@
 
 \begin_layout Labeling
 \labelwidthstring 00.00.0000
-1 checks previous used register and if it is the same then does not emit
- BANKSEL, accounts only for labels.
+1 checks previous used register and if it is the same then does not emit BANKSEL,
+ accounts only for labels.
 \end_layout
 
 \begin_layout Labeling
 \labelwidthstring 00.00.0000
-2 tries to check the location of (even different) symbols and removes BANKSELs
- if they are in the same bank.
+2 tries to check the location of (even different) symbols and removes BANKSELs if they are in the same bank.
  
 \begin_inset Newline newline
 \end_inset
 
 
 \emph on
-Important: There might be problems if the linker script has data sections
- across bank borders!
+Important:
+ There might be problems if the linker script has data sections across bank borders!
 \end_layout
 
 \end_deeper
@@ -48483,6 +50822,8 @@
 
 -mplab-comp MPLAB
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48530,9 +50871,11 @@
 
 \end_inset
 
--preplace-udata-with=[kword] Replaces the default udata keyword for allocating
- unitialized data variables with [kword].
- Valid keywords are: "udata_acs", "udata_shr", "udata_ovr".
+-preplace-udata-with=[kword] Replaces the default udata keyword for allocating unitialized data variables with [kword].
+ Valid keywords are:
+ "udata_acs",
+ "udata_shr",
+ "udata_ovr".
 \end_layout
 
 \begin_layout Description
@@ -48645,6 +50988,8 @@
 
 -debug
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48666,7 +51011,8 @@
 
 \end_inset
 
-, but dumps more information.
+,
+ but dumps more information.
 \end_layout
 
 \begin_layout Description
@@ -48683,8 +51029,7 @@
 
 \end_inset
 
--debug-ralloc Force register allocator to dump <source>.d file with debugging
- information.
+-debug-ralloc Force register allocator to dump <source>.d file with debugging information.
  <source> is the name of the file being compiled.
 \end_layout
 
@@ -48744,10 +51089,8 @@
 \end_layout
 
 \begin_layout Standard
-There is a number of environmental variables that can be used when running
- SDCC to enable certain optimizations or force a specific program behaviour.
- these variables are primarily for debugging purposes so they can be enabled/dis
-abled at will.
+There is a number of environmental variables that can be used when running SDCC to enable certain optimizations or force a specific program behaviour.
+ these variables are primarily for debugging purposes so they can be enabled/disabled at will.
 \end_layout
 
 \begin_layout Standard
@@ -48757,6 +51100,8 @@
 \begin_layout Description
 OPTIMIZE_BITFIELD_POINTER_GET
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48806,6 +51151,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48853,20 +51200,20 @@
 
 \end_inset
 
- When this variable exists, reading of structure bit-fields is optimized
- by directly loading FSR0 with the address of the bit-field structure.
- Normally SDCC will cast the bit-field structure to a bit-field pointer
- and then load FSR0.
- This step saves data ram and code space for functions that make heavy use
- of bit-fields.
- (i.e., 80 bytes of code space are saved when compiling malloc.c with this
- option).
+ When this variable exists,
+ reading of structure bit-fields is optimized by directly loading FSR0 with the address of the bit-field structure.
+ Normally SDCC will cast the bit-field structure to a bit-field pointer and then load FSR0.
+ This step saves data ram and code space for functions that make heavy use of bit-fields.
+ (i.e.,
+ 80 bytes of code space are saved when compiling malloc.c with this option).
  
 \end_layout
 
 \begin_layout Description
 NO_REG_OPT
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48903,6 +51250,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48939,13 +51288,15 @@
 
  Do not perform pCode registers optimization.
  This should be used for debugging purposes.
- If bugs in the pcode optimizer are found, users can benefit from temporarily
- disabling the optimizer until the bug is fixed.
+ If bugs in the pcode optimizer are found,
+ users can benefit from temporarily disabling the optimizer until the bug is fixed.
 \end_layout
 
 \begin_layout Subsection
 Preprocessor Macros
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -48960,6 +51311,8 @@
 \begin_layout Standard
 PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49009,6 +51362,8 @@
 \begin_layout Plain Layout
 __SDCC_pic16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49052,6 +51407,8 @@
 \begin_layout Plain Layout
 pic18fxxxx
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49074,8 +51431,11 @@
 \emph on
 xxxx
 \emph default
- is the microcontrol identification number, i.e.
- 452, 6620, etc
+ is the microcontrol identification number,
+ i.e.
+ 452,
+ 6620,
+ etc
 \end_layout
 
 \end_inset
@@ -49101,6 +51461,8 @@
 
 _18Fxxxx
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49157,6 +51519,8 @@
 \begin_layout Plain Layout
 STACK_MODEL_nnn
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49268,8 +51632,11 @@
 \emph on
 xxxx
 \emph default
- is the microcontrol identification number, i.e.
- 452, 6620, etc
+ is the microcontrol identification number,
+ i.e.
+ 452,
+ 6620,
+ etc
 \end_layout
 
 \end_inset
@@ -49289,8 +51656,7 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-nnn = SMALL or LARGE respectively according to the memory model used for
- SDCC
+nnn = SMALL or LARGE respectively according to the memory model used for SDCC
 \end_layout
 
 \end_inset
@@ -49330,6 +51696,8 @@
 \begin_layout Standard
 PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49497,6 +51865,8 @@
 
 -use-non-free
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49520,7 +51890,8 @@
 
 
 \series default
- command line option is specified, non-free directories are searched:
+ command line option is specified,
+ non-free directories are searched:
 \begin_inset Newline newline
 \end_inset
 
@@ -49675,6 +52046,8 @@
 \begin_layout Standard
 The PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49689,6 +52062,8 @@
 \begin_layout Description
 stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49710,10 +52085,8 @@
 
 \end_inset
 
- This forces the code generator to initialize the stack & frame pointers
- at a specific address.
- This is an ad hoc solution for cases where no STACK directive is available
- in the linker script or gplink is not instructed to create a stack section.
+ This forces the code generator to initialize the stack & frame pointers at a specific address.
+ This is an ad hoc solution for cases where no STACK directive is available in the linker script or gplink is not instructed to create a stack section.
 \begin_inset Newline newline
 \end_inset
 
@@ -49724,11 +52097,8 @@
 
 \begin_layout Plain Layout
 The old format (ie.
- #pragma stack 0x5ff) is deprecated and will cause the stack pointer to
- cross page boundaries (or even exceed the available data RAM) and crash
- the program.
- Make sure that stack does not cross page boundaries when using the SMALL
- stack model.
+ #pragma stack 0x5ff) is deprecated and will cause the stack pointer to cross page boundaries (or even exceed the available data RAM) and crash the program.
+ Make sure that stack does not cross page boundaries when using the SMALL stack model.
 \end_layout
 
 \end_inset
@@ -49774,15 +52144,16 @@
 \end_layout
 
 \begin_layout Standard
-If the stack_size field is omitted then a stack is created with the default
- size of 64.
- This size might be enough for most programs, but its not enough for operations
- with deep function nesting or excessive stack usage.
+If the stack_size field is omitted then a stack is created with the default size of 64.
+ This size might be enough for most programs,
+ but its not enough for operations with deep function nesting or excessive stack usage.
 \end_layout
 
 \begin_layout Description
 code
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -49830,6 +52201,8 @@
 \begin_layout Description
 library
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50094,14 +52467,14 @@
 \begin_inset Newline newline
 \end_inset
 
-* is the device number, i.e.
+* is the device number,
+ i.e.
  452 for PIC18F452 MCU.
 \end_layout
 
 \begin_layout Standard
 \noindent
-This feature allows for linking with specific libraries without having to
- explicit name them in the command line.
+This feature allows for linking with specific libraries without having to explicit name them in the command line.
  Note that the 
 \noun on
 ignore
@@ -50112,6 +52485,8 @@
 \begin_layout Description
 udata
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50133,8 +52508,7 @@
 
 \end_inset
 
- The pragma udata instructs the compiler to emit code so that linker will
- place a variable at a specific memory bank.
+ The pragma udata instructs the compiler to emit code so that linker will place a variable at a specific memory bank.
 \end_layout
 
 \begin_layout LyX-Code
@@ -50158,8 +52532,7 @@
 \end_layout
 
 \begin_layout Standard
-In order for this pragma to work extra SECTION directives should be added
- in the .lkr script.
+In order for this pragma to work extra SECTION directives should be added in the .lkr script.
  In the following example a sample .lkr file is shown:
 \end_layout
 
@@ -50272,14 +52645,14 @@
 \end_layout
 
 \begin_layout Standard
-The linker will recognise the section name set in the pragma statement and
- will position the variable at the memory bank set with the RAM field at
- the SECTION line in the linker script file.
+The linker will recognise the section name set in the pragma statement and will position the variable at the memory bank set with the RAM field at the SECTION line in the linker script file.
 \end_layout
 
 \begin_layout Description
 config
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50309,7 +52682,8 @@
 \end_layout
 
 \begin_layout LyX-Code
-#pragma config setting=value [, setting=value]
+#pragma config setting=value [,
+ setting=value]
 \end_layout
 
 \begin_layout LyX-Code
@@ -50317,9 +52691,9 @@
 \end_layout
 
 \begin_layout Standard
-Multiple settings may be defined on a single line, separated by commas.
- Settings for a single configuration byte may also be defined on separate
- lines.
+Multiple settings may be defined on a single line,
+ separated by commas.
+ Settings for a single configuration byte may also be defined on separate lines.
  
 \end_layout
 
@@ -50351,20 +52725,20 @@
 \end_layout
 
 \begin_layout Standard
-Pic device specific header and c source files are automatically generated
- from MPLAB include files, which are published by Microchip with a special
- requirement that they are only to be used with authentic Microchip devices.
- This requirement prevents to publish generated header and c source files
- under the GPL compatible license, so they are located in the non-free directory
- (see section 
+Pic device specific header and c source files are automatically generated from MPLAB include files,
+ which are published by Microchip with a special requirement that they are only to be used with authentic Microchip devices.
+ This requirement prevents to publish generated header and c source files under the GPL compatible license,
+ so they are located in the non-free directory (see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Search-Paths"
+nolink "false"
 
 \end_inset
 
 ).
- In order to include them in include and library search paths, the 
+ In order to include them in include and library search paths,
+ the 
 \series bold
 -
 \begin_inset ERT
@@ -50381,6 +52755,8 @@
 
 -use-non-free
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50412,7 +52788,9 @@
 \begin_inset Newline newline
 \end_inset
 
-NOTE: the compiled code, which use non-free pic device specific libraries,
+NOTE:
+ the compiled code,
+ which use non-free pic device specific libraries,
  is not GPL compatible!
 \end_layout
 
@@ -50430,6 +52808,8 @@
 \begin_layout Standard
 There is one main header file
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50440,6 +52820,8 @@
 
  that can be included to the source files using the pic16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50456,8 +52838,7 @@
 .
  This header file contains the definitions for the processor special registers,
  so it is necessary if the source accesses them.
- It can be included by adding the following line in the beginning of the
- file:
+ It can be included by adding the following line in the beginning of the file:
 \end_layout
 
 \begin_layout LyX-Code
@@ -50483,6 +52864,8 @@
 \begin_layout Standard
 The libraries
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50493,6 +52876,8 @@
 
  that PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50501,15 +52886,14 @@
 
 \end_inset
 
- port depends on are the microcontroller device libraries which contain
- the symbol definitions for the microcontroller special function registers.
- These libraries have the format pic18fxxxx.lib, where 
+ port depends on are the microcontroller device libraries which contain the symbol definitions for the microcontroller special function registers.
+ These libraries have the format pic18fxxxx.lib,
+ where 
 \emph on
 xxxx
 \emph default
  is the microcontroller identification number.
- The specific library is selected automatically by the compiler at link
- stage according to the selected device.
+ The specific library is selected automatically by the compiler at link stage according to the selected device.
 \end_layout
 
 \begin_layout Standard
@@ -50534,11 +52918,12 @@
 
 \begin_layout Standard
 Before using SDCC/pic16 there are some libraries that need to be compiled.
- This process is done automatically if gputils are found at SDCC's compile
- time.
+ This process is done automatically if gputils are found at SDCC's compile time.
  Should you require to rebuild the pic16 libraries manually (e.g.
  in order to enable output of float values
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50551,8 +52936,10 @@
 \family typewriter
 printf()
 \family default
-, see below), these are the steps required to do so under Linux or Mac OS
- X (cygwin might work as well, but is untested):
+,
+ see below),
+ these are the steps required to do so under Linux or Mac OS X (cygwin might work as well,
+ but is untested):
 \end_layout
 
 \begin_layout LyX-Code
@@ -50572,7 +52959,8 @@
 \end_layout
 
 \begin_layout LyX-Code
-su -c 'make install'     # install the libraries, you need the root password
+su -c 'make install'     # install the libraries,
+ you need the root password
 \end_layout
 
 \begin_layout LyX-Code
@@ -50580,7 +52968,8 @@
 \end_layout
 
 \begin_layout Standard
-If you need to install the headers too, do:
+If you need to install the headers too,
+ do:
 \end_layout
 
 \begin_layout LyX-Code
@@ -50588,7 +52977,8 @@
 \end_layout
 
 \begin_layout LyX-Code
-su -c 'make install'     # install the headers, you need the root password
+su -c 'make install'     # install the headers,
+ you need the root password
 \end_layout
 
 \begin_layout Subsubsection*
@@ -50599,6 +52989,8 @@
 The library is normally built without support for displaying float values,
  only <NO FLOAT>
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50609,6 +53001,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -50618,7 +53012,9 @@
 \end_inset
 
  will appear instead of the value.
- To change this, rebuild the library as stated above, but call 
+ To change this,
+ rebuild the library as stated above,
+ but call 
 \family typewriter
 ./configure.gnu --enable-floats 
 \family default
@@ -50631,7 +53027,8 @@
 \family typewriter
 libc/stdio/vfprintf.c
 \family default
- is actually recompiled, e.g.
+ is actually recompiled,
+ e.g.
  by 
 \family typewriter
 touch
@@ -50656,7 +53053,8 @@
 \family typewriter
 -DUSE_FLOATS=1
 \family default
- should also work, but is untested.
+ should also work,
+ but is untested.
 \end_layout
 
 \begin_layout Subsection
@@ -50727,7 +53125,8 @@
 status collapsed
 
 \begin_layout Plain Layout
-In fact, the 
+In fact,
+ the 
 \family typewriter
 .ignore
 \family default
@@ -50744,7 +53143,8 @@
 
 \end_inset
 
-, or
+,
+ or
 \end_layout
 
 \begin_layout Enumerate
@@ -50752,7 +53152,8 @@
 \family typewriter
 /path/to/sdcc/support/scripts/pic18fam-h-gen.pl
 \family default
- to assign I/O styles, run the 
+ to assign I/O styles,
+ run the 
 \family typewriter
 pic18fam-h-gen.pl
 \family default
@@ -50760,12 +53161,13 @@
 \family typewriter
 pic18fam.h.gen
 \family default
-, replace your existing 
+,
+ replace your existing 
 \family typewriter
 pic18fam.h
 \family default
- with the generated file, and (if required) implement new I/O styles in
- 
+ with the generated file,
+ and (if required) implement new I/O styles in 
 \family typewriter
 /path/to/sdcc/device/include/pic16/{adc,i2c,usart}.h
 \family default
@@ -50784,7 +53186,8 @@
 \begin_inset Newline newline
 \end_inset
 
-The file format is self-explanatory, just add
+The file format is self-explanatory,
+ just add
 \begin_inset Newline newline
 \end_inset
 
@@ -50815,7 +53218,8 @@
 \begin_inset Newline newline
 \end_inset
 
-at the right place (keep the file sorted, please).
+at the right place (keep the file sorted,
+ please).
 \end_layout
 
 \begin_layout Enumerate
@@ -50827,8 +53231,8 @@
 
 
 \family default
-Copy and modify an existing entry or create a new one and insert it at the
- correct place (keep the file sorted, please).
+Copy and modify an existing entry or create a new one and insert it at the correct place (keep the file sorted,
+ please).
 \end_layout
 
 \begin_layout Enumerate
@@ -50842,6 +53246,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:pic16Libraries"
+nolink "false"
 
 \end_inset
 
@@ -50976,10 +53381,9 @@
 \end_layout
 
 \begin_layout Standard
-It is advisable that all sources within a project are compiled with the
- same memory model.
- If one wants to override the default memory model, this can be done by
- declaring a pointer as 
+It is advisable that all sources within a project are compiled with the same memory model.
+ If one wants to override the default memory model,
+ this can be done by declaring a pointer as 
 \series bold
 far
 \series default
@@ -50988,8 +53392,8 @@
 near
 \series default
 .
- Far selects large memory model's pointers, while near selects small memory
- model's pointers.
+ Far selects large memory model's pointers,
+ while near selects small memory model's pointers.
 \end_layout
 
 \begin_layout Standard
@@ -50997,11 +53401,12 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:PIC16_Header-Files"
+nolink "false"
 
 \end_inset
 
-) contain no reference to pointers, so they can be used with both memory
- models.
+) contain no reference to pointers,
+ so they can be used with both memory models.
 \end_layout
 
 \begin_layout Subsection
@@ -51011,6 +53416,8 @@
 \begin_layout Standard
 The stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -51019,8 +53426,8 @@
 
 \end_inset
 
- implementation for the PIC16 port uses two indirect registers, FSR1 and
- FSR2.
+ implementation for the PIC16 port uses two indirect registers,
+ FSR1 and FSR2.
 \end_layout
 
 \begin_layout Description
@@ -51064,8 +53471,7 @@
 \emph default
 \noun default
  uses both FSRxL and FSRxH registers.
- The following table shows the stack/frame pointers sizes according to stack
- model and the maximum space they can address:
+ The following table shows the stack/frame pointers sizes according to stack model and the maximum space they can address:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -51186,8 +53592,7 @@
 \end_layout
 
 \begin_layout Enumerate
-Do not create stack sections with size more than one physical bank (that
- is 256 bytes)
+Do not create stack sections with size more than one physical bank (that is 256 bytes)
 \end_layout
 
 \begin_layout Enumerate
@@ -51196,8 +53601,8 @@
 \end_layout
 
 \begin_layout Standard
-These limitations are caused by the fact that only FSRxL is modified when
- using SMALL stack model, so no more than 256 bytes of stack can be used.
+These limitations are caused by the fact that only FSRxL is modified when using SMALL stack model,
+ so no more than 256 bytes of stack can be used.
  This problem will disappear after LARGE model is fully implemented.
 \end_layout
 
@@ -51206,8 +53611,11 @@
 \end_layout
 
 \begin_layout Standard
-In addition to the standard SDCC function keywords, PIC16
+In addition to the standard SDCC function keywords,
+ PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -51222,6 +53630,8 @@
 \begin_layout Description
 __wparam
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -51231,9 +53641,8 @@
 \end_inset
 
  Use the WREG to pass one byte of the first function argument.
- This improves speed but you may not use this for functions with arguments
- that are called via function pointers, otherwise the first byte of the
- first parameter will get lost.
+ This improves speed but you may not use this for functions with arguments that are called via function pointers,
+ otherwise the first byte of the first parameter will get lost.
  Usage:
 \end_layout
 
@@ -51250,8 +53659,7 @@
 \end_layout
 
 \begin_layout LyX-Code
-    /* the high part of a is stored in FSR2+2 (or +3 for large stack model)
- */
+    /* the high part of a is stored in FSR2+2 (or +3 for large stack model) */
 \end_layout
 
 \begin_layout LyX-Code
@@ -51265,6 +53673,8 @@
 \begin_layout Description
 __shadowregs
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -51273,9 +53683,9 @@
 
 \end_inset
 
- When entering/exiting an ISR, it is possible to take advantage of the PIC18F
- hardware shadow registers which hold the values of WREG, STATUS and BSR
- registers.
+ When entering/exiting an ISR,
+ it is possible to take advantage of the PIC18F hardware shadow registers which hold the values of WREG,
+ STATUS and BSR registers.
  This can be done by adding the keyword 
 \emph on
 __shadowregs
@@ -51308,8 +53718,9 @@
 \emph on
 __shadowregs
 \emph default
- instructs the code generator not to store/restore WREG, STATUS, BSR when
- entering/exiting the ISR.
+ instructs the code generator not to store/restore WREG,
+ STATUS,
+ BSR when entering/exiting the ISR.
 \end_layout
 
 \begin_layout Subsection
@@ -51317,8 +53728,7 @@
 \end_layout
 
 \begin_layout Standard
-Return values from functions are placed to the appropriate registers following
- a modified Microchip policy optimized for SDCC.
+Return values from functions are placed to the appropriate registers following a modified Microchip policy optimized for SDCC.
  The following table shows these registers:
 \begin_inset Separator latexpar
 \end_inset
@@ -51447,7 +53857,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-on stack, FSR0 points to the beginning
+on stack,
+ FSR0 points to the beginning
 \end_layout
 
 \end_inset
@@ -51467,6 +53878,8 @@
 \begin_layout Standard
 An interrupt
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -51505,7 +53918,8 @@
 \emph on
 n
 \emph default
- is the interrupt number, which for PIC18F devices can be:
+ is the interrupt number,
+ which for PIC18F devices can be:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -51679,19 +54093,16 @@
 \emph default
  function.
  The actual ISR code is placed as normally would in the code space.
- Upon interrupt request, the GOTO instruction is executed which jumps to
- the ISR code.
+ Upon interrupt request,
+ the GOTO instruction is executed which jumps to the ISR code.
  When declaring interrupt functions as _naked this GOTO instruction is 
 \series bold
 not
 \series default
  generated.
- The whole interrupt functions is therefore placed at the Interrupt Vector
- Address of the specific interrupt.
- This is not a problem for the LOW priority interrupts, but it is a problem
- for the RESET and the HIGH priority interrupts because code may be written
- at the next interrupt's vector address and cause indeterminate program
- behaviour if that interrupt is raised.
+ The whole interrupt functions is therefore placed at the Interrupt Vector Address of the specific interrupt.
+ This is not a problem for the LOW priority interrupts,
+ but it is a problem for the RESET and the HIGH priority interrupts because code may be written at the next interrupt's vector address and cause indeterminate program behaviour if that interrupt is raised.
 \begin_inset Foot
 status collapsed
 
@@ -51722,13 +54133,16 @@
 n
 \emph default
  may be omitted.
- This way a function is generated similar to an ISR, but it is not assigned
- to any interrupt.
+ This way a function is generated similar to an ISR,
+ but it is not assigned to any interrupt.
 \end_layout
 
 \begin_layout Standard
-When entering an interrupt, currently the PIC16
+When entering an interrupt,
+ currently the PIC16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -51781,10 +54195,9 @@
 
 \begin_layout Standard
 Generic pointers are implemented in PIC16 port as 3-byte (24-bit) types.
- There are 3 types of generic pointers currently implemented data, code
- and eeprom pointers.
- They are differentiated by the value of the 7th and 6th bits of the upper
- byte:
+ There are 3 types of generic pointers currently implemented data,
+ code and eeprom pointers.
+ They are differentiated by the value of the 7th and 6th bits of the upper byte:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -52061,8 +54474,10 @@
 
 \begin_layout Standard
 \noindent
-Generic pointer are read and written with a set of library functions which
- read/write 1, 2, 3, 4 bytes.
+Generic pointer are read and written with a set of library functions which read/write 1,
+ 2,
+ 3,
+ 4 bytes.
 \end_layout
 
 \begin_layout Subsection
@@ -52070,8 +54485,7 @@
 \end_layout
 
 \begin_layout Standard
-Configuration bits (also known as fuses) can be configured using one of
- two methods:
+Configuration bits (also known as fuses) can be configured using one of two methods:
 \end_layout
 
 \begin_layout Itemize
@@ -52079,10 +54493,12 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:PIC16_Pragmas"
+nolink "false"
 
 \end_inset
 
-), which is a preferred method for the new code.
+),
+ which is a preferred method for the new code.
  Example:
 \end_layout
 
@@ -52105,8 +54521,7 @@
 \family default
 ' modifiers.
  This method is deprecated.
- Possible options should be ANDed and can be found in your processor header
- file.
+ Possible options should be ANDed and can be found in your processor header file.
  Example for PIC18F2550:
 \end_layout
 
@@ -52192,8 +54607,8 @@
 \end_layout
 
 \begin_layout Standard
-The FILE type is actually a generic pointer which defines one more type
- of generic pointers, the 
+The FILE type is actually a generic pointer which defines one more type of generic pointers,
+ the 
 \emph on
 stream
 \emph default
@@ -52346,7 +54761,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-upper byte high nubble is 0x2n, the rest are zeroes
+upper byte high nubble is 0x2n,
+ the rest are zeroes
 \end_layout
 
 \end_inset
@@ -52550,8 +54966,7 @@
 
 \begin_layout Standard
 \noindent
-In the libc library there exist the functions that are used to write to
- each of the above streams.
+In the libc library there exist the functions that are used to write to each of the above streams.
  These are
 \end_layout
 
@@ -52604,8 +55019,7 @@
 __wparam
 \emph default
  keyword).
- In stdio.h exists the macro PUTCHAR(arg) that defines the putchar function
- in a user-friendly way.
+ In stdio.h exists the macro PUTCHAR(arg) that defines the putchar function in a user-friendly way.
  
 \emph on
 arg
@@ -52635,7 +55049,8 @@
 \end_layout
 
 \begin_layout LyX-Code
-    PORTA = c;    /* dump character c to PORTA */
+    PORTA = c;
+    /* dump character c to PORTA */
 \end_layout
 
 \begin_layout LyX-Code
@@ -52655,7 +55070,9 @@
 \end_layout
 
 \begin_layout LyX-Code
-    stdout = STREAM_USER;    /* this is not necessary, since stdout points
+    stdout = STREAM_USER;
+    /* this is not necessary,
+ since stdout points
 \end_layout
 
 \begin_layout LyX-Code
@@ -52691,6 +55108,8 @@
 \begin_layout Standard
 PIC16 contains an implementation of the printf-family
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -52704,11 +55123,15 @@
 \end_layout
 
 \begin_layout LyX-Code
-extern unsigned int sprintf(char *buf, char *fmt, ...);
+extern unsigned int sprintf(char *buf,
+ char *fmt,
+ ...);
 \end_layout
 
 \begin_layout LyX-Code
-extern unsigned int vsprintf(char *buf, char *fmt, va_list ap);
+extern unsigned int vsprintf(char *buf,
+ char *fmt,
+ va_list ap);
 \end_layout
 
 \begin_layout LyX-Code
@@ -52716,11 +55139,13 @@
 \end_layout
 
 \begin_layout LyX-Code
-extern unsigned int printf(char *fmt, ...);
+extern unsigned int printf(char *fmt,
+ ...);
 \end_layout
 
 \begin_layout LyX-Code
-extern unsigned int vprintf(char *fmt, va_lista ap);
+extern unsigned int vprintf(char *fmt,
+ va_lista ap);
 \end_layout
 
 \begin_layout LyX-Code
@@ -52728,11 +55153,15 @@
 \end_layout
 
 \begin_layout LyX-Code
-extern unsigned int fprintf(FILE *fp, char *fmt, ...);
+extern unsigned int fprintf(FILE *fp,
+ char *fmt,
+ ...);
 \end_layout
 
 \begin_layout LyX-Code
-extern unsigned int vfprintf(FILE *fp, char *fmt, va_list ap);
+extern unsigned int vfprintf(FILE *fp,
+ char *fmt,
+ va_list ap);
 \end_layout
 
 \begin_layout Standard
@@ -52747,7 +55176,9 @@
 fp
 \emph default
  should be a stream pointer (i.e.
- stdout, STREAM_MSSP, etc...).
+ stdout,
+ STREAM_MSSP,
+ etc...).
 \end_layout
 
 \begin_layout Subsubsection
@@ -53208,13 +55639,13 @@
 
 \begin_layout Standard
 \noindent
-In order to simplify signal handling, a number of macros is provided:
+In order to simplify signal handling,
+ a number of macros is provided:
 \end_layout
 
 \begin_layout Labeling
 \labelwidthstring 00.00.0000
-DEF_INTHIGH(name) begin the definition of the interrupt dispatch table for
- high priority interrupts.
+DEF_INTHIGH(name) begin the definition of the interrupt dispatch table for high priority interrupts.
  
 \emph on
 name
@@ -53224,8 +55655,7 @@
 
 \begin_layout Labeling
 \labelwidthstring 00.00.0000
-DEF_INTLOW(name) begin the definition of the interrupt dispatch table for
- low priority interrupt.
+DEF_INTLOW(name) begin the definition of the interrupt dispatch table for low priority interrupt.
  
 \emph on
 name
@@ -53246,8 +55676,7 @@
 \end_layout
 
 \begin_layout Standard
-Additionally there are two more macros to simplify the declaration of the
- signal handler:
+Additionally there are two more macros to simplify the declaration of the signal handler:
 \end_layout
 
 \begin_layout Labeling
@@ -53289,11 +55718,13 @@
 \end_layout
 
 \begin_layout LyX-Code
-DEF_HANDLER(SIG_TMR0, _tmr0_handler)
+DEF_HANDLER(SIG_TMR0,
+ _tmr0_handler)
 \end_layout
 
 \begin_layout LyX-Code
-DEF_HANDLER(SIG_BCOL, _bcol_handler)
+DEF_HANDLER(SIG_BCOL,
+ _bcol_handler)
 \end_layout
 
 \begin_layout LyX-Code
@@ -53356,6 +55787,7 @@
 
 \series bold
 NOTES:
+
 \series default
  Special care should be taken when using the above scheme:
 \end_layout
@@ -53387,6 +55819,8 @@
 \begin_layout Standard
 The default stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53397,12 +55831,12 @@
 
  size (that is 64 bytes) probably is enough for many programs.
  One must take care that when there are many levels of function nesting,
- or there is excessive usage of stack, its size should be extended.
+ or there is excessive usage of stack,
+ its size should be extended.
  An example of such a case is the printf/sprintf family of functions.
- If you encounter problems like not being able to print integers, then you
- need to set the stack size around the maximum (256 for small stack model).
- The following diagram shows what happens when calling printf to print an
- integer:
+ If you encounter problems like not being able to print integers,
+ then you need to set the stack size around the maximum (256 for small stack model).
+ The following diagram shows what happens when calling printf to print an integer:
 \end_layout
 
 \begin_layout LyX-Code
@@ -53410,8 +55844,7 @@
 \end_layout
 
 \begin_layout Standard
-It is should be understood that stack is easily consumed when calling complicate
-d functions.
+It is should be understood that stack is easily consumed when calling complicated functions.
  Using command line arguments like -
 \begin_inset ERT
 status collapsed
@@ -53425,8 +55858,7 @@
 
 \end_inset
 
--fomit-frame-pointer might reduce stack usage by not creating unnecessary
- stack frames.
+-fomit-frame-pointer might reduce stack usage by not creating unnecessary stack frames.
  Other ways to reduce stack usage may exist.
 \end_layout
 
@@ -53439,9 +55871,9 @@
 \end_layout
 
 \begin_layout Standard
-The PIC16 port emits code which is incompatible with the extended instruction
- set available with many newer devices.
- Make sure to always explicitly disable it, usually using:
+The PIC16 port emits code which is incompatible with the extended instruction set available with many newer devices.
+ Make sure to always explicitly disable it,
+ usually using:
 \end_layout
 
 \begin_layout Itemize
@@ -53462,8 +55894,10 @@
 
 \begin_layout Standard
 \noindent
-Some devices (namely 18f2455, 18f2550, 18f4455, and 18f4550) use _ENHCPU_OFF_4L
- instead of _XINST_OFF_4L.
+Some devices (namely 18f2455,
+ 18f2550,
+ 18f4455,
+ and 18f4550) use _ENHCPU_OFF_4L instead of _XINST_OFF_4L.
 \end_layout
 
 \begin_layout Subsubsection
@@ -53471,9 +55905,10 @@
 \end_layout
 
 \begin_layout Standard
-The PIC16 port currently passes most but not all of the tests in SDCC's
- regression test
+The PIC16 port currently passes most but not all of the tests in SDCC's regression test
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53486,11 +55921,12 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Quality-control"
+nolink "false"
 
 \end_inset
 
-), thus no automatic regression tests are currently performed for the PIC16
- target.
+),
+ thus no automatic regression tests are currently performed for the PIC16 target.
 \end_layout
 
 \begin_layout Section
@@ -53500,6 +55936,8 @@
 \begin_layout Standard
 The mos6502
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53508,8 +55946,8 @@
 
 \end_inset
 
- port can target the original MOS Technology NMOS 6502 , and the CMOS Rockwell/W
-DC 65C02 with enhanched instruction set.
+ port can target the original MOS Technology NMOS 6502 ,
+ and the CMOS Rockwell/WDC 65C02 with enhanched instruction set.
  
 \end_layout
 
@@ -53520,6 +55958,8 @@
 \begin_layout Standard
 On the MOS6502
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53528,8 +55968,7 @@
 
 \end_inset
 
- the startup code is inserted by linking with crt0.rel which is generated
- from sdcc/device/lib/mos6502/crt0.s.
+ the startup code is inserted by linking with crt0.rel which is generated from sdcc/device/lib/mos6502/crt0.s.
  If you need a different startup code you can use the compiler option 
 \emph on
 -
@@ -53555,6 +55994,8 @@
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53586,8 +56027,7 @@
 
 \begin_layout Standard
 There are several approaches to debugging your code.
- This chapter is meant to show your options and to give detail on some of
- them:
+ This chapter is meant to show your options and to give detail on some of them:
 \begin_inset Newline newline
 \end_inset
 
@@ -53599,14 +56039,18 @@
 \end_layout
 
 \begin_layout Itemize
-write your code with debugging in mind (avoid duplicating code, put conceptually
- similar variables into structs, use structured code, have strategic points
- within your code where all variables are consistent, ...)
+write your code with debugging in mind (avoid duplicating code,
+ put conceptually similar variables into structs,
+ use structured code,
+ have strategic points within your code where all variables are consistent,
+ ...)
 \end_layout
 
 \begin_layout Itemize
 run a syntax-checking tool like splint
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53617,6 +56061,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53642,6 +56088,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "lyx:more-pedantic-SPLINT"
+nolink "false"
 
 \end_inset
 
@@ -53668,20 +56115,21 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "lyx:more-pedantic-SPLINT"
+nolink "false"
 
 \end_inset
 
-) on how to handle syntax extensions like __xdata, __at(), ...
+) on how to handle syntax extensions like __xdata,
+ __at(),
+ ...
  
 \end_layout
 
 \begin_layout Itemize
 use another C-compiler to compile code for your target.
  Always an option but not recommended:) And not very likely to help you.
- If you seriously consider walking this path you should at least occasionally
- check portability of your code.
- Most commercial compiler vendors will offer an evaluation version so you
- can test compile your code or snippets of your code.
+ If you seriously consider walking this path you should at least occasionally check portability of your code.
+ Most commercial compiler vendors will offer an evaluation version so you can test compile your code or snippets of your code.
 \end_layout
 
 \begin_layout Standard
@@ -53693,6 +56141,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "cha:Debugging-with-SDCDB"
+nolink "false"
 
 \end_inset
 
@@ -53700,13 +56149,15 @@
 \end_layout
 
 \begin_layout Itemize
-or (8051 specific) use a free open source/commercial simulator which interfaces
- to the AOMF
+or (8051 specific) use a free open source/commercial simulator which interfaces to the AOMF
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-AOMF, AOMF51
+AOMF,
+ AOMF51
 \end_layout
 
 \end_inset
@@ -53715,6 +56166,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "OMF file"
+nolink "false"
 
 \end_inset
 
@@ -53722,28 +56174,25 @@
 \end_layout
 
 \begin_layout Standard
-Debugging On-target: 
+Debugging On-target:
+ 
 \end_layout
 
 \begin_layout Itemize
-use a MCU port pin to serially output debug data to the RS232 port of your
- host.
- You'll probably want some level shifting device typically involving a MAX232
- or similar IC.
- If the hardware serial port of the MCU is not available search for 'Software
- UART' in your favourite search machine.
+use a MCU port pin to serially output debug data to the RS232 port of your host.
+ You'll probably want some level shifting device typically involving a MAX232 or similar IC.
+ If the hardware serial port of the MCU is not available search for 'Software UART' in your favourite search machine.
 \end_layout
 
 \begin_layout Itemize
 use an on-target monitor.
- In this context a monitor is a small program which usually accepts commands
- via a serial line and allows to set program counter, to single step through
- a program and read/write memory locations.
- For the 8051 good examples of monitors are paulmon and cmon51 (see section
- 
+ In this context a monitor is a small program which usually accepts commands via a serial line and allows to set program counter,
+ to single step through a program and read/write memory locations.
+ For the 8051 good examples of monitors are paulmon and cmon51 (see section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Related-open-source-tools"
+nolink "false"
 
 \end_inset
 
@@ -53751,14 +56200,15 @@
 \end_layout
 
 \begin_layout Itemize
-toggle MCU port pins at strategic points within your code and use an oscilloscop
-e.
+toggle MCU port pins at strategic points within your code and use an oscilloscope.
  A 
 \emph on
 digital oscilloscope
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53767,12 +56217,9 @@
 
 \end_inset
 
- with deep trace memory is really helpful especially if you have to debug
- a realtime application.
- If you need to monitor more pins than your oscilloscope provides you can
- sometimes get away with a small R-2R network.
- On a single channel oscilloscope you could for example monitor 2 push-pull
- driven pins by connecting one via a 10
+ with deep trace memory is really helpful especially if you have to debug a realtime application.
+ If you need to monitor more pins than your oscilloscope provides you can sometimes get away with a small R-2R network.
+ On a single channel oscilloscope you could for example monitor 2 push-pull driven pins by connecting one via a 10
 \begin_inset space ~
 \end_inset
 
@@ -53788,8 +56235,7 @@
 \begin_inset Formula $\Omega$
 \end_inset
 
- resistor to the oscilloscope probe (check output drive capability of the
- pins you want to monitor).
+ resistor to the oscilloscope probe (check output drive capability of the pins you want to monitor).
  If you need to monitor many more pins a 
 \emph on
 logic analyzer
@@ -53812,6 +56258,8 @@
 \emph default
 mulator
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53831,8 +56279,7 @@
 use a remote debugger.
  In most 8-bit systems the symbol information is not available on the target,
  and a complete debugger is too bulky for the target system.
- Therefore usually a debugger on the host system connects to an on-target
- debugging stub which accepts only primitive commands.
+ Therefore usually a debugger on the host system connects to an on-target debugging stub which accepts only primitive commands.
  
 \begin_inset Newline newline
 \end_inset
@@ -53844,20 +56291,21 @@
 
 \begin_layout Itemize
 use an on target hardware debugger.
- Some of the more modern MCUs include hardware support for setting break
- points and monitoring/changing variables by using dedicated hardware pins.
- This facility doesn't require additional code to run on the target and
- 
+ Some of the more modern MCUs include hardware support for setting break points and monitoring/changing variables by using dedicated hardware pins.
+ This facility doesn't require additional code to run on the target and 
 \emph on
 usually
 \emph default
  doesn't affect runtime behaviour until a breakpoint is hit.
  For the mcs51 most hardware debuggers use the AOMF
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-AOMF, AOMF51
+AOMF,
+ AOMF51
 \end_layout
 
 \end_inset
@@ -53866,6 +56314,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "OMF file"
+nolink "false"
 
 \end_inset
 
@@ -53878,20 +56327,23 @@
 \end_layout
 
 \begin_layout Itemize
-if you are not familiar with any of the following terms you're likely to
- run into problems rather sooner than later: 
+if you are not familiar with any of the following terms you're likely to run into problems rather sooner than later:
+ 
 \emph on
 volatile
 \emph default
-, 
+,
+ 
 \emph on
 atomic
 \emph default
-, 
+,
+ 
 \emph on
 memory map
 \emph default
-, 
+,
+ 
 \emph on
 overlay
 \emph default
@@ -53908,11 +56360,8 @@
 \end_layout
 
 \begin_layout Itemize
-tell someone else about your problem (actually this is a surprisingly effective
- means to hunt down the bug even if the listener is not familiar with your
- environment).
- As 'failure to communicate' is probably one of the job-induced deformations
- of an embedded programmer this is highly encouraged.
+tell someone else about your problem (actually this is a surprisingly effective means to hunt down the bug even if the listener is not familiar with your environment).
+ As 'failure to communicate' is probably one of the job-induced deformations of an embedded programmer this is highly encouraged.
 \end_layout
 
 \begin_layout Section
@@ -53925,6 +56374,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53939,6 +56390,8 @@
 \begin_layout Standard
 SDCC is distributed with a source level debugger
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53948,9 +56401,11 @@
 \end_inset
 
 .
- The debugger uses a command line interface, the command repertoire of the
- debugger has been kept as close to gdb
+ The debugger uses a command line interface,
+ the command repertoire of the debugger has been kept as close to gdb
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -53960,11 +56415,9 @@
 \end_inset
 
  (the GNU debugger) as possible.
- The configuration and build process is part of the standard compiler installati
-on, which also builds and installs the debugger in the target directory
- specified during configuration.
- The debugger allows you debug BOTH at the C source and at the ASM source
- level.
+ The configuration and build process is part of the standard compiler installation,
+ which also builds and installs the debugger in the target directory specified during configuration.
+ The debugger allows you debug BOTH at the C source and at the ASM source level.
 \end_layout
 
 \begin_layout Subsection
@@ -53987,6 +56440,8 @@
 
 -debug
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54008,11 +56463,12 @@
 
 \end_inset
 
- option must be specified for all files for which debug information is to
- be generated.
+ option must be specified for all files for which debug information is to be generated.
  The compiler generates a .adb file for each of these files.
  The linker creates the .cdb
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54023,6 +56479,8 @@
 
  file from the .adb
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54053,17 +56511,13 @@
 
 \end_inset
 
--debug option is specified the compiler generates extra symbol information
- some of which are put into the assembler source and some are put into the
- .adb file.
- Then the linker creates the .cdb file from the individual .adb files with
- the address information for the symbols.
- The debugger reads the symbolic information generated by the compiler &
- the address information generated by the linker.
- It uses the SIMULATOR (Daniel's S51) to execute the program, the program
- execution is controlled by the debugger.
- When a command is issued for the debugger, it translates it into appropriate
- commands for the simulator.
+-debug option is specified the compiler generates extra symbol information some of which are put into the assembler source and some are put into the .adb file.
+ Then the linker creates the .cdb file from the individual .adb files with the address information for the symbols.
+ The debugger reads the symbolic information generated by the compiler & the address information generated by the linker.
+ It uses the SIMULATOR (Daniel's S51) to execute the program,
+ the program execution is controlled by the debugger.
+ When a command is issued for the debugger,
+ it translates it into appropriate commands for the simulator.
  (Currently SDCDM only connects to the simulator but 
 \emph on
 newcdb
@@ -54124,6 +56578,8 @@
 \begin_layout Itemize
 foo.ihx - the Intel hex format
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54153,11 +56609,11 @@
 
 \end_inset
 
--directory=<source file directory> this option can used to specify the directory
- search list.
- The debugger will look into the directory list specified for source, cdb
- & ihx files.
- The items in the directory list must be separated by ':', e.g.
+-directory=<source file directory> this option can used to specify the directory search list.
+ The debugger will look into the directory list specified for source,
+ cdb & ihx files.
+ The items in the directory list must be separated by ':',
+ e.g.
  if the source files can be in the directories /home/src1 and /home/src2,
  the -
 \begin_inset ERT
@@ -54199,13 +56655,11 @@
 \end_layout
 
 \begin_layout Itemize
--cpu <cpu-type> - this argument is passed to the simulator please see the
- simulator docs for details.
+-cpu <cpu-type> - this argument is passed to the simulator please see the simulator docs for details.
 \end_layout
 
 \begin_layout Itemize
--X <Clock frequency > this options is passed to the simulator please see
- the simulator docs for details.
+-X <Clock frequency > this options is passed to the simulator please see the simulator docs for details.
 \end_layout
 
 \begin_layout Itemize
@@ -54225,12 +56679,11 @@
 \end_layout
 
 \begin_layout Standard
-As mentioned earlier the command interface for the debugger has been deliberatel
-y kept as close the GNU debugger gdb, as possible.
- This will help the integration with existing graphical user interfaces
- (like ddd, xxgdb or xemacs) existing for the GNU debugger.
- If you use a graphical user interface for the debugger you can skip this
- section.
+As mentioned earlier the command interface for the debugger has been deliberately kept as close the GNU debugger gdb,
+ as possible.
+ This will help the integration with existing graphical user interfaces (like ddd,
+ xxgdb or xemacs) existing for the GNU debugger.
+ If you use a graphical user interface for the debugger you can skip this section.
 \end_layout
 
 \begin_layout Subsubsection*
@@ -54300,7 +56753,8 @@
 \end_layout
 
 \begin_layout Standard
-Continue program being debugged, after breakpoint.
+Continue program being debugged,
+ after breakpoint.
 \end_layout
 
 \begin_layout Subsubsection*
@@ -54346,7 +56800,8 @@
 
 \begin_layout Standard
 Step program until it reaches a different source line.
- Note: pressing <return> repeats the last command.
+ Note:
+ pressing <return> repeats the last command.
 \end_layout
 
 \begin_layout Subsubsection*
@@ -54354,7 +56809,8 @@
 \end_layout
 
 \begin_layout Standard
-Step program, proceeding through subroutine calls.
+Step program,
+ proceeding through subroutine calls.
 \end_layout
 
 \begin_layout Subsubsection*
@@ -54407,15 +56863,15 @@
 \end_layout
 
 \begin_layout Subsubsection*
-! simulator command
+!
+ simulator command
 \end_layout
 
 \begin_layout Standard
-Send the string following '!' to the simulator, the simulator response is
- displayed.
+Send the string following '!' to the simulator,
+ the simulator response is displayed.
  Note the debugger does not interpret the command being sent to the simulator,
- so if a command like 'go' is sent the debugger can loose its execution
- context and may display incorrect values.
+ so if a command like 'go' is sent the debugger can loose its execution context and may display incorrect values.
 \end_layout
 
 \begin_layout Subsubsection*
@@ -54437,7 +56893,8 @@
 status collapsed
 
 \begin_layout Plain Layout
-The screenshot was converted from png to eps with: 
+The screenshot was converted from png to eps with:
+ 
 \begin_inset Quotes sld
 \end_inset
 
@@ -54445,13 +56902,11 @@
 \begin_inset Quotes srd
 \end_inset
 
- which produces a pretty compact eps file which is free from compression
- artifacts.
+ which produces a pretty compact eps file which is free from compression artifacts.
 \end_layout
 
 \begin_layout Plain Layout
-The screenshot was included in sdccman.lyx cvs version 1.120 but later removed
- as this broke the build system on Sourceforge (pdf-file was broken.
+The screenshot was included in sdccman.lyx cvs version 1.120 but later removed as this broke the build system on Sourceforge (pdf-file was broken.
  pdflatex does not accept eps files).
 \end_layout
 
@@ -54490,6 +56945,8 @@
 \size default
  shows a screenshot of a debugging session with DDD
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54500,7 +56957,8 @@
 
  (Unix only) on a simulated 8032.
  The debugging session might not run as smoothly as the screenshot suggests.
- The debugger allows setting of breakpoints, displaying and changing variables,
+ The debugger allows setting of breakpoints,
+ displaying and changing variables,
  single stepping through C and assembler code.
  
 \begin_inset Newline newline
@@ -54572,11 +57030,9 @@
 status collapsed
 
 \begin_layout Plain Layout
-Check that the double quotes or an apostrophe within the command line survive
- the \SpecialChar LyX
+Check that the double quotes or an apostrophe within the command line survive the \SpecialChar LyX
  tool chain.
- Previously the apostrophes got slanted in the PDF output so a cut and paste
- did not work.
+ Previously the apostrophes got slanted in the PDF output so a cut and paste did not work.
 \end_layout
 
 \end_inset
@@ -54587,6 +57043,8 @@
 \begin_layout Subsection
 Interfacing SDCDB with XEmacs
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54597,6 +57055,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -54611,11 +57071,10 @@
 \begin_layout Standard
 Two files (in emacs lisp) are provided for the interfacing with XEmacs,
  sdcdb.el and sdcdbsrc.el.
- These two files can be found in the $(prefix)/bin directory after the installat
-ion is complete.
+ These two files can be found in the $(prefix)/bin directory after the installation is complete.
  These files need to be loaded into XEmacs for the interface to work.
- This can be done at XEmacs startup time by inserting the following into
- your '.xemacs' file (which can be found in your HOME directory): 
+ This can be done at XEmacs startup time by inserting the following into your '.xemacs' file (which can be found in your HOME directory):
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -54636,9 +57095,9 @@
 \end_inset
 
 .xemacs is a lisp file so the () around the command is REQUIRED.
- The files can also be loaded dynamically while XEmacs is running, set the
- environment variable 'EMACSLOADPATH' to the installation bin directory
- (<installdir>/bin), then enter the following command ESC-x load-file sdcdbsrc.
+ The files can also be loaded dynamically while XEmacs is running,
+ set the environment variable 'EMACSLOADPATH' to the installation bin directory (<installdir>/bin),
+ then enter the following command ESC-x load-file sdcdbsrc.
  To start the interface enter the following command:
 \begin_inset Newline newline
 \end_inset
@@ -54669,9 +57128,9 @@
 \begin_inset Newline newline
 \end_inset
 
-The command line options that are passed to the simulator directly are bound
- to default values in the file sdcdbsrc.el.
- The variables are listed below, these values maybe changed as required.
+The command line options that are passed to the simulator directly are bound to default values in the file sdcdbsrc.el.
+ The variables are listed below,
+ these values maybe changed as required.
 \end_layout
 
 \begin_layout Itemize
@@ -55004,7 +57463,8 @@
 \begin_inset Newline newline
 \end_inset
 
-;; 
+;;
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -57661,17 +60121,18 @@
 
 \begin_layout Section
 Debugging with other debuggers (e.g.
- GDB): ELF / DWARF
+ GDB):
+ ELF / DWARF
 \end_layout
 
 \begin_layout Standard
-For some ports, SDCC can create ELF binaries with DWARF debug information.
+For some ports,
+ SDCC can create ELF binaries with DWARF debug information.
  This can e.g.
  be used for on-target debugging on STM8 using OpenOCD and GDB.
- To do so, compile with –debug –out-fmt-elf.
- Note that –out-fmt-elf needs to be specified both when compiling (to generate
- the debug info in DWARF rather than CDB format) and linking (to get an
- ELF binary instead of Intel Hex).
+ To do so,
+ compile with –debug –out-fmt-elf.
+ Note that –out-fmt-elf needs to be specified both when compiling (to generate the debug info in DWARF rather than CDB format) and linking (to get an ELF binary instead of Intel Hex).
 \end_layout
 
 \begin_layout Chapter
@@ -57679,18 +60140,18 @@
 \end_layout
 
 \begin_layout Standard
-Here are a few guidelines that will help the compiler generate more efficient
- code, some of the tips are specific to this compiler others are generally
- good programming practice.
+Here are a few guidelines that will help the compiler generate more efficient code,
+ some of the tips are specific to this compiler others are generally good programming practice.
 \end_layout
 
 \begin_layout Itemize
 Use the smallest data type to represent your data-value.
- If it is known in advance that the value is going to be less than 256 then
- use an 'unsigned char' instead of a 'short' or 'int'.
- Please note, that ANSI C requires both signed and unsigned chars to be
- promoted to 'signed int'
+ If it is known in advance that the value is going to be less than 256 then use an 'unsigned char' instead of a 'short' or 'int'.
+ Please note,
+ that ANSI C requires both signed and unsigned chars to be promoted to 'signed int'
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57717,6 +60178,8 @@
  before doing any operation.
  This promotion
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57732,9 +60195,9 @@
 
 \end_inset
 
- can be omitted, if the result is the same.
- The effect of the promotion rules together with the sign-extension is often
- surprising:
+ can be omitted,
+ if the result is the same.
+ The effect of the promotion rules together with the sign-extension is often surprising:
 \begin_inset Separator latexpar
 \end_inset
 
@@ -57749,7 +60212,8 @@
 \begin_inset Newline newline
 \end_inset
 
-if (uc * uc < 0) /* this is true! */
+if (uc * uc < 0) /* this is true!
+ */
 \begin_inset Newline newline
 \end_inset
 
@@ -57803,7 +60267,8 @@
 \end_layout
 
 \begin_layout Standard
-No, the result is not 4:
+No,
+ the result is not 4:
 \end_layout
 
 \begin_layout Verse
@@ -57833,8 +60298,10 @@
 \end_layout
 
 \begin_layout Standard
-Don't complain, that gcc gives you a different result.
- gcc uses 32 bit ints, while SDCC uses 16 bit ints.
+Don't complain,
+ that gcc gives you a different result.
+ gcc uses 32 bit ints,
+ while SDCC uses 16 bit ints.
  Therefore the results are different.
 \begin_inset Newline newline
 \end_inset
@@ -57853,24 +60320,24 @@
 \begin_layout Quote
 
 \emph on
-If well-defined overflow characteristics are important and negative values
- are not, or if you want to steer clear of sign-extension problems when
- manipulating bits or bytes, use one of the corresponding unsigned types.
- (Beware when mixing signed and unsigned values in expressions, though.)
+If well-defined overflow characteristics are important and negative values are not,
+ or if you want to steer clear of sign-extension problems when manipulating bits or bytes,
+ use one of the corresponding unsigned types.
+ (Beware when mixing signed and unsigned values in expressions,
+ though.)
 \begin_inset Newline newline
 \end_inset
 
-Although character types (especially unsigned char) can be used as "tiny"
- integers, doing so is sometimes more trouble than it's worth, due to unpredicta
-ble sign extension and increased code size.
+Although character types (especially unsigned char) can be used as "tiny" integers,
+ doing so is sometimes more trouble than it's worth,
+ due to unpredictable sign extension and increased code size.
 \end_layout
 
 \end_deeper
 \begin_layout Itemize
-Use unsigned when it is known in advance that the value is not going to
- be negative.
- This helps especially if you are doing division or multiplication, bit-shifting
- or are using an array index.
+Use unsigned when it is known in advance that the value is not going to be negative.
+ This helps especially if you are doing division or multiplication,
+ bit-shifting or are using an array index.
 \end_layout
 
 \begin_layout Itemize
@@ -57880,6 +60347,8 @@
 \begin_layout Itemize
 Declare the variables to be local
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57888,7 +60357,8 @@
 
 \end_inset
 
- whenever possible, especially loop control variables (induction).
+ whenever possible,
+ especially loop control variables (induction).
 \end_layout
 
 \begin_layout Itemize
@@ -57917,6 +60387,8 @@
 \begin_layout Itemize
 check whether endianness
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57931,6 +60403,8 @@
 \begin_layout Itemize
 check the device specific header files
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57941,6 +60415,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57952,6 +60428,8 @@
  for compiler specific syntax.
  Eventually include the file <compiler.h
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57990,6 +60468,8 @@
 \begin_layout Itemize
 check whether the startup code contains the correct initialization (watchdog
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -57998,17 +60478,18 @@
 
 \end_inset
 
-, peripherals).
+,
+ peripherals).
 \end_layout
 
 \begin_layout Itemize
-check whether the sizes of short, int, long match.
+check whether the sizes of short,
+ int,
+ long match.
 \end_layout
 
 \begin_layout Itemize
-check if some 16 or 32 bit hardware registers require a specific addressing
- order (least significant or most significant byte first) and adapt if needed
- (
+check if some 16 or 32 bit hardware registers require a specific addressing order (least significant or most significant byte first) and adapt if needed (
 \emph on
 first
 \emph default
@@ -58016,8 +60497,8 @@
 \emph on
 last
 \emph default
- relate to time and not to lower/upper memory location here, so this is
- 
+ relate to time and not to lower/upper memory location here,
+ so this is 
 \emph on
 not
 \emph default
@@ -58029,6 +60510,8 @@
 \emph on
 volatile
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58040,13 +60523,12 @@
 
 \emph default
  is used where needed.
- The compilers might differ in their optimization characteristics (as different
- versions of the same compiler might also use more clever optimizations
- this is good idea anyway).
+ The compilers might differ in their optimization characteristics (as different versions of the same compiler might also use more clever optimizations this is good idea anyway).
  See section 
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Common-interrupt-pitfall-volatile"
+nolink "false"
 
 \end_inset
 
@@ -58058,7 +60540,8 @@
 \end_layout
 
 \begin_layout Itemize
-check and convert compiler specific extensions (interrupts, memory areas,
+check and convert compiler specific extensions (interrupts,
+ memory areas,
  pragmas etc.).
 \end_layout
 
@@ -58093,6 +60576,8 @@
 
 operator
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58105,6 +60590,8 @@
 \family typewriter
 bit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58115,7 +60602,8 @@
 
 
 \family default
- variables, use the !
+ variables,
+ use the !
 \begin_inset space ~
 \end_inset
 
@@ -58124,6 +60612,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "type promotion"
+nolink "false"
 
 \end_inset
 
@@ -58131,6 +60620,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Compatibility-with-previous"
+nolink "false"
 
 \end_inset
 
@@ -58143,13 +60633,14 @@
 \end_layout
 
 \begin_layout Itemize
-check whether timing loops result in proper timing (or preferably consider
- a rewrite of the code with timer based delays instead).
+check whether timing loops result in proper timing (or preferably consider a rewrite of the code with timer based delays instead).
 \end_layout
 
 \begin_layout Itemize
 check for differences in printf parameters
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58160,10 +60651,13 @@
 
  (some compilers push (va_arg
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-vararg, va
+vararg,
+ va
 \begin_inset ERT
 status collapsed
 
@@ -58194,12 +60688,15 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "sec:Compatibility-with-previous"
+nolink "false"
 
 \end_inset
 
 ).
  Provide a putchar()
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58214,6 +60711,8 @@
 \begin_layout Itemize
 check the resulting memory map
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58223,14 +60722,20 @@
 \end_inset
 
 .
- Usage of different memory spaces: code, stack, data (for mcs51/ds390 additional
-ly idata, pdata, xdata).
+ Usage of different memory spaces:
+ code,
+ stack,
+ data (for mcs51/ds390 additionally idata,
+ pdata,
+ xdata).
  Eventually check if unexpected library functions are included.
 \end_layout
 
 \begin_layout Section
 Tools
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58388,6 +60893,8 @@
 \begin_layout Plain Layout
 Keil header 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58398,6 +60905,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -58562,6 +61071,8 @@
 \begin_layout Plain Layout
 Intel Hex packer 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59240,6 +61751,8 @@
 \begin_layout Plain Layout
 uCsim
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59282,6 +61795,8 @@
 \begin_layout Section
 Documentation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59441,16 +61956,23 @@
 \begin_layout Plain Layout
 ASXXXX
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-sdas (sdasgb, sdas6808, sdas8051, sdasz80)
+sdas (sdasgb,
+ sdas6808,
+ sdas8051,
+ sdasz80)
 \end_layout
 
 \end_inset
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59465,6 +61987,8 @@
 
 ASLINK
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59475,6 +61999,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59540,6 +62066,8 @@
 \begin_layout Plain Layout
 SDCC regression test
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59660,6 +62188,8 @@
 \begin_layout Plain Layout
 Notes on debugging with SDCDB
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59725,6 +62255,8 @@
 \begin_layout Plain Layout
 uCsim
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -59807,6 +62339,8 @@
 \begin_layout Plain Layout
 Temporary notes on the pic16
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60001,6 +62535,8 @@
 \begin_layout Plain Layout
 wiki
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60011,6 +62547,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60060,6 +62598,8 @@
 \begin_layout Plain Layout
 sdcc-user mailing list
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60070,6 +62610,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60158,6 +62700,8 @@
 \begin_layout Plain Layout
 help forum
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60244,8 +62788,14 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-trackers (bug tracker, feature requests, patches, support requests, webdocs)
+trackers (bug tracker,
+ feature requests,
+ patches,
+ support requests,
+ webdocs)
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60295,6 +62845,8 @@
 \begin_layout Plain Layout
 rss feed
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60305,6 +62857,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60365,6 +62919,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60373,7 +62929,8 @@
 
 \end_inset
 
- forums and trackers, so that you automatically receive mail on changes.
+ forums and trackers,
+ so that you automatically receive mail on changes.
  You can digg out earlier communication by using the search function 
 \begin_inset Flex URL
 status collapsed
@@ -60398,6 +62955,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60459,6 +63018,8 @@
 \begin_layout Plain Layout
 gpsim
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60508,6 +63069,8 @@
 \begin_layout Plain Layout
 gputils
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60603,8 +63166,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-Tools for Silicon Laboratories JTAG debug adapter, partly based on SDCDB
- (Unix only)
+Tools for Silicon Laboratories JTAG debug adapter,
+ partly based on SDCDB (Unix only)
 \end_layout
 
 \end_inset
@@ -60636,6 +63199,8 @@
 \begin_layout Plain Layout
 indent
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60685,10 +63250,14 @@
 \begin_layout Plain Layout
 srecord
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
-srecord (bin, hex, ...
+srecord (bin,
+ hex,
+ ...
  tool)
 \end_layout
 
@@ -60703,7 +63272,9 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-Object file conversion, checksumming, ...
+Object file conversion,
+ checksumming,
+ ...
 \end_layout
 
 \end_inset
@@ -60735,6 +63306,8 @@
 \begin_layout Plain Layout
 objdump
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60752,7 +63325,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-Object file conversion, ...
+Object file conversion,
+ ...
 \end_layout
 
 \end_inset
@@ -60781,7 +63355,9 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-8051 monitor (hex up-/download, single step, disassemble)
+8051 monitor (hex up-/download,
+ single step,
+ disassemble)
 \end_layout
 
 \end_inset
@@ -60813,6 +63389,8 @@
 \begin_layout Plain Layout
 doxygen
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60869,7 +63447,8 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-IDE (has anyone tried integrating SDCC & SDCDB? Unix only)
+IDE (has anyone tried integrating SDCC & SDCDB?
+ Unix only)
 \end_layout
 
 \end_inset
@@ -60908,7 +63487,9 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-8051 monitor (hex up-/download, single step, disassemble)
+8051 monitor (hex up-/download,
+ single step,
+ disassemble)
 \end_layout
 
 \end_inset
@@ -60940,6 +63521,8 @@
 \begin_layout Plain Layout
 splint
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -60961,6 +63544,7 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "lyx:more-pedantic-SPLINT"
+nolink "false"
 
 \end_inset
 
@@ -60996,6 +63580,8 @@
 \begin_layout Plain Layout
 ddd
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61013,8 +63599,11 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-Debugger, serves nicely as GUI to SDCDB
+Debugger,
+ serves nicely as GUI to SDCDB
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61055,6 +63644,8 @@
 \begin_layout Plain Layout
 d52
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61065,6 +63656,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61082,8 +63675,11 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-Disassembler, can count instruction cycles
+Disassembler,
+ can count instruction cycles
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61092,7 +63688,8 @@
 
 \end_inset
 
-, use with options -pnd
+,
+ use with options -pnd
 \end_layout
 
 \end_inset
@@ -61124,6 +63721,8 @@
 \begin_layout Plain Layout
 cmake
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61141,8 +63740,11 @@
 \begin_inset Text
 
 \begin_layout Plain Layout
-Cross platform build system, generates Makefiles
+Cross platform build system,
+ generates Makefiles
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61153,6 +63755,8 @@
 
  and project workspaces
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61180,7 +63784,8 @@
 
 \end_inset
 
- and a dedicated wiki entry: 
+ and a dedicated wiki entry:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -61276,6 +63881,8 @@
 \begin_layout Plain Layout
 C Reference Card
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61284,7 +63891,8 @@
 
 \end_inset
 
-, 2 pages
+,
+ 2 pages
 \end_layout
 
 \end_inset
@@ -61325,6 +63933,8 @@
 \begin_layout Plain Layout
 C-FAQ
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61524,9 +64134,10 @@
 \end_layout
 
 \begin_layout Standard
-SDCC makes no claims about the completeness of this list and about up-to-datenes
-s or correctness of the application notes
+SDCC makes no claims about the completeness of this list and about up-to-dateness or correctness of the application notes
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61610,6 +64221,8 @@
 \size footnotesize
 Using the SDCC Compiler for the DS80C400
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61665,6 +64278,8 @@
 \size footnotesize
 Using the Free SDCC C Compiler to Develop Firmware for the DS89C420/430/440/450
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61720,6 +64335,8 @@
 \size footnotesize
 Integrating SDCC 8051 Tools Into The Silicon Labs IDE
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61879,8 +64496,7 @@
 
 \begin_layout Plain Layout
 
-http://focus.ti.com/general/docs/lit/getliterature.tsp?literatureNumber=sbaa109&fil
-eType=pdf
+http://focus.ti.com/general/docs/lit/getliterature.tsp?literatureNumber=sbaa109&fileType=pdf
 \end_layout
 
 \end_inset
@@ -61903,64 +64519,79 @@
 \end_layout
 
 \begin_layout Standard
-Some questions answered, some pointers given - it might be time to in turn
- ask 
+Some questions answered,
+ some pointers given - it might be time to in turn ask 
 \emph on
 you
 \emph default
- some questions: 
+ some questions:
+ 
 \end_layout
 
 \begin_layout Itemize
-can you solve your project with the selected microcontroller? Would you
- find out early or rather late that your target is too small/slow/whatever?
+can you solve your project with the selected microcontroller?
+ Would you find out early or rather late that your target is too small/slow/whatever?
  Can you switch to a slightly better device if it doesn't fit?
 \end_layout
 
 \begin_layout Itemize
-should you solve the problem with an 8 bit CPU? Or would a 16/32 bit CPU
- and/or another programming language be more adequate? Would an operating
- system on the target device help?
+should you solve the problem with an 8 bit CPU?
+ Or would a 16/32 bit CPU and/or another programming language be more adequate?
+ Would an operating system on the target device help?
 \end_layout
 
 \begin_layout Itemize
-if you solved the problem, will the marketing department be happy?
+if you solved the problem,
+ will the marketing department be happy?
 \end_layout
 
 \begin_layout Itemize
-if the marketing department is happy, will customers be happy?
+if the marketing department is happy,
+ will customers be happy?
 \end_layout
 
 \begin_layout Itemize
-if you're the project manager, marketing department and maybe even the customer
- in one person, have you tried to see the project from the outside?
+if you're the project manager,
+ marketing department and maybe even the customer in one person,
+ have you tried to see the project from the outside?
 \end_layout
 
 \begin_layout Itemize
-is the project done if you think it is done? Or is just that other interface/pro
-tocol/feature/configuration/option missing? How about website, manual(s),
- internationali(z|s)ation, packaging, labels, 2nd source for components,
- electromagnetic compatability/interference, documentation for production,
- production test software, update mechanism, patent issues?
+is the project done if you think it is done?
+ Or is just that other interface/protocol/feature/configuration/option missing?
+ How about website,
+ manual(s),
+ internationali(z|s)ation,
+ packaging,
+ labels,
+ 2nd source for components,
+ electromagnetic compatability/interference,
+ documentation for production,
+ production test software,
+ update mechanism,
+ patent issues?
 \end_layout
 
 \begin_layout Itemize
-is your project adequately positioned in that magic triangle: fame, fortune,
+is your project adequately positioned in that magic triangle:
+ fame,
+ fortune,
  fun?
 \end_layout
 
 \begin_layout Standard
-Maybe not all answers to these questions are known and some answers may
- even be 
+Maybe not all answers to these questions are known and some answers may even be 
 \emph on
 no
 \emph default
-, nevertheless knowing these questions may help you to avoid burnout
+,
+ nevertheless knowing these questions may help you to avoid burnout
 \begin_inset Foot
 status collapsed
 
 \begin_layout Plain Layout
-burnout is bad for electronic devices, programmers and motorcycle tyres
+burnout is bad for electronic devices,
+ programmers and motorcycle tyres
 \end_layout
 
 \end_inset
@@ -61972,6 +64603,8 @@
 \begin_layout Chapter
 Support
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -61985,17 +64618,17 @@
 
 \begin_layout Standard
 SDCC has grown to be a large project.
- The compiler alone (without the preprocessor, assembler and linker) is
- well over 150,000 lines of code (blank stripped).
- The open source nature of this project is a key to its continued growth
- and support.
- You gain the benefit and support of many active software developers and
- end users.
- Is SDCC perfect? No, that's why we need your help.
+ The compiler alone (without the preprocessor,
+ assembler and linker) is well over 150,000 lines of code (blank stripped).
+ The open source nature of this project is a key to its continued growth and support.
+ You gain the benefit and support of many active software developers and end users.
+ Is SDCC perfect?
+ No,
+ that's why we need your help.
  The developers take pride in fixing reported bugs.
  You can help by reporting the bugs and helping other SDCC users.
- There are lots of ways to contribute, and we encourage you to take part
- in making SDCC a great software package.
+ There are lots of ways to contribute,
+ and we encourage you to take part in making SDCC a great software package.
  
 \end_layout
 
@@ -62014,6 +64647,8 @@
 .
  You'll find the complete set of mailing lists
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62022,8 +64657,13 @@
 
 \end_inset
 
-, forums, bug reporting system, patch submission
+,
+ forums,
+ bug reporting system,
+ patch submission
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -62032,8 +64672,13 @@
 
 \end_inset
 
- system, wiki, rss-feed, download
+ system,
+ wiki,
+ rss-feed,
+ download
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62044,6 +64689,8 @@
 
  area and Subversion code repository
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62058,6 +64705,8 @@
 \begin_layout Section
 Reporting Bugs
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62068,6 +64717,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62078,6 +64729,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62090,17 +64743,14 @@
 \end_layout
 
 \begin_layout Standard
-The recommended way of reporting bugs is using the infrastructure of the
- SourceForge site.
- You can follow the status of bug reports there and have an overview about
- the known bugs.
+The recommended way of reporting bugs is using the infrastructure of the SourceForge site.
+ You can follow the status of bug reports there and have an overview about the known bugs.
 \end_layout
 
 \begin_layout Standard
-Bug reports are automatically forwarded to the developer mailing list and
- will be fixed ASAP.
- When reporting a bug, it is very useful to include a small test program
- (the smaller the better) which reproduces the problem.
+Bug reports are automatically forwarded to the developer mailing list and will be fixed ASAP.
+ When reporting a bug,
+ it is very useful to include a small test program (the smaller the better) which reproduces the problem.
  If you can isolate the problem by looking at the generated assembly code,
  this can be very helpful.
  Compiling your program with the -
@@ -62118,6 +64768,8 @@
 
 -dumpall
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62149,7 +64801,8 @@
 \end_layout
 
 \begin_layout Enumerate
-Specify the exact command you use to run SDCC, or attach your Makefile.
+Specify the exact command you use to run SDCC,
+ or attach your Makefile.
  
 \end_layout
 
@@ -62160,7 +64813,9 @@
 sdcc -v
 \family default
 \series default
-"), your platform, and operating system.
+"),
+ your platform,
+ and operating system.
  
 \end_layout
 
@@ -62174,19 +64829,20 @@
 \end_layout
 
 \begin_layout Standard
-Please attempt to include these 5 important parts, as applicable, in all
- requests for support or when reporting any problems or bugs with SDCC.
- Though this will make your message lengthy, it will greatly improve your
- chance that SDCC users and developers will be able to help you.
- Some SDCC developers are frustrated by bug reports without code provided
- that they can use to reproduce and ultimately fix the problem, so please
- be sure to provide sample code if you are reporting a bug! 
+Please attempt to include these 5 important parts,
+ as applicable,
+ in all requests for support or when reporting any problems or bugs with SDCC.
+ Though this will make your message lengthy,
+ it will greatly improve your chance that SDCC users and developers will be able to help you.
+ Some SDCC developers are frustrated by bug reports without code provided that they can use to reproduce and ultimately fix the problem,
+ so please be sure to provide sample code if you are reporting a bug!
+ 
 \end_layout
 
 \begin_layout Standard
-Please have a short check that you are using a recent version of SDCC and
- the bug is not yet known.
- This is the link for reporting bugs: 
+Please have a short check that you are using a recent version of SDCC and the bug is not yet known.
+ This is the link for reporting bugs:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -62200,6 +64856,8 @@
 .
  With SDCC on average having more than 200 downloads
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62213,8 +64871,7 @@
 status collapsed
 
 \begin_layout Plain Layout
-220 daily downloads on average Jan-Sept 2006 and about 150 daily downloads
- between 2002 and 2005.
+220 daily downloads on average Jan-Sept 2006 and about 150 daily downloads between 2002 and 2005.
  This does not include other methods of distribution.
 \end_layout
 
@@ -62222,7 +64879,8 @@
 
  there must be some users.
  So it's not exactly easy to find a new bug.
- If you find one we need it: 
+ If you find one we need it:
+ 
 \emph on
 reporting bugs is good
 \emph default
@@ -62239,6 +64897,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62249,6 +64909,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62259,6 +64921,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62271,9 +64935,9 @@
 \end_layout
 
 \begin_layout Standard
-Like bug reports feature requests are forwarded to the developer mailing
- list.
- This is the link for requesting features: 
+Like bug reports feature requests are forwarded to the developer mailing list.
+ This is the link for requesting features:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -62290,6 +64954,8 @@
 \begin_layout Section
 Submitting patches
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62302,10 +64968,11 @@
 \end_layout
 
 \begin_layout Standard
-Like bug reports contributed patches are forwarded to the developer mailing
- list.
+Like bug reports contributed patches are forwarded to the developer mailing list.
  This is the link for submitting patches
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62314,7 +64981,8 @@
 
 \end_inset
 
-: 
+:
+ 
 \begin_inset Flex URL
 status collapsed
 
@@ -62349,7 +65017,8 @@
 
 \family default
 \series default
- will be fine, otherwise 
+ will be fine,
+ otherwise 
 \family sans
 \series bold
 
@@ -62387,8 +65056,7 @@
 status collapsed
 
 \begin_layout Plain Layout
-Traffic on sdcc-devel and sdcc-user is about 100 mails/month each not counting
- automated messages (mid 2003)
+Traffic on sdcc-devel and sdcc-user is about 100 mails/month each not counting automated messages (mid 2003)
 \end_layout
 
 \end_inset
@@ -62404,8 +65072,11 @@
 
 \end_inset
 
-, lists
+,
+ lists
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62416,6 +65087,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62424,10 +65097,8 @@
 
 \end_inset
 
- and forums are archived and searchable so if you are lucky someone already
- had a similar problem.
- While mails to the lists themselves are delivered promptly their web front
- end on SourceForge sometimes shows a severe time lag (up to several weeks),
+ and forums are archived and searchable so if you are lucky someone already had a similar problem.
+ While mails to the lists themselves are delivered promptly their web front end on SourceForge sometimes shows a severe time lag (up to several weeks),
  if you're seriously using SDCC please consider subscribing to the lists.
 \end_layout
 
@@ -62438,6 +65109,8 @@
 \begin_layout Standard
 You can follow the status of the Subversion version
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62448,6 +65121,8 @@
 
  of SDCC by watching the Changelog
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62500,9 +65175,10 @@
 -version
 \family default
 \series default
- or the filenames of the snapshot versions of SDCC include date and its
- Subversion
+ or the filenames of the snapshot versions of SDCC include date and its Subversion
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62512,8 +65188,7 @@
 \end_inset
 
  number.
- Subversion allows to download the source of recent or previous versions
- 
+ Subversion allows to download the source of recent or previous versions 
 \begin_inset Flex URL
 status collapsed
 
@@ -62530,6 +65205,8 @@
 \begin_layout Section
 Release policy
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62542,8 +65219,7 @@
 \end_layout
 
 \begin_layout Standard
-Starting with version 2.4.0 SDCC in 2004 uses a time-based release schedule
- with one official release usually during the first half of the year.
+Starting with version 2.4.0 SDCC in 2004 uses a time-based release schedule with one official release usually during the first half of the year.
 \end_layout
 
 \begin_layout Standard
@@ -62559,8 +65235,8 @@
 
 \end_inset
 
-, and you can always build the very last version from the source code available
- at Sourceforge 
+,
+ and you can always build the very last version from the source code available at Sourceforge 
 \begin_inset Flex URL
 status collapsed
 
@@ -62574,6 +65250,8 @@
 .
  The SDCC Wiki
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62584,6 +65262,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62616,6 +65296,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62639,6 +65321,8 @@
 \shape default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62648,14 +65332,14 @@
 \end_inset
 
  check that SDCC itself compiles flawlessly on several host platforms (i386,
- Opteron, 64 bit Alpha, ppc64, Mac OS X on ppc and i386, Solaris on Sparc)
- and checks the quality of the code generated by SDCC by running the code
- for several target platforms through simulators.
- The regression test suite comprises about 1000 files which expand to more
- than 1500 test cases which include about 7000 tests.
+ Opteron,
+ 64 bit Alpha,
+ ppc64,
+ Mac OS X on ppc and i386,
+ Solaris on Sparc) and checks the quality of the code generated by SDCC by running the code for several target platforms through simulators.
+ The regression test suite comprises about 1000 files which expand to more than 1500 test cases which include about 7000 tests.
  A large number of tests from the GCC test suite is included in this.
- The results of these tests are published daily on SDCC's snapshot page
- (click on the red or green symbols on the right side of 
+ The results of these tests are published daily on SDCC's snapshot page (click on the red or green symbols on the right side of 
 \begin_inset Flex URL
 status collapsed
 
@@ -62697,6 +65381,8 @@
  if you don't want to run the complete tests).
  The test code might also be interesting if you want to look for examples
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62707,6 +65393,8 @@
 
  checking corner cases of SDCC or if you plan to submit patches
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62721,6 +65409,8 @@
 \begin_layout Standard
 The PIC14 port uses a different set of regression tests 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62729,7 +65419,8 @@
 
 \end_inset
 
-, you'll find them in the directory 
+,
+ you'll find them in the directory 
 \shape italic
 sdcc/src/regression
 \shape default
@@ -62739,6 +65430,8 @@
 \begin_layout Section
 Examples
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62790,17 +65483,14 @@
 status collapsed
 
 \begin_layout Plain Layout
-I did insert a reference to Paul's web site here although it seems rather
- dedicated to a specific 8032 board (I think it's okay because it f.e.
+I did insert a reference to Paul's web site here although it seems rather dedicated to a specific 8032 board (I think it's okay because it f.e.
  shows LCD/Harddisc interface and has a free 8051 monitor.
- Independent 8032 board vendors face hard competition of heavily subsidized
- development boards anyway).
+ Independent 8032 board vendors face hard competition of heavily subsidized development boards anyway).
 \end_layout
 
 \begin_layout Plain Layout
 Maybe we should include some links to real world applications.
- Preferably pointer to pointers (one for each architecture) so this stays
- manageable here?
+ Preferably pointer to pointers (one for each architecture) so this stays manageable here?
 \end_layout
 
 \end_inset
@@ -62813,7 +65503,8 @@
 \end_layout
 
 \begin_layout Standard
-In short: 
+In short:
+ 
 \emph on
 highly
 \emph default
@@ -62827,8 +65518,7 @@
 only
 \emph default
  fit for use in education".
- This connotation is not intended but nevertheless risked as the licensing
- of SDCC makes it difficult to offer educational discounts
+ This connotation is not intended but nevertheless risked as the licensing of SDCC makes it difficult to offer educational discounts
 \end_layout
 
 \end_inset
@@ -62847,8 +65537,7 @@
 
 \begin_layout Enumerate
 have a curriculum that can be extended for years.
- Then you could use an FPGA board as target and your curriculum will seamlessly
- extend from logic synthesis (http://www.opencores.org 
+ Then you could use an FPGA board as target and your curriculum will seamlessly extend from logic synthesis (http://www.opencores.org 
 \begin_inset Flex URL
 status collapsed
 
@@ -62859,7 +65548,8 @@
 
 \end_inset
 
-, Oregano 
+,
+ Oregano 
 \begin_inset Flex URL
 status collapsed
 
@@ -62870,7 +65560,9 @@
 
 \end_inset
 
-), over assembly programming, to C to FPGA compilers (FPGAC 
+),
+ over assembly programming,
+ to C to FPGA compilers (FPGAC 
 \begin_inset Flex URL
 status collapsed
 
@@ -62885,11 +65577,12 @@
 \end_layout
 
 \begin_layout Enumerate
-be able to insert excursions about skills like using a revision control
- system, submitting/applying patches, using a type-setting (as opposed to
- word-processing) engine \SpecialChar LyX
+be able to insert excursions about skills like using a revision control system,
+ submitting/applying patches,
+ using a type-setting (as opposed to word-processing) engine \SpecialChar LyX
 /\SpecialChar LaTeX
-, using SourceForge 
+,
+ using SourceForge 
 \begin_inset Flex URL
 status collapsed
 
@@ -62900,7 +65593,8 @@
 
 \end_inset
 
-, following some netiquette 
+,
+ following some netiquette 
 \begin_inset Flex URL
 status collapsed
 
@@ -62911,9 +65605,14 @@
 
 \end_inset
 
-, understanding BSD/LGPL/GPL/Proprietary licensing, growth models of Open
- Source Software, CPU simulation, compiler regression tests
+,
+ understanding BSD/LGPL/GPL/Proprietary licensing,
+ growth models of Open Source Software,
+ CPU simulation,
+ compiler regression tests
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -62927,8 +65626,7 @@
 \begin_inset Newline newline
 \end_inset
 
-And if there should be a shortage of ideas then you can always point students
- to the ever-growing feature request list 
+And if there should be a shortage of ideas then you can always point students to the ever-growing feature request list 
 \begin_inset Flex URL
 status collapsed
 
@@ -62943,13 +65641,17 @@
 \end_layout
 
 \begin_layout Enumerate
-not tie students to a specific host platform and instead allow them to use
- a host platform of 
+not tie students to a specific host platform and instead allow them to use a host platform of 
 \emph on
 their
 \emph default
- choice (among them Alpha, i386, i386_64, Mac OS X, Mips, Sparc, Windows
- and eventually OLPC 
+ choice (among them Alpha,
+ i386,
+ i386_64,
+ Mac OS X,
+ Mips,
+ Sparc,
+ Windows and eventually OLPC 
 \begin_inset Flex URL
 status collapsed
 
@@ -62972,8 +65674,7 @@
 \end_layout
 
 \begin_layout Enumerate
-be able to change to a new target platform without having to adopt a new
- tool chain
+be able to change to a new target platform without having to adopt a new tool chain
 \end_layout
 
 \begin_layout Enumerate
@@ -62981,23 +65682,21 @@
 \end_layout
 
 \begin_layout Enumerate
-make your students aware about the pros and cons of open source software
- development
+make your students aware about the pros and cons of open source software development
 \end_layout
 
 \begin_layout Enumerate
-give back to the public as you are probably at least partially publicly
- funded
+give back to the public as you are probably at least partially publicly funded
 \end_layout
 
 \begin_layout Enumerate
-give students a chance to publicly prove their skills and to possibly see
- a world wide impact
+give students a chance to publicly prove their skills and to possibly see a world wide impact
 \end_layout
 
 \begin_layout Standard
 then SDCC is probably among the first choices.
- Well, probably SDCC might be the only choice.
+ Well,
+ probably SDCC might be the only choice.
 \end_layout
 
 \begin_layout Chapter
@@ -63007,6 +65706,8 @@
 \begin_layout Section
 Optimizations
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63019,14 +65720,15 @@
 \end_layout
 
 \begin_layout Standard
-SDCC performs a host of standard optimizations in addition to some MCU specific
- optimizations.
+SDCC performs a host of standard optimizations in addition to some MCU specific optimizations.
  
 \end_layout
 
 \begin_layout Subsection
 Sub-expression Elimination
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63055,7 +65757,9 @@
 \emph on
 e
 \emph default
-limination, e.g.: 
+limination,
+ e.g.:
+ 
 \end_layout
 
 \begin_layout Verse
@@ -63087,7 +65791,8 @@
 \end_layout
 
 \begin_layout Standard
-Some subexpressions are not as obvious as the above example, e.g.:
+Some subexpressions are not as obvious as the above example,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -63126,6 +65831,8 @@
 \begin_layout Subsection
 Dead-Code Elimination
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -63172,7 +65879,8 @@
 \begin_inset space ~
 \end_inset
 
-i = 1; 
+i = 1;
+ 
 \begin_inset space ~
 \end_inset
 
@@ -63282,7 +65990,8 @@
 \begin_inset space ~
 \end_inset
 
-global = 2; 
+global = 2;
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -63292,6 +66001,8 @@
 \begin_layout Subsection
 Copy-Propagation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63318,7 +66029,8 @@
 \begin_inset space ~
 \end_inset
 
-int i, j;
+int i,
+ j;
 \begin_inset Newline newline
 \end_inset
 
@@ -63380,7 +66092,8 @@
 \begin_inset space ~
 \end_inset
 
-int i, j;
+int i,
+ j;
 \begin_inset Newline newline
 \end_inset
 
@@ -63424,13 +66137,15 @@
 \end_layout
 
 \begin_layout Standard
-Note: the dead stores created by this copy propagation will be eliminated
- by dead-code elimination.
+Note:
+ the dead stores created by this copy propagation will be eliminated by dead-code elimination.
 \end_layout
 
 \begin_layout Subsection
 Loop Optimizations
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63459,11 +66174,11 @@
 strength reduction
 \emph default
  of loop induction variables.
- In addition to the strength reduction the optimizer marks the induction
- variables and the register allocator tries to keep the induction variables
- in registers for the duration of the loop.
+ In addition to the strength reduction the optimizer marks the induction variables and the register allocator tries to keep the induction variables in registers for the duration of the loop.
  Because of this preference of the register allocator
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63472,9 +66187,12 @@
 
 \end_inset
 
-, loop induction optimization causes an increase in register pressure, which
- may cause unwanted spilling of other temporary variables into the stack
+,
+ loop induction optimization causes an increase in register pressure,
+ which may cause unwanted spilling of other temporary variables into the stack
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63484,10 +66202,8 @@
 \end_inset
 
  / data space.
- The compiler will generate a warning message when it is forced to allocate
- extra space either on the stack or data space.
- If this extra space allocation is undesirable then induction optimization
- can be eliminated either for the entire source file (with -
+ The compiler will generate a warning message when it is forced to allocate extra space either on the stack or data space.
+ If this extra space allocation is undesirable then induction optimization can be eliminated either for the entire source file (with -
 \begin_inset ERT
 status collapsed
 
@@ -63506,6 +66222,8 @@
 
 noinduction
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63540,7 +66258,9 @@
 \begin_layout Verse
 
 \family typewriter
-for (i = 0 ; i < 100 ; i ++)
+for (i = 0 ;
+ i < 100 ;
+ i ++)
 \begin_inset Newline newline
 \end_inset
 
@@ -63574,7 +66294,9 @@
 \begin_inset Newline newline
 \end_inset
 
-for (i = 0; i < 100; i++)
+for (i = 0;
+ i < 100;
+ i++)
 \begin_inset Newline newline
 \end_inset
 
@@ -63598,8 +66320,8 @@
 \end_layout
 
 \begin_layout Standard
-As mentioned previously some loop invariants are not as apparent, all static
- address computations are also moved out of the loop.
+As mentioned previously some loop invariants are not as apparent,
+ all static address computations are also moved out of the loop.
 \begin_inset Newline newline
 \end_inset
 
@@ -63609,6 +66331,8 @@
 
 Strength Reduction
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63617,13 +66341,15 @@
 
 \end_inset
 
-, this optimization substitutes an expression by a cheaper expression:
+,
+ this optimization substitutes an expression by a cheaper expression:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-for (i=0;i < 100; i++)
+for (i=0;i < 100;
+ i++)
 \begin_inset Newline newline
 \end_inset
 
@@ -63731,6 +66457,8 @@
 \begin_layout Standard
 The more expensive multiplication
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63745,6 +66473,8 @@
 \begin_layout Subsection
 Loop Reversing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -63757,8 +66487,7 @@
 \end_layout
 
 \begin_layout Standard
-This optimization is done to reduce the overhead of checking loop boundaries
- for every iteration.
+This optimization is done to reduce the overhead of checking loop boundaries for every iteration.
  Some simple loops can be reversed and implemented using a 
 \begin_inset Quotes eld
 \end_inset
@@ -63768,9 +66497,9 @@
 \end_inset
 
  instruction.
- SDCC checks for the following criterion to determine if a loop is reversible
- (note: more sophisticated compilers use data-dependency analysis to make
- this determination, SDCC uses a more simple minded analysis).
+ SDCC checks for the following criterion to determine if a loop is reversible (note:
+ more sophisticated compilers use data-dependency analysis to make this determination,
+ SDCC uses a more simple minded analysis).
 \end_layout
 
 \begin_layout Itemize
@@ -63784,8 +66513,9 @@
 
 
 \family typewriter
-for(<symbol> = <expression>; <sym> [< | <=] <expression>; [<sym>++ | <sym>
- += 1])
+for(<symbol> = <expression>;
+ <sym> [< | <=] <expression>;
+ [<sym>++ | <sym> += 1])
 \begin_inset Newline newline
 \end_inset
 
@@ -63837,8 +66567,7 @@
 \end_layout
 
 \begin_layout Itemize
-The loop control variable does NOT participate in any arithmetic operation
- within the loop.
+The loop control variable does NOT participate in any arithmetic operation within the loop.
 \end_layout
 
 \begin_layout Itemize
@@ -63850,8 +66579,8 @@
 \end_layout
 
 \begin_layout Standard
-SDCC does numerous algebraic simplifications, the following is a small sub-set
- of these optimizations.
+SDCC does numerous algebraic simplifications,
+ the following is a small sub-set of these optimizations.
 \end_layout
 
 \begin_layout Verse
@@ -63873,7 +66602,8 @@
 \begin_inset space ~
 \end_inset
 
- /* changed to: */
+ /* changed to:
+ */
 \begin_inset space ~
 \end_inset
 
@@ -63921,7 +66651,8 @@
 \begin_inset space ~
 \end_inset
 
- /* for unsigned i changed to: */
+ /* for unsigned i changed to:
+ */
 \begin_inset space ~
 \end_inset
 
@@ -63957,7 +66688,8 @@
 \begin_inset space ~
 \end_inset
 
- /* changed to: */
+ /* changed to:
+ */
 \begin_inset space ~
 \end_inset
 
@@ -63993,7 +66725,8 @@
 \begin_inset space ~
 \end_inset
 
- /* changed to: */
+ /* changed to:
+ */
 \begin_inset space ~
 \end_inset
 
@@ -64015,6 +66748,8 @@
 \begin_layout Standard
 Note the subexpressions
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -64023,8 +66758,7 @@
 
 \end_inset
 
- given above are generally introduced by macro expansions or as a result
- of copy/constant propagation.
+ given above are generally introduced by macro expansions or as a result of copy/constant propagation.
 \end_layout
 
 \begin_layout Subsection
@@ -64037,6 +66771,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -64051,6 +66787,8 @@
 \begin_layout Standard
 SDCC can optimize switch statements to jump tables
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -64061,13 +66799,14 @@
 
 .
  It makes the decision based on an estimate of the generated code size.
- SDCC is quite liberal in the requirements for jump table generation: 
+ SDCC is quite liberal in the requirements for jump table generation:
+ 
 \end_layout
 
 \begin_layout Itemize
-The labels need not be in order, and the starting number need not be one
- or zero, the case labels are in numerical sequence or not too many case
- labels are missing.
+The labels need not be in order,
+ and the starting number need not be one or zero,
+ the case labels are in numerical sequence or not too many case labels are missing.
 \begin_inset Separator latexpar
 \end_inset
 
@@ -64198,7 +66937,8 @@
 \begin_inset space ~
 \end_inset
 
-case 4: ...
+case 4:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -64302,7 +67042,8 @@
 \begin_inset space ~
 \end_inset
 
-case 0: ...
+case 0:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -64318,7 +67059,8 @@
 \begin_inset space ~
 \end_inset
 
-case 5: ...
+case 5:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -64422,7 +67164,8 @@
 \begin_inset space ~
 \end_inset
 
-case 1: ...
+case 1:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -64438,7 +67181,8 @@
 \begin_inset space ~
 \end_inset
 
-case 3: ...
+case 3:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -64558,7 +67302,8 @@
 \begin_inset space ~
 \end_inset
 
-case 6: ...
+case 6:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -64662,7 +67407,8 @@
 \begin_inset space ~
 \end_inset
 
-case 3: ...
+case 3:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -64678,7 +67424,8 @@
 \begin_inset space ~
 \end_inset
 
-case 7: ...
+case 7:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -64782,7 +67529,8 @@
 \begin_inset space ~
 \end_inset
 
-case 4: ...
+case 4:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -64798,7 +67546,8 @@
 \begin_inset space ~
 \end_inset
 
-case 8: ...
+case 8:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -64902,7 +67651,8 @@
 \begin_inset space ~
 \end_inset
 
-case 5: ...
+case 5:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -64918,7 +67668,8 @@
 \begin_inset space ~
 \end_inset
 
-case 9: ...
+case 9:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -65022,7 +67773,8 @@
 \begin_inset space ~
 \end_inset
 
-case 6: ...
+case 6:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65038,7 +67790,8 @@
 \begin_inset space ~
 \end_inset
 
-case 10: ...
+case 10:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -65138,7 +67891,8 @@
 \begin_inset space ~
 \end_inset
 
-case 7: ...
+case 7:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65154,7 +67908,8 @@
 \begin_inset space ~
 \end_inset
 
-case 11: ...
+case 11:
+ ...
 \begin_inset space ~
 \end_inset
 
@@ -65254,7 +68009,8 @@
 \begin_inset space ~
 \end_inset
 
-case 8: ...
+case 8:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65407,34 +68163,28 @@
 
 \begin_layout Standard
 Both the above switch statements will be implemented using a jump-table.
- The example to the right side is slightly more efficient as the check for
- the lower boundary of the jump-table is not needed.
+ The example to the right side is slightly more efficient as the check for the lower boundary of the jump-table is not needed.
 \end_layout
 
 \end_deeper
 \begin_layout Itemize
-The number of case labels is not larger than supported by the target architectur
-e.
+The number of case labels is not larger than supported by the target architecture.
 \end_layout
 
 \begin_layout Itemize
-If the case labels are not in numerical sequence ('gaps' between cases)
- SDCC checks whether a jump table with additionally inserted dummy cases
- is still attractive.
+If the case labels are not in numerical sequence ('gaps' between cases) SDCC checks whether a jump table with additionally inserted dummy cases is still attractive.
  
 \end_layout
 
 \begin_layout Itemize
-If the starting number is not zero and a check for the lower boundary of
- the jump-table can thus be eliminated SDCC might insert dummy cases 0,
+If the starting number is not zero and a check for the lower boundary of the jump-table can thus be eliminated SDCC might insert dummy cases 0,
  ...
  .
 \end_layout
 
 \begin_layout Standard
-Switch statements which have large gaps in the numeric sequence or those
- that have too many case labels can be split into more than one switch statement
- for efficient code generation, e.g.:
+Switch statements which have large gaps in the numeric sequence or those that have too many case labels can be split into more than one switch statement for efficient code generation,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -65452,7 +68202,8 @@
 \begin_inset space ~
 \end_inset
 
-case 1: ...
+case 1:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65464,7 +68215,8 @@
 \begin_inset space ~
 \end_inset
 
-case 2: ...
+case 2:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65476,7 +68228,8 @@
 \begin_inset space ~
 \end_inset
 
-case 3: ...
+case 3:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65488,7 +68241,8 @@
 \begin_inset space ~
 \end_inset
 
-case 4: ...
+case 4:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65500,7 +68254,8 @@
 \begin_inset space ~
 \end_inset
 
-case 5: ...
+case 5:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65512,7 +68267,8 @@
 \begin_inset space ~
 \end_inset
 
-case 6: ...
+case 6:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65524,7 +68280,8 @@
 \begin_inset space ~
 \end_inset
 
-case 7: ...
+case 7:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65536,7 +68293,8 @@
 \begin_inset space ~
 \end_inset
 
-case 101: ...
+case 101:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65548,7 +68306,8 @@
 \begin_inset space ~
 \end_inset
 
-case 102: ...
+case 102:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65560,7 +68319,8 @@
 \begin_inset space ~
 \end_inset
 
-case 103: ...
+case 103:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65572,7 +68332,8 @@
 \begin_inset space ~
 \end_inset
 
-case 104: ...
+case 104:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65584,7 +68345,8 @@
 \begin_inset space ~
 \end_inset
 
-case 105: ...
+case 105:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65596,7 +68358,8 @@
 \begin_inset space ~
 \end_inset
 
-case 106: ...
+case 106:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65608,7 +68371,8 @@
 \begin_inset space ~
 \end_inset
 
-case 107: ...
+case 107:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65634,7 +68398,8 @@
 \begin_inset space ~
 \end_inset
 
-case 1: ...
+case 1:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65646,7 +68411,8 @@
 \begin_inset space ~
 \end_inset
 
-case 2: ...
+case 2:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65658,7 +68424,8 @@
 \begin_inset space ~
 \end_inset
 
-case 3: ...
+case 3:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65670,7 +68437,8 @@
 \begin_inset space ~
 \end_inset
 
-case 4: ...
+case 4:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65682,7 +68450,8 @@
 \begin_inset space ~
 \end_inset
 
-case 5: ...
+case 5:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65694,7 +68463,8 @@
 \begin_inset space ~
 \end_inset
 
-case 6: ...
+case 6:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65706,7 +68476,8 @@
 \begin_inset space ~
 \end_inset
 
-case 7: ...
+case 7:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65732,7 +68503,8 @@
 \begin_inset space ~
 \end_inset
 
-case 101: ...
+case 101:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65744,7 +68516,8 @@
 \begin_inset space ~
 \end_inset
 
-case 102: ...
+case 102:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65756,7 +68529,8 @@
 \begin_inset space ~
 \end_inset
 
-case 103: ...
+case 103:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65768,7 +68542,8 @@
 \begin_inset space ~
 \end_inset
 
-case 104: ...
+case 104:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65780,7 +68555,8 @@
 \begin_inset space ~
 \end_inset
 
-case 105: ...
+case 105:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65792,7 +68568,8 @@
 \begin_inset space ~
 \end_inset
 
-case 106: ...
+case 106:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65804,7 +68581,8 @@
 \begin_inset space ~
 \end_inset
 
-case 107: ...
+case 107:
+ ...
 \begin_inset Newline newline
 \end_inset
 
@@ -65812,8 +68590,7 @@
 \end_layout
 
 \begin_layout Standard
-then both the switch statements will be implemented using jump-tables whereas
- the unmodified switch statement will not be.
+then both the switch statements will be implemented using jump-tables whereas the unmodified switch statement will not be.
 \end_layout
 
 \begin_layout Standard
@@ -65821,11 +68598,9 @@
 status collapsed
 
 \begin_layout Plain Layout
-There might be reasons which SDCC cannot know about to either favour or
- not favour jump tables.
- If the target system has to be as quick for the last switch case as for
- the first (pro jump table), or if the switch argument is known to be zero
- in the majority of the cases (contra jump table).
+There might be reasons which SDCC cannot know about to either favour or not favour jump tables.
+ If the target system has to be as quick for the last switch case as for the first (pro jump table),
+ or if the switch argument is known to be zero in the majority of the cases (contra jump table).
 \end_layout
 
 \end_inset
@@ -65836,6 +68611,8 @@
 \begin_layout Subsection
 Bit-shifting Operations
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -65848,10 +68625,9 @@
 \end_layout
 
 \begin_layout Standard
-Bit shifting is one of the most frequently used operation in embedded programmin
-g.
- SDCC tries to implement bit-shift operations in the most efficient way
- possible, e.g.:
+Bit shifting is one of the most frequently used operation in embedded programming.
+ SDCC tries to implement bit-shift operations in the most efficient way possible,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -65907,7 +68683,8 @@
 \end_layout
 
 \begin_layout Standard
-Typically, SDCC will not setup a loop if the shift count is known.
+Typically,
+ SDCC will not setup a loop if the shift count is known.
  Another example:
 \end_layout
 
@@ -65998,6 +68775,8 @@
 \begin_layout Subsection
 Bit-rotation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66012,6 +68791,8 @@
 \begin_layout Standard
 A special case of the bit-shift operation is bit rotation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66020,7 +68801,8 @@
 
 \end_inset
 
-, SDCC recognizes the following expression to be a left bit-rotation:
+,
+ SDCC recognizes the following expression to be a left bit-rotation:
 \end_layout
 
 \begin_layout Verse
@@ -66147,14 +68929,16 @@
 \end_layout
 
 \begin_layout Standard
-SDCC uses pattern matching on the parse tree to determine this operation.Variatio
-ns of this case will also be recognized as bit-rotation, i.e.: 
+SDCC uses pattern matching on the parse tree to determine this operation.Variations of this case will also be recognized as bit-rotation,
+ i.e.:
+ 
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-i = ((i >> 7) | (i << 1)); /* left-bit rotation */
+i = ((i >> 7) | (i << 1));
+ /* left-bit rotation */
 \end_layout
 
 \begin_layout Subsection
@@ -66164,6 +68948,8 @@
 \begin_layout Standard
 Other special cases of the bit-shift operations are nibble or byte swapping
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66172,7 +68958,8 @@
 
 \end_inset
 
-, SDCC recognizes the following expressions:
+,
+ SDCC recognizes the following expressions:
 \end_layout
 
 \begin_layout Verse
@@ -66214,6 +69001,7 @@
 \end_inset
 
 i = ((i << 4) | (i >> 4));
+
 \family default
  
 \begin_inset Newline newline
@@ -66221,12 +69009,15 @@
 
 
 \family typewriter
-j = ((j << 8) | (j >> 8)); 
+j = ((j << 8) | (j >> 8));
+ 
 \end_layout
 
 \begin_layout Standard
 and generates a swap instruction for the nibble swapping
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66237,6 +69028,8 @@
 
  or move instructions for the byte swapping
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66273,13 +69066,14 @@
 
 \begin_layout Plain Layout
 Usually 8-bit processors don't care much about endianness.
- This is not the case for the standard 8051 which only has an instruction
- to increment its 
+ This is not the case for the standard 8051 which only has an instruction to increment its 
 \emph on
 dptr
 \emph default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66295,6 +69089,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66305,6 +69101,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66315,12 +69113,16 @@
 
  format (i.e.
  lowest order first) for most backends.
- However, the hc08, s08 and stm8 backends are big-endian.
+ However,
+ the hc08,
+ s08 and stm8 backends are big-endian.
 \end_layout
 
 \begin_layout Subsection
 Getting a Bit
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -66333,11 +69135,12 @@
 \end_layout
 
 \begin_layout Standard
-It is frequently required to obtain the highest order bit of an integral
- type (long, int, short or char types).
+It is frequently required to obtain the highest order bit of an integral type (long,
+ int,
+ short or char types).
  Also obtaining any other order bit is not uncommon.
- SDCC recognizes the following expressions to yield the highest order bit
- and generates optimized code for it, e.g.:
+ SDCC recognizes the following expressions to yield the highest order bit and generates optimized code for it,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -66363,7 +69166,8 @@
 \begin_inset space ~
 \end_inset
 
-unsigned char hob1, aob1;
+unsigned char hob1,
+ aob1;
 \begin_inset Newline newline
 \end_inset
 
@@ -66375,7 +69179,10 @@
 \begin_inset space ~
 \end_inset
 
-bit hob2, hob3, aob2, aob3;
+bit hob2,
+ hob3,
+ aob2,
+ aob3;
 \begin_inset Newline newline
 \end_inset
 
@@ -69285,8 +72092,9 @@
 not
 \emph default
  be recognized.
- They are standard C expressions, so I heartily recommend these be the only
- way to get the highest order bit, (it is portable).
+ They are standard C expressions,
+ so I heartily recommend these be the only way to get the highest order bit,
+ (it is portable).
  Of course it will be recognized even if it is embedded in other expressions,
  e.g.:
 \end_layout
@@ -69304,6 +72112,8 @@
 \begin_layout Subsection
 Higher Order Byte
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -69314,6 +72124,8 @@
 
  / Higher Order Word
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -69326,10 +72138,11 @@
 \end_layout
 
 \begin_layout Standard
-It is also frequently required to obtain a higher order byte or word of
- a larger integral type (long, int or short types).
- For mcs51, SDCC recognizes the following expressions to yield the higher
- order byte or word and generates optimized code for it, e.g.:
+It is also frequently required to obtain a higher order byte or word of a larger integral type (long,
+ int or short types).
+ For mcs51,
+ SDCC recognizes the following expressions to yield the higher order byte or word and generates optimized code for it,
+ e.g.:
 \end_layout
 
 \begin_layout Verse
@@ -69359,7 +72172,8 @@
 \begin_inset space ~
 \end_inset
 
-unsigned char hob1, hob2;
+unsigned char hob1,
+ hob2;
 \begin_inset Newline newline
 \end_inset
 
@@ -69371,7 +72185,8 @@
 \begin_inset space ~
 \end_inset
 
-unsigned int how1, how2;
+unsigned int how1,
+ how2;
 \begin_inset Newline newline
 \end_inset
 
@@ -70332,13 +73147,15 @@
 \end_layout
 
 \begin_layout Standard
-Again, variations of these cases may 
+Again,
+ variations of these cases may 
 \emph on
 not
 \emph default
  be recognized.
- They are standard C expressions, so I heartily recommend these be the only
- way to get the higher order byte/word, (it is portable).
+ They are standard C expressions,
+ so I heartily recommend these be the only way to get the higher order byte/word,
+ (it is portable).
  Of course it will be recognized even if it is embedded in other expressions,
  e.g.:
 \end_layout
@@ -70358,9 +73175,10 @@
 \end_layout
 
 \begin_layout Standard
-For non-intrinsic named address spaces, SDCC will place the bank selection
- instructions optimally.
- For details see Philipp Klaus Krause, 
+For non-intrinsic named address spaces,
+ SDCC will place the bank selection instructions optimally.
+ For details see Philipp Klaus Krause,
+ 
 \begin_inset Quotes sld
 \end_inset
 
@@ -70368,9 +73186,12 @@
 \begin_inset Quotes srd
 \end_inset
 
-, Proceedings of the 16th International Workshop on Software and Compilers
- for Embedded Systems, M-SCOPES ’13, pp 23–30.
- Association for Computing Machinery, 2013.
+,
+ Proceedings of the 16th International Workshop on Software and Compilers for Embedded Systems,
+ M-SCOPES ’13,
+ pp 23–30.
+ Association for Computing Machinery,
+ 2013.
  
 \end_layout
 
@@ -70379,8 +73200,7 @@
 \end_layout
 
 \begin_layout Standard
-SDCC has an implementation of lifetime-optimal speculative partial redundancy
- elimination based on tree-decompositions.
+SDCC has an implementation of lifetime-optimal speculative partial redundancy elimination based on tree-decompositions.
 \end_layout
 
 \begin_layout Subsection
@@ -70393,6 +73213,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status open
 
 \begin_layout Plain Layout
@@ -70408,11 +73230,13 @@
 SDCC currently has two register allocators.
  One of them is optimal when optimizing for code size.
  This register allocator is used by default on all ports except for mcs51,
- ds390, pic14 and pic16.
- With the exception of hc08 and s08, it is also the only available register
- allocator for these ports.
- Even though it runs in polynomial time, it can be quite slow; therefore
- the 
+ ds390,
+ pic14 and pic16.
+ With the exception of hc08 and s08,
+ it is also the only available register allocator for these ports.
+ Even though it runs in polynomial time,
+ it can be quite slow;
+ therefore the 
 \begin_inset Flex Code
 status open
 
@@ -70422,24 +73246,25 @@
 
 \end_inset
 
- command line option can be used for a trade-off between compilation speed
- and quality of the generated code: Lower values result in faster compilation,
+ command line option can be used for a trade-off between compilation speed and quality of the generated code:
+ Lower values result in faster compilation,
  higher values can result in better code being generated.
 \end_layout
 
 \begin_layout Standard
-It first creates a tree-decomposition of the control-flow graph, and then
- uses dynamic programming bottom-up along the tree-decomposition.
- Optimality is achieved through the use of a cost function, which gives
- cost for instructions under register assignments.
- The cost function is target-specific and has to be implemented for each
- port; in all current SDCC ports the cost function is integrated into code
- generation.
+It first creates a tree-decomposition of the control-flow graph,
+ and then uses dynamic programming bottom-up along the tree-decomposition.
+ Optimality is achieved through the use of a cost function,
+ which gives cost for instructions under register assignments.
+ The cost function is target-specific and has to be implemented for each port;
+ in all current SDCC ports the cost function is integrated into code generation.
 \end_layout
 
 \begin_layout Standard
-For more details on how this register allocator works, see: Philipp Klaus
- Krause, 
+For more details on how this register allocator works,
+ see:
+ Philipp Klaus Krause,
+ 
 \begin_inset Quotes sld
 \end_inset
 
@@ -70447,13 +73272,21 @@
 \begin_inset Quotes srd
 \end_inset
 
-, Compiler Construction - 22nd International Conference, CC 2013, Held as
- Part of the European Joint Conferences on Theory and Practice of Software,
+,
+ Compiler Construction - 22nd International Conference,
+ CC 2013,
+ Held as Part of the European Joint Conferences on Theory and Practice of Software,
  ETAPS 2013.
- Proceedings, Lecture Notes in Computer Science, volume 7791, pp.
+ Proceedings,
+ Lecture Notes in Computer Science,
+ volume 7791,
+ pp.
  1-20.
- Springer, 2013.
- Also: Philipp Klaus Krause, 
+ Springer,
+ 2013.
+ Also:
+ Philipp Klaus Krause,
+ 
 \begin_inset Quotes sld
 \end_inset
 
@@ -70461,9 +73294,12 @@
 \begin_inset Quotes srd
 \end_inset
 
-, Proceedings of the 18th International Workshop on Software and Compilers
- for Embedded Systems, SCOPES ’15, pp 22–27.
- Association for Computing Machinery, 2015.
+,
+ Proceedings of the 18th International Workshop on Software and Compilers for Embedded Systems,
+ SCOPES ’15,
+ pp 22–27.
+ Association for Computing Machinery,
+ 2015.
  
 \end_layout
 
@@ -70477,6 +73313,8 @@
 
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -70489,8 +73327,8 @@
 \end_layout
 
 \begin_layout Standard
-The compiler uses a rule based, pattern matching and re-writing mechanism
- for peep-hole optimization.
+The compiler uses a rule based,
+ pattern matching and re-writing mechanism for peep-hole optimization.
  It is inspired by 
 \emph on
 copt
@@ -70505,8 +73343,8 @@
 \end_inset
 
 microsoft.com).
- A default set of rules are compiled into the compiler, additional rules
- may be added with the 
+ A default set of rules are compiled into the compiler,
+ additional rules may be added with the 
 \emph on
 -
 \begin_inset ERT
@@ -70523,6 +73361,8 @@
 
 -peep-file
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -70603,6 +73443,8 @@
 \begin_layout Standard
 The above rule will change the following assembly
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -70635,12 +73477,14 @@
 \end_layout
 
 \begin_layout Standard
-Note: All occurrences of a 
+Note:
+ All occurrences of a 
 \emph on
 %n
 \emph default
  (pattern variable) must denote the same string.
- With the above rule, the assembly sequence:
+ With the above rule,
+ the assembly sequence:
 \end_layout
 
 \begin_layout Verse
@@ -70683,6 +73527,8 @@
  E.g.
  some variants of the 8051 MCU
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -70728,7 +73574,9 @@
 \end_layout
 
 \begin_layout Standard
-(NOTE: from version 2.7.3 on, you can use option -
+(NOTE:
+ from version 2.7.3 on,
+ you can use option -
 \emph on
 
 \begin_inset ERT
@@ -70747,6 +73595,8 @@
 \emph default
 -acall-ajmp
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -70768,7 +73618,8 @@
 
 \end_inset
 
-, which also takes care of aligning the interrupt vectors properly.)
+,
+ which also takes care of aligning the interrupt vectors properly.)
 \begin_inset Newline newline
 \end_inset
 
@@ -70780,12 +73631,10 @@
 \emph on
 inline-assembler code
 \emph default
- is also passed through the peep hole optimizer, thus the peephole optimizer
- can also be used as an assembly level macro expander.
- The rules themselves are MCU dependent whereas the rule language infra-structur
-e is MCU independent.
- Peephole optimization rules for other MCU can be easily programmed using
- the rule language.
+ is also passed through the peep hole optimizer,
+ thus the peephole optimizer can also be used as an assembly level macro expander.
+ The rules themselves are MCU dependent whereas the rule language infra-structure is MCU independent.
+ Peephole optimization rules for other MCU can be easily programmed using the rule language.
 \begin_inset Newline newline
 \end_inset
 
@@ -70999,8 +73848,7 @@
 \end_layout
 
 \begin_layout Standard
-<assembly sequence> := assembly instruction (each instruction including
- labels must be on a separate line).
+<assembly sequence> := assembly instruction (each instruction including labels must be on a separate line).
 \begin_inset Newline newline
 \end_inset
 
@@ -71008,14 +73856,14 @@
 \begin_inset Newline newline
 \end_inset
 
-The optimizer will apply to the rules one by one from the top in the sequence
- of their appearance, it will terminate when all rules are exhausted.
- If the 'restart' option is specified, then the optimizer will start matching
- the rules again from the top, this option for a rule is expensive (performance)
-, it is intended to be used in situations where a transformation will trigger
- the same rule again.
- An example of this (not a good one, it has side effects) is the following
- rule:
+The optimizer will apply to the rules one by one from the top in the sequence of their appearance,
+ it will terminate when all rules are exhausted.
+ If the 'restart' option is specified,
+ then the optimizer will start matching the rules again from the top,
+ this option for a rule is expensive (performance),
+ it is intended to be used in situations where a transformation will trigger the same rule again.
+ An example of this (not a good one,
+ it has side effects) is the following rule:
 \end_layout
 
 \begin_layout Verse
@@ -71057,7 +73905,8 @@
 \begin_inset space ~
 \end_inset
 
-; nop
+;
+ nop
 \begin_inset Newline newline
 \end_inset
 
@@ -71065,9 +73914,10 @@
 \end_layout
 
 \begin_layout Standard
-Note that the replace pattern cannot be a blank, but can be a comment line.
- Without the 'restart' option only the innermost 'pop' 'push' pair would
- be eliminated, i.e.:
+Note that the replace pattern cannot be a blank,
+ but can be a comment line.
+ Without the 'restart' option only the innermost 'pop' 'push' pair would be eliminated,
+ i.e.:
 \end_layout
 
 \begin_layout Verse
@@ -71099,7 +73949,8 @@
 \begin_inset Newline newline
 \end_inset
 
-; nop
+;
+ nop
 \begin_inset Newline newline
 \end_inset
 
@@ -71111,24 +73962,25 @@
 \emph on
 with
 \emph default
- the restart option the rule will be applied again to the resulting code
- and then all the pop-push pairs will be eliminated to yield:
+ the restart option the rule will be applied again to the resulting code and then all the pop-push pairs will be eliminated to yield:
 \end_layout
 
 \begin_layout Verse
 
 \family typewriter
-; nop
+;
+ nop
 \begin_inset Newline newline
 \end_inset
 
-; nop
+;
+ nop
 \end_layout
 
 \begin_layout Standard
 A conditional function can be attached to a rule.
- Attaching rules are somewhat more involved, let's illustrate this with
- an example.
+ Attaching rules are somewhat more involved,
+ let's illustrate this with an example.
 \end_layout
 
 \begin_layout Verse
@@ -71186,12 +74038,12 @@
 \end_layout
 
 \begin_layout Standard
-The optimizer does a look-up of a function name table defined in function
- 
+The optimizer does a look-up of a function name table defined in function 
 \emph on
 callFuncByName
 \emph default
- in the source file SDCCpeeph.c, with the name 
+ in the source file SDCCpeeph.c,
+ with the name 
 \emph on
 labelInRange
 \emph default
@@ -71202,24 +74054,39 @@
 \emph on
 %5
 \emph default
- is crucial, since the function 
+ is crucial,
+ since the function 
 \emph on
 labelInRange
 \emph default
- expects to find the label in that particular variable (the hash table containin
-g the variable bindings is passed as a parameter).
- If you want to code more such functions, take a close look at the function
- labelInRange and the calling mechanism in source file SDCCpeeph.c.
+ expects to find the label in that particular variable (the hash table containing the variable bindings is passed as a parameter).
+ If you want to code more such functions,
+ take a close look at the function labelInRange and the calling mechanism in source file SDCCpeeph.c.
  Currently implemented are 
 \emph on
-labelInRange, labelRefCount, labelRefCountChange, labelIsReturnOnly, xramMovcOpt
-ion, portIsDS390, 24bitMode, notVolatile
+labelInRange,
+ labelRefCount,
+ labelRefCountChange,
+ labelIsReturnOnly,
+ xramMovcOption,
+ portIsDS390,
+ 24bitMode,
+ notVolatile
 \emph default
 .
  
 \emph on
-notUsed, notSame, operandsNotRelated, labelJTInRange, canAssign, optimizeReturn,
- notUsedFrom, labelIsReturnOnly, operandsLiteral, labelIsUncondJump, deadMove,
+notUsed,
+ notSame,
+ operandsNotRelated,
+ labelJTInRange,
+ canAssign,
+ optimizeReturn,
+ notUsedFrom,
+ labelIsReturnOnly,
+ operandsLiteral,
+ labelIsUncondJump,
+ deadMove,
  useAcallAjmp
 \emph default
  and 
@@ -71228,15 +74095,15 @@
 \end_layout
 
 \begin_layout Standard
-This whole thing is a little kludgy, but maybe some day SDCC will have some
- better means.
+This whole thing is a little kludgy,
+ but maybe some day SDCC will have some better means.
  If you are looking at the 
 \family typewriter
 peeph*.def
 \family default
- files, you will see the default rules that are compiled into the compiler,
- you can add your own rules in the default set there if you get tired of
- specifying the -
+ files,
+ you will see the default rules that are compiled into the compiler,
+ you can add your own rules in the default set there if you get tired of specifying the -
 \begin_inset ERT
 status collapsed
 
@@ -71255,6 +74122,8 @@
 \begin_layout Section
 Cyclomatic Complexity
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71267,17 +74136,13 @@
 \end_layout
 
 \begin_layout Standard
-Cyclomatic complexity of a function is defined as the number of independent
- paths the program can take during execution of the function.
- This is an important number since it defines the number test cases you
- have to generate to validate the function.
- The accepted industry standard for complexity number is 10, if the cyclomatic
- complexity reported by SDCC exceeds 10 you should think about simplification
- of the function logic.
- Note that the complexity level is not related to the number of lines of
- code in a function.
- Large functions can have low complexity, and small functions can have large
- complexity levels.
+Cyclomatic complexity of a function is defined as the number of independent paths the program can take during execution of the function.
+ This is an important number since it defines the number test cases you have to generate to validate the function.
+ The accepted industry standard for complexity number is 10,
+ if the cyclomatic complexity reported by SDCC exceeds 10 you should think about simplification of the function logic.
+ Note that the complexity level is not related to the number of lines of code in a function.
+ Large functions can have low complexity,
+ and small functions can have large complexity levels.
  
 \begin_inset Newline newline
 \end_inset
@@ -71294,8 +74159,7 @@
 \end_layout
 
 \begin_layout Standard
-complexity = (number of edges in control flow graph) - (number of nodes
- in control flow graph) + 2;
+complexity = (number of edges in control flow graph) - (number of nodes in control flow graph) + 2;
 \begin_inset Newline newline
 \end_inset
 
@@ -71303,14 +74167,12 @@
 \begin_inset Newline newline
 \end_inset
 
-Having said that the industry standard is 10, you should be aware that in
- some cases it be may unavoidable to have a complexity level of less than
- 10.
+Having said that the industry standard is 10,
+ you should be aware that in some cases it be may unavoidable to have a complexity level of less than 10.
  For example if you have switch statement with more than 10 case labels,
  each case label adds one to the complexity level.
- The complexity level is by no means an absolute measure of the algorithmic
- complexity of the function, it does however provide a good starting point
- for which functions you might look at for further optimization.
+ The complexity level is by no means an absolute measure of the algorithmic complexity of the function,
+ it does however provide a good starting point for which functions you might look at for further optimization.
 \end_layout
 
 \begin_layout Section
@@ -71318,28 +74180,23 @@
 \end_layout
 
 \begin_layout Standard
-The issues for retargetting the compiler are far too numerous to be covered
- by this document.
- What follows is a brief description of each of the phases of the compiler
- and its MCU dependency.
+The issues for retargetting the compiler are far too numerous to be covered by this document.
+ What follows is a brief description of each of the phases of the compiler and its MCU dependency.
 \end_layout
 
 \begin_layout Itemize
 Parsing the source and building the annotated parse tree.
  This phase is largely MCU independent (except for the language extensions).
- Syntax & semantic checks are also done in this phase, along with some initial
- optimizations like back patching labels and the pattern matching optimizations
- like bit-rotation etc.
+ Syntax & semantic checks are also done in this phase,
+ along with some initial optimizations like back patching labels and the pattern matching optimizations like bit-rotation etc.
 \end_layout
 
 \begin_layout Itemize
-The second phase involves generating an intermediate code which can be easy
- manipulated during the later phases.
+The second phase involves generating an intermediate code which can be easy manipulated during the later phases.
  This phase is entirely MCU independent.
- The intermediate code generation assumes the target machine has unlimited
- number of registers, and designates them with the name iTemp.
- The compiler can be made to dump a human readable form of the code generated
- by using the -
+ The intermediate code generation assumes the target machine has unlimited number of registers,
+ and designates them with the name iTemp.
+ The compiler can be made to dump a human readable form of the code generated by using the -
 \begin_inset ERT
 status collapsed
 
@@ -71356,8 +74213,7 @@
 \end_layout
 
 \begin_layout Itemize
-This phase does the bulk of the standard optimizations and is also MCU independe
-nt.
+This phase does the bulk of the standard optimizations and is also MCU independent.
  This phase can be broken down into several sub-phases:
 \begin_inset Newline newline
 \end_inset
@@ -71374,7 +74230,8 @@
 \begin_inset Newline newline
 \end_inset
 
-Do local common subexpression elimination, then global subexpression elimination
+Do local common subexpression elimination,
+ then global subexpression elimination
 \begin_inset Newline newline
 \end_inset
 
@@ -71386,16 +74243,16 @@
 \begin_inset Newline newline
 \end_inset
 
-If loop optimizations caused any changes then do 'global subexpression eliminati
-on' and 'dead code elimination' again.
+If loop optimizations caused any changes then do 'global subexpression elimination' and 'dead code elimination' again.
 \end_layout
 
 \begin_layout Itemize
-This phase determines the live-ranges; by live range I mean those iTemp
- variables defined by the compiler that still survive after all the optimization
-s.
+This phase determines the live-ranges;
+ by live range I mean those iTemp variables defined by the compiler that still survive after all the optimizations.
  Live range analysis
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71404,8 +74261,9 @@
 
 \end_inset
 
- is essential for register allocation, since these computation determines
- which of these iTemps will be assigned to registers, and for how long.
+ is essential for register allocation,
+ since these computation determines which of these iTemps will be assigned to registers,
+ and for how long.
 \end_layout
 
 \begin_layout Itemize
@@ -71414,12 +74272,14 @@
 \begin_inset CommandInset ref
 LatexCommand ref
 reference "subsec:Register-Allocation"
+nolink "false"
 
 \end_inset
 
- should be used in most cases, since it can result in substantially better
- code.
- In the old register allocator, there are two parts to register allocation.
+ should be used in most cases,
+ since it can result in substantially better code.
+ In the old register allocator,
+ there are two parts to register allocation.
 \begin_inset Newline newline
 \end_inset
 
@@ -71428,8 +74288,7 @@
 \end_inset
 
 The first part I call 'register packing' (for lack of a better term).
- In this case several MCU specific expression folding is done to reduce
- register pressure.
+ In this case several MCU specific expression folding is done to reduce register pressure.
 \begin_inset Newline newline
 \end_inset
 
@@ -71437,27 +74296,26 @@
 \begin_inset Newline newline
 \end_inset
 
-The second part is more MCU independent and deals with allocating registers
- to the remaining live ranges.
- A lot of MCU specific code does creep into this phase because of the limited
- number of index registers available in the 8051.
+The second part is more MCU independent and deals with allocating registers to the remaining live ranges.
+ A lot of MCU specific code does creep into this phase because of the limited number of index registers available in the 8051.
 \end_layout
 
 \begin_layout Itemize
-The Code generation phase is (unhappily), entirely MCU dependent and very
- little (if any at all) of this code can be reused for other MCU.
- However the scheme for allocating a homogenized assembler operand for each
- iCode operand may be reused.
+The Code generation phase is (unhappily),
+ entirely MCU dependent and very little (if any at all) of this code can be reused for other MCU.
+ However the scheme for allocating a homogenized assembler operand for each iCode operand may be reused.
 \end_layout
 
 \begin_layout Itemize
-As mentioned in the optimization section the peep-hole optimizer is rule
- based system, which can reprogrammed for other MCUs.
+As mentioned in the optimization section the peep-hole optimizer is rule based system,
+ which can reprogrammed for other MCUs.
 \end_layout
 
 \begin_layout Standard
 More information is available on SDCC Wiki
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71494,6 +74352,8 @@
 \begin_layout Chapter
 Compiler internals
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71519,8 +74379,7 @@
 \begin_layout Standard
 
 \shape italic
-This is an excerpt from an article published in Circuit Cellar Magazine
- in
+This is an excerpt from an article published in Circuit Cellar Magazine in
 \shape default
  
 \series bold
@@ -71528,8 +74387,8 @@
 August 2000
 \series default
 .
- It's outdated (the compiler is much more efficient now and user/developer
- friendly), but pretty well exposes the guts of it all.
+ It's outdated (the compiler is much more efficient now and user/developer friendly),
+ but pretty well exposes the guts of it all.
 \shape default
 
 \begin_inset Newline newline
@@ -71548,6 +74407,8 @@
 \begin_layout Paragraph*
 Parsing
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71562,6 +74423,8 @@
 \begin_layout Standard
 Parsing the input source file and creating an AST (Annotated Syntax Tree
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71571,20 +74434,20 @@
 \end_inset
 
 ).
- This phase also involves propagating types (annotating each node of the
- parse tree with type information) and semantic analysis.
+ This phase also involves propagating types (annotating each node of the parse tree with type information) and semantic analysis.
  There are some MCU specific parsing rules.
- For example the intrinsic named address spaces are MCU specific: While
- there may be an __xdata intrinsic named address space for 8051 there none
- for z80.
- SDCC has MCU specific intrinsic named address spacess, i.e.
- __xdata will be treated as a named address space when parsing 8051 C code
- but will be treated as a C identifier when parsing z80 code.
+ For example the intrinsic named address spaces are MCU specific:
+ While there may be an __xdata intrinsic named address space for 8051 there none for z80.
+ SDCC has MCU specific intrinsic named address spacess,
+ i.e.
+ __xdata will be treated as a named address space when parsing 8051 C code but will be treated as a C identifier when parsing z80 code.
 \end_layout
 
 \begin_layout Paragraph*
 Generating iCode
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71601,13 +74464,14 @@
  In this phase the AST is broken down into three-operand form (iCode).
  These three operand forms are represented as doubly linked lists.
  ICode is the term given to the intermediate form generated by the compiler.
- ICode example section shows some examples of iCode generated for some simple
- C source functions.
+ ICode example section shows some examples of iCode generated for some simple C source functions.
 \end_layout
 
 \begin_layout Paragraph*
 Optimizations
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71621,14 +74485,17 @@
 
 \begin_layout Standard
 Bulk of the target independent optimizations is performed in this phase.
- The optimizations include constant propagation, common sub-expression eliminati
-on, loop invariant code movement, strength reduction of loop induction variables
- and dead-code elimination.
+ The optimizations include constant propagation,
+ common sub-expression elimination,
+ loop invariant code movement,
+ strength reduction of loop induction variables and dead-code elimination.
 \end_layout
 
 \begin_layout Paragraph*
 Live range analysis
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71641,24 +74508,22 @@
 \end_layout
 
 \begin_layout Standard
-During intermediate code generation phase, the compiler assumes the target
- machine has infinite number of registers and generates a lot of temporary
- variables.
- The live range computation determines the lifetime of each of these compiler-ge
-nerated temporaries.
+During intermediate code generation phase,
+ the compiler assumes the target machine has infinite number of registers and generates a lot of temporary variables.
+ The live range computation determines the lifetime of each of these compiler-generated temporaries.
  A picture speaks a thousand words.
- ICode example sections show the live range annotations for each of the
- operand.
- It is important to note here, each iCode is assigned a number in the order
- of its execution in the function.
+ ICode example sections show the live range annotations for each of the operand.
+ It is important to note here,
+ each iCode is assigned a number in the order of its execution in the function.
  The live ranges are computed in terms of these numbers.
- The from number is the number of the iCode which first defines the operand
- and the to number signifies the iCode which uses this operand last.
+ The from number is the number of the iCode which first defines the operand and the to number signifies the iCode which uses this operand last.
 \end_layout
 
 \begin_layout Paragraph*
 Register Allocation
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71671,29 +74536,23 @@
 \end_layout
 
 \begin_layout Standard
-The register allocation determines the type and number of registers needed
- by each operand.
+The register allocation determines the type and number of registers needed by each operand.
  In most MCUs only a few registers can be used for indirect addressing.
- In case of 8051 for example the registers R0 & R1 can be used to indirectly
- address the internal ram and DPTR to indirectly address the external ram.
- The compiler will try to allocate the appropriate register to pointer variables
- if it can.
- ICode example section shows the operands annotated with the registers assigned
- to them.
+ In case of 8051 for example the registers R0 & R1 can be used to indirectly address the internal ram and DPTR to indirectly address the external ram.
+ The compiler will try to allocate the appropriate register to pointer variables if it can.
+ ICode example section shows the operands annotated with the registers assigned to them.
  The compiler will try to keep operands in registers as much as possible;
  there are several schemes the compiler uses to do achieve this.
- When the compiler runs out of registers the compiler will check to see
- if there are any live operands which is not used or defined in the current
- basic block being processed, if there are any found then it will push that
- operand and use the registers in this block, the operand will then be popped
- at the end of the basic block.
+ When the compiler runs out of registers the compiler will check to see if there are any live operands which is not used or defined in the current basic block being processed,
+ if there are any found then it will push that operand and use the registers in this block,
+ the operand will then be popped at the end of the basic block.
  
 \end_layout
 
 \begin_layout Standard
 There are other MCU specific considerations in this phase.
- Some MCUs have an accumulator; very short-lived operands could be assigned
- to the accumulator instead of a general-purpose register.
+ Some MCUs have an accumulator;
+ very short-lived operands could be assigned to the accumulator instead of a general-purpose register.
 \end_layout
 
 \begin_layout Paragraph*
@@ -71703,6 +74562,8 @@
 \begin_layout Standard
 Figure II gives a table of iCode
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71712,13 +74573,11 @@
 \end_inset
 
  operations supported by the compiler.
- The code generation involves translating these operations into corresponding
- assembly code for the processor.
+ The code generation involves translating these operations into corresponding assembly code for the processor.
  This sounds overly simple but that is the essence of code generation.
- Some of the iCode operations are generated on a MCU specific manner for
- example, the z80 port does not use registers to pass parameters so the
- SEND and RECV iCode operations will not be generated, and it also does
- not support JUMPTABLES.
+ Some of the iCode operations are generated on a MCU specific manner for example,
+ the z80 port does not use registers to pass parameters so the SEND and RECV iCode operations will not be generated,
+ and it also does not support JUMPTABLES.
  
 \begin_inset Newline newline
 \end_inset
@@ -71748,6 +74607,8 @@
 \series default
 
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -71835,7 +74696,8 @@
 \begin_layout Plain Layout
 
 \size footnotesize
-IC_RESULT = ! IC_LEFT;
+IC_RESULT = !
+ IC_LEFT;
 \end_layout
 
 \end_inset
@@ -72755,7 +75617,8 @@
 \begin_layout Plain Layout
 
 \size footnotesize
-IC_RESULT = IC_LEFT && IC_RIGHT; 
+IC_RESULT = IC_LEFT && IC_RIGHT;
+ 
 \end_layout
 
 \end_inset
@@ -72801,7 +75664,8 @@
 \begin_layout Plain Layout
 
 \size footnotesize
-IC_RESULT = IC_LEFT || IC_RIGHT; 
+IC_RESULT = IC_LEFT || IC_RIGHT;
+ 
 \end_layout
 
 \end_inset
@@ -73209,8 +76073,7 @@
 
 \size footnotesize
 Conditional jump.
- If true label is present then jump to true label if condition is true else
- jump to false label if condition is false 
+ If true label is present then jump to true label if condition is true else jump to false label if condition is false 
 \end_layout
 
 \end_inset
@@ -73221,7 +76084,8 @@
 \begin_layout Plain Layout
 
 \size footnotesize
-if (IC_COND) goto IC_TRUE; 
+if (IC_COND) goto IC_TRUE;
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -73410,7 +76274,8 @@
 \begin_layout Plain Layout
 
 \size footnotesize
-This is used for passing parameters in registers; 
+This is used for passing parameters in registers;
+ 
 \begin_inset Newline newline
 \end_inset
 
@@ -73569,6 +76434,8 @@
 \begin_layout Paragraph*
 ICode Example
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -73582,8 +76449,8 @@
 
 \begin_layout Standard
 This section shows some details of iCode.
- The example C code does not do anything useful; it is used as an example
- to illustrate the intermediate code generated by the compiler.
+ The example C code does not do anything useful;
+ it is used as an example to illustrate the intermediate code generated by the compiler.
 \end_layout
 
 \begin_layout Verse
@@ -73662,7 +76529,8 @@
 \begin_inset space ~
 \end_inset
 
-short i=10; 
+short i=10;
+ 
 \begin_inset space ~
 \end_inset
 
@@ -73686,7 +76554,8 @@
 \begin_inset space ~
 \end_inset
 
-short sum=10; /* dead initialization eliminated */
+short sum=10;
+ /* dead initialization eliminated */
 \begin_inset Newline newline
 \end_inset
 
@@ -73782,7 +76651,11 @@
 \begin_inset space ~
 \end_inset
 
-for (i = 0, j = 10 ; i < 10 ; i++, j
+for (i = 0,
+ j = 10 ;
+ i < 10 ;
+ i++,
+ j
 \family default
 -
 \begin_inset ERT
@@ -73839,7 +76712,8 @@
 \begin_inset space ~
 \end_inset
 
-mul += i * 3; 
+mul += i * 3;
+ 
 \begin_inset space ~
 \end_inset
 
@@ -73911,8 +76785,7 @@
 \end_layout
 
 \begin_layout Standard
-In addition to the operands each iCode contains information about the filename
- and line it corresponds to in the source file.
+In addition to the operands each iCode contains information about the filename and line it corresponds to in the source file.
  The first field in the listing should be interpreted as follows:
 \begin_inset Newline newline
 \end_inset
@@ -73920,8 +76793,10 @@
 
 \shape italic
 \size footnotesize
-Filename(linenumber: iCode Execution sequence number : ICode hash table
- key : loop depth of the iCode).
+Filename(linenumber:
+ iCode Execution sequence number :
+ ICode hash table key :
+ loop depth of the iCode).
 \shape default
 \size default
 
@@ -73929,12 +76804,12 @@
 \end_inset
 
 Then follows the human readable form of the ICode operation.
- Each operand of this triplet form can be of three basic types a) compiler
- generated temporary b) user defined variable c) a constant value.
- Note that local variables and parameters are replaced by compiler generated
- temporaries.
+ Each operand of this triplet form can be of three basic types a) compiler generated temporary b) user defined variable c) a constant value.
+ Note that local variables and parameters are replaced by compiler generated temporaries.
  Live ranges
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -73947,6 +76822,8 @@
  live ranges are not computed for global variables).
  Registers
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -73963,45 +76840,41 @@
 
 \shape italic
 \size footnotesize
-Operand Name [lr live-from : live-to ] { type information } [ registers
- allocated ].
+Operand Name [lr live-from :
+ live-to ] { type information } [ registers allocated ].
 \shape default
 \size default
 
 \begin_inset Newline newline
 \end_inset
 
-As mentioned earlier the live ranges are computed in terms of the execution
- sequence number of the iCodes, for example 
+As mentioned earlier the live ranges are computed in terms of the execution sequence number of the iCodes,
+ for example 
 \begin_inset Newline newline
 \end_inset
 
 the iTemp0 is live from (i.e.
- first defined in iCode with execution sequence number 3, and is last used
- in the iCode with sequence number 5).
- For induction variables such as iTemp21 the live range computation extends
- the lifetime from the start to the end of the loop.
+ first defined in iCode with execution sequence number 3,
+ and is last used in the iCode with sequence number 5).
+ For induction variables such as iTemp21 the live range computation extends the lifetime from the start to the end of the loop.
 \begin_inset Newline newline
 \end_inset
 
 The register allocator used the live range information to allocate registers,
- the same registers may be used for different temporaries if their live
- ranges do not overlap, for example r0 is allocated to both iTemp6 and to
- iTemp17 since their live ranges do not overlap.
- In addition the allocator also takes into consideration the type and usage
- of a temporary, for example itemp6 is a pointer to near space and is used
- as to fetch data from (i.e.
+ the same registers may be used for different temporaries if their live ranges do not overlap,
+ for example r0 is allocated to both iTemp6 and to iTemp17 since their live ranges do not overlap.
+ In addition the allocator also takes into consideration the type and usage of a temporary,
+ for example itemp6 is a pointer to near space and is used as to fetch data from (i.e.
  used in GET_VALUE_AT_ADDRESS) so it is allocated a pointer register (r0).
- Some short lived temporaries are allocated to special registers which have
- meaning to the code generator e.g.
- iTemp13 is allocated to a pseudo register CC which tells the back end that
- the temporary is used only for a conditional jump the code generation makes
- use of this information to optimize a compare and jump ICode.
+ Some short lived temporaries are allocated to special registers which have meaning to the code generator e.g.
+ iTemp13 is allocated to a pseudo register CC which tells the back end that the temporary is used only for a conditional jump the code generation makes use of this information to optimize a compare and jump ICode.
 \begin_inset Newline newline
 \end_inset
 
 There are several loop optimizations
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -74014,6 +76887,8 @@
  It can detect induction variables iTemp21(i) and iTemp23(j).
  Also note the compiler does selective strength reduction
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -74022,12 +76897,15 @@
 
 \end_inset
 
-, i.e.
- the multiplication of an induction variable in line 18 (gint = j * 3) is
- changed to addition, a new temporary iTemp17 is allocated and assigned
- a initial value, a constant 3 is then added for each iteration of the loop.
+,
+ i.e.
+ the multiplication of an induction variable in line 18 (gint = j * 3) is changed to addition,
+ a new temporary iTemp17 is allocated and assigned a initial value,
+ a constant 3 is then added for each iteration of the loop.
  The compiler does not change the multiplication
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -74042,6 +76920,8 @@
 
 Note the dead code elimination
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -74050,8 +76930,7 @@
 
 \end_inset
 
- optimization eliminated the dead assignments in line 7 & 8 to I and sum
- respectively.
+ optimization eliminated the dead assignments in line 7 & 8 to I and sum respectively.
 \begin_inset Newline newline
 \end_inset
 
@@ -74085,8 +76964,7 @@
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:5:55:0) iTemp6 [lr5:16]{_near * int}[r0] := iTemp0 [lr3:5]{_near
- * int}[r2]
+Sample.c(11:5:55:0) iTemp6 [lr5:16]{_near * int}[r0] := iTemp0 [lr3:5]{_near * int}[r2]
 \end_layout
 
 \begin_layout Standard
@@ -74098,8 +76976,7 @@
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:7:7:1) iTemp4 [lr7:8]{int}[r2 r3] = @[iTemp6 [lr5:16]{_near *
- int}[r0]]
+Sample.c(11:7:7:1) iTemp4 [lr7:8]{int}[r2 r3] = @[iTemp6 [lr5:16]{_near * int}[r0]]
 \end_layout
 
 \begin_layout Standard
@@ -74111,36 +76988,31 @@
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:9:14:1) iTemp7 [lr9:13]{_far * int}[DPTR] := _p [lr0:0]{_far
- * int}
+Sample.c(11:9:14:1) iTemp7 [lr9:13]{_far * int}[DPTR] := _p [lr0:0]{_far * int}
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:10:15:1) _p [lr0:0]{_far * int} = _p [lr0:0]{_far * int} + 0x2
- {short}
+Sample.c(11:10:15:1) _p [lr0:0]{_far * int} = _p [lr0:0]{_far * int} + 0x2 {short}
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:13:18:1) iTemp10 [lr13:14]{int}[r2 r3] = @[iTemp7 [lr9:13]{_far
- * int}[DPTR]]
+Sample.c(11:13:18:1) iTemp10 [lr13:14]{int}[r2 r3] = @[iTemp7 [lr9:13]{_far * int}[DPTR]]
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:14:19:1) *(iTemp6 [lr5:16]{_near * int}[r0]) := iTemp10 [lr13:14]{int
-}[r2 r3]
+Sample.c(11:14:19:1) *(iTemp6 [lr5:16]{_near * int}[r0]) := iTemp10 [lr13:14]{int}[r2 r3]
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(11:15:12:1) iTemp6 [lr5:16]{_near * int}[r0] = iTemp6 [lr5:16]{_near
- * int}[r0] + 0x2 {short}
+Sample.c(11:15:12:1) iTemp6 [lr5:16]{_near * int}[r0] = iTemp6 [lr5:16]{_near * int}[r0] + 0x2 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74200,8 +77072,7 @@
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(15:25:27:1) iTemp13 [lr25:26]{char}[CC] = iTemp21 [lr21:38]{short}[r4]
- < 0xa {short}
+Sample.c(15:25:27:1) iTemp13 [lr25:26]{char}[CC] = iTemp21 [lr21:38]{short}[r4] < 0xa {short}
 \end_layout
 
 \begin_layout Standard
@@ -74213,50 +77084,43 @@
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(16:27:31:1) iTemp2 [lr18:40]{short}[r2] = iTemp2 [lr18:40]{short}[r2]
- + ITemp21 [lr21:38]{short}[r4]
+Sample.c(16:27:31:1) iTemp2 [lr18:40]{short}[r2] = iTemp2 [lr18:40]{short}[r2] + ITemp21 [lr21:38]{short}[r4]
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(17:29:33:1) iTemp15 [lr29:30]{short}[r1] = iTemp21 [lr21:38]{short}[r4]
- * 0x3 {short}
+Sample.c(17:29:33:1) iTemp15 [lr29:30]{short}[r1] = iTemp21 [lr21:38]{short}[r4] * 0x3 {short}
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(17:30:34:1) iTemp11 [lr19:40]{short}[r3] = iTemp11 [lr19:40]{short}[r3]
- + iTemp15 [lr29:30]{short}[r1]
+Sample.c(17:30:34:1) iTemp11 [lr19:40]{short}[r3] = iTemp11 [lr19:40]{short}[r3] + iTemp15 [lr29:30]{short}[r1]
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(18:32:36:1:1) iTemp17 [lr23:38]{int}[r7 r0]= iTemp17 [lr23:38]{int}[r7
- r0]- 0x3 {short}
+Sample.c(18:32:36:1:1) iTemp17 [lr23:38]{int}[r7 r0]= iTemp17 [lr23:38]{int}[r7 r0]- 0x3 {short}
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(18:33:37:1) _gint [lr0:0]{int} = _gint [lr0:0]{int} + iTemp17 [lr23:38]{
-int}[r7 r0]
+Sample.c(18:33:37:1) _gint [lr0:0]{int} = _gint [lr0:0]{int} + iTemp17 [lr23:38]{int}[r7 r0]
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(15:36:42:1) iTemp21 [lr21:38]{short}[r4] = iTemp21 [lr21:38]{short}[r4]
- + 0x1 {short}
+Sample.c(15:36:42:1) iTemp21 [lr21:38]{short}[r4] = iTemp21 [lr21:38]{short}[r4] + 0x1 {short}
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(15:37:45:1) iTemp23 [lr22:38]{int}[r5 r6]= iTemp23 [lr22:38]{int}[r5
- r6]- 0x1 {short}
+Sample.c(15:37:45:1) iTemp23 [lr22:38]{int}[r5 r6]= iTemp23 [lr22:38]{int}[r5 r6]- 0x1 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74274,8 +77138,7 @@
 \begin_layout Standard
 
 \size footnotesize
-Sample.c(20:40:49:0) iTemp24 [lr40:41]{short}[DPTR] = iTemp2 [lr18:40]{short}[r2]
- + ITemp11 [lr19:40]{short}[r3]
+Sample.c(20:40:49:0) iTemp24 [lr40:41]{short}[DPTR] = iTemp2 [lr18:40]{short}[r2] + ITemp11 [lr19:40]{short}[r3]
 \end_layout
 
 \begin_layout Standard
@@ -74357,25 +77220,59 @@
 \begin_layout Standard
 
 \size footnotesize
-; sample.c 5
+;
+ sample.c 5
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; ———————————————-
+;
+ —
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+-
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; function function
+;
+ function function
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; ———————————————-
+;
+ —
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+—
+-
 \end_layout
 
 \begin_layout Standard
@@ -74387,7 +77284,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp0 [lr3:5]{_near * int}[r2] = recv 
+;
+ iTemp0 [lr3:5]{_near * int}[r2] = recv 
 \end_layout
 
 \begin_layout Standard
@@ -74406,7 +77304,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp6 [lr5:16]{_near * int}[r0] := iTemp0 [lr3:5]{_near * int}[r2]
+;
+ iTemp6 [lr5:16]{_near * int}[r0] := iTemp0 [lr3:5]{_near * int}[r2]
 \end_layout
 
 \begin_layout Standard
@@ -74437,13 +77336,15 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp4 [lr7:8]{int}[r2 r3] = @[iTemp6 [lr5:16]{_near * int}[r0]]
+;
+ iTemp4 [lr7:8]{int}[r2 r3] = @[iTemp6 [lr5:16]{_near * int}[r0]]
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; if iTemp4 [lr7:8]{int}[r2 r3] == 0 goto _whilebreak_0($3)
+;
+ if iTemp4 [lr7:8]{int}[r2 r3] == 0 goto _whilebreak_0($3)
 \end_layout
 
 \begin_layout Standard
@@ -74546,7 +77447,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp7 [lr9:13]{_far * int}[DPTR] := _p [lr0:0]{_far * int}
+;
+ iTemp7 [lr9:13]{_far * int}[DPTR] := _p [lr0:0]{_far * int}
 \end_layout
 
 \begin_layout Standard
@@ -74578,7 +77480,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; _p [lr0:0]{_far * int} = _p [lr0:0]{_far * int} + 0x2 {short}
+;
+ _p [lr0:0]{_far * int} = _p [lr0:0]{_far * int} + 0x2 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74662,7 +77565,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp10 [lr13:14]{int}[r2 r3] = @[iTemp7 [lr9:13]{_far * int}[DPTR]]
+;
+ iTemp10 [lr13:14]{int}[r2 r3] = @[iTemp7 [lr9:13]{_far * int}[DPTR]]
 \end_layout
 
 \begin_layout Standard
@@ -74733,7 +77637,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; *(iTemp6 [lr5:16]{_near * int}[r0]) := iTemp10 [lr13:14]{int}[r2 r3]
+;
+ *(iTemp6 [lr5:16]{_near * int}[r0]) := iTemp10 [lr13:14]{int}[r2 r3]
 \end_layout
 
 \begin_layout Standard
@@ -74778,19 +77683,22 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp6 [lr5:16]{_near * int}[r0] = 
+;
+ iTemp6 [lr5:16]{_near * int}[r0] = 
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; iTemp6 [lr5:16]{_near * int}[r0] + 
+;
+ iTemp6 [lr5:16]{_near * int}[r0] + 
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; 0x2 {short}
+;
+ 0x2 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74809,7 +77717,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; goto _whilecontinue_0($1)
+;
+ goto _whilecontinue_0($1)
 \end_layout
 
 \begin_layout Standard
@@ -74828,7 +77737,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; _whilebreak_0($3) :
+;
+ _whilebreak_0($3) :
 \end_layout
 
 \begin_layout Standard
@@ -74840,7 +77750,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp2 [lr18:40]{short}[r2] := 0x0 {short}
+;
+ iTemp2 [lr18:40]{short}[r2] := 0x0 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74859,7 +77770,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp11 [lr19:40]{short}[r3] := 0x0 {short}
+;
+ iTemp11 [lr19:40]{short}[r3] := 0x0 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74878,7 +77790,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp21 [lr21:38]{short}[r4] := 0x0 {short}
+;
+ iTemp21 [lr21:38]{short}[r4] := 0x0 {short}
 \end_layout
 
 \begin_layout Standard
@@ -74897,7 +77810,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp23 [lr22:38]{int}[r5 r6] := 0xa {int}
+;
+ iTemp23 [lr22:38]{int}[r5 r6] := 0xa {int}
 \end_layout
 
 \begin_layout Standard
@@ -74929,7 +77843,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp17 [lr23:38]{int}[r7 r0] := 0x1e {int}
+;
+ iTemp17 [lr23:38]{int}[r7 r0] := 0x1e {int}
 \end_layout
 
 \begin_layout Standard
@@ -74961,7 +77876,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; _forcond_0($4) :
+;
+ _forcond_0($4) :
 \end_layout
 
 \begin_layout Standard
@@ -74973,13 +77889,15 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp13 [lr25:26]{char}[CC] = iTemp21 [lr21:38]{short}[r4] < 0xa {short}
+;
+ iTemp13 [lr25:26]{char}[CC] = iTemp21 [lr21:38]{short}[r4] < 0xa {short}
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; if iTemp13 [lr25:26]{char}[CC] == 0 goto _forbreak_0($7)
+;
+ if iTemp13 [lr25:26]{char}[CC] == 0 goto _forbreak_0($7)
 \end_layout
 
 \begin_layout Standard
@@ -75056,13 +77974,15 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp2 [lr18:40]{short}[r2] = iTemp2 [lr18:40]{short}[r2] + 
+;
+ iTemp2 [lr18:40]{short}[r2] = iTemp2 [lr18:40]{short}[r2] + 
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; iTemp21 [lr21:38]{short}[r4]
+;
+ iTemp21 [lr21:38]{short}[r4]
 \end_layout
 
 \begin_layout Standard
@@ -75107,7 +78027,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp15 [lr29:30]{short}[r1] = iTemp21 [lr21:38]{short}[r4] * 0x3 {short}
+;
+ iTemp15 [lr29:30]{short}[r1] = iTemp21 [lr21:38]{short}[r4] * 0x3 {short}
 \end_layout
 
 \begin_layout Standard
@@ -75165,13 +78086,15 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp11 [lr19:40]{short}[r3] = iTemp11 [lr19:40]{short}[r3] + 
+;
+ iTemp11 [lr19:40]{short}[r3] = iTemp11 [lr19:40]{short}[r3] + 
 \end_layout
 
 \begin_layout Standard
 
 \size footnotesize
-; iTemp15 [lr29:30]{short}[r1]
+;
+ iTemp15 [lr29:30]{short}[r1]
 \end_layout
 
 \begin_layout Standard
@@ -75203,7 +78126,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp17 [lr23:38]{int}[r7 r0]= iTemp17 [lr23:38]{int}[r7 r0]- 0x3 {short}
+;
+ iTemp17 [lr23:38]{int}[r7 r0]= iTemp17 [lr23:38]{int}[r7 r0]- 0x3 {short}
 \end_layout
 
 \begin_layout Standard
@@ -75287,7 +78211,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; _gint [lr0:0]{int} = _gint [lr0:0]{int} + iTemp17 [lr23:38]{int}[r7 r0]
+;
+ _gint [lr0:0]{int} = _gint [lr0:0]{int} + iTemp17 [lr23:38]{int}[r7 r0]
 \end_layout
 
 \begin_layout Standard
@@ -75371,7 +78296,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp21 [lr21:38]{short}[r4] = iTemp21 [lr21:38]{short}[r4] + 0x1 {short}
+;
+ iTemp21 [lr21:38]{short}[r4] = iTemp21 [lr21:38]{short}[r4] + 0x1 {short}
 \end_layout
 
 \begin_layout Standard
@@ -75390,7 +78316,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; iTemp23 [lr22:38]{int}[r5 r6]= iTemp23 [lr22:38]{int}[r5 r6]- 0x1 {short}
+;
+ iTemp23 [lr22:38]{int}[r5 r6]= iTemp23 [lr22:38]{int}[r5 r6]- 0x1 {short}
 \end_layout
 
 \begin_layout Standard
@@ -75435,7 +78362,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; goto _forcond_0($4)
+;
+ goto _forcond_0($4)
 \end_layout
 
 \begin_layout Standard
@@ -75454,7 +78382,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; _forbreak_0($7) :
+;
+ _forbreak_0($7) :
 \end_layout
 
 \begin_layout Standard
@@ -75466,7 +78395,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; ret iTemp24 [lr40:41]{short}
+;
+ ret iTemp24 [lr40:41]{short}
 \end_layout
 
 \begin_layout Standard
@@ -75511,7 +78441,8 @@
 \begin_layout Standard
 
 \size footnotesize
-; _return($8) :
+;
+ _return($8) :
 \end_layout
 
 \begin_layout Standard
@@ -75538,12 +78469,15 @@
 \end_layout
 
 \begin_layout Section
-A few words about basic block successors, predecessors and dominators
+A few words about basic block successors,
+ predecessors and dominators
 \end_layout
 
 \begin_layout Standard
 Successors are basic blocks
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -75556,13 +78490,11 @@
 \begin_inset Newline newline
 \end_inset
 
-Predecessors are basic blocks that might execute before reaching this basic
- block.
+Predecessors are basic blocks that might execute before reaching this basic block.
 \begin_inset Newline newline
 \end_inset
 
-Dominators are basic blocks that WILL execute before reaching this basic
- block.
+Dominators are basic blocks that WILL execute before reaching this basic block.
 \begin_inset Newline newline
 \end_inset
 
@@ -75628,17 +78560,20 @@
 \end_layout
 
 \begin_layout Standard
-a) succList of [BB2] = [BB4], of [BB3] = [BB4], of [BB1] = [BB2,BB3]
+a) succList of [BB2] = [BB4],
+ of [BB3] = [BB4],
+ of [BB1] = [BB2,BB3]
 \end_layout
 
 \begin_layout Standard
-b) predList of [BB2] = [BB1], of [BB3] = [BB1], of [BB4] = [BB2,BB3]
+b) predList of [BB2] = [BB1],
+ of [BB3] = [BB1],
+ of [BB4] = [BB2,BB3]
 \end_layout
 
 \begin_layout Standard
 c) domVect of [BB4] = BB1 ...
- here we are not sure if BB2 or BB3 was executed but we are SURE that BB1
- was executed.
+ here we are not sure if BB2 or BB3 was executed but we are SURE that BB1 was executed.
 \end_layout
 
 \begin_layout Chapter
@@ -75667,7 +78602,10 @@
 
 \emph on
 Thanks to all the other volunteer developers who have helped with coding,
- testing, web-page creation, distribution sets, etc.
+ testing,
+ web-page creation,
+ distribution sets,
+ etc.
  You know who you are :-)
 \emph default
 
@@ -75691,8 +78629,7 @@
 
 \end_inset
 
- which has hosted the project since 1999 and donates significant download
- bandwidth.
+ which has hosted the project since 1999 and donates significant download bandwidth.
 \emph default
 
 \begin_inset Newline newline
@@ -75704,8 +78641,7 @@
 
 
 \emph on
-Also thanks to all SDCC Distributed Compile Farm members for donating CPU
- cycles and bandwidth for snapshot builds.
+Also thanks to all SDCC Distributed Compile Farm members for donating CPU cycles and bandwidth for snapshot builds.
 \begin_inset Newline newline
 \end_inset
 
@@ -75713,13 +78649,14 @@
 \end_layout
 
 \begin_layout Standard
-This document was initially written by Sandeep Dutta and updated by SDCC
- developers.
+This document was initially written by Sandeep Dutta and updated by SDCC developers.
 \end_layout
 
 \begin_layout Standard
 All product names mentioned herein may be trademarks
 \begin_inset Index idx
+range none
+pageformat default
 status collapsed
 
 \begin_layout Plain Layout
@@ -75737,8 +78674,8 @@
 \end_layout
 
 \begin_layout Standard
-To avoid confusion, the installation and building options for SDCC itself
- (chapter 2) are not part of the index.
+To avoid confusion,
+ the installation and building options for SDCC itself (chapter 2) are not part of the index.
 \end_layout
 
 \begin_layout Standard
